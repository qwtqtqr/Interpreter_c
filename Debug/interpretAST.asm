; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_05PKCPKOLM@undef@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04GNFOIEOK@elif@				; `string'
PUBLIC	??_C@_04FHMCPBIP@else@				; `string'
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8478A1A4_tokens@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__36662879_interpretAST@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else@
CONST	SEGMENT
??_C@_04FHMCPBIP@else@ DB 'else', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNFOIEOK@elif@
CONST	SEGMENT
??_C@_04GNFOIEOK@elif@ DB 'elif', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKCPKOLM@undef@
CONST	SEGMENT
??_C@_05PKCPKOLM@undef@ DB 'undef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_interpretAST_binexpr
PUBLIC	_interpretMainAST
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@ ; `string'
PUBLIC	??_C@_0DJ@JHPPHMML@?$FLERROR?$FN?5variable?5?8?$CFs?8?5does?5not?5@ ; `string'
PUBLIC	??_C@_05IBFPJDFI@?$CFlld?6@			; `string'
PUBLIC	??_C@_04FHILBAAL@?$CFLf?6@			; `string'
PUBLIC	??_C@_06NIOGPBNO@false?6@			; `string'
PUBLIC	??_C@_05LFIOBDML@true?6@			; `string'
PUBLIC	??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__exit:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_symtable_add:PROC
EXTRN	_symtable_getItem:PROC
EXTRN	_newID_token:PROC
EXTRN	_symtable_removeItem:PROC
EXTRN	_varStack_push_frame:PROC
EXTRN	_stackFrame_add_var:PROC
EXTRN	_varStack_pop_frame:PROC
EXTRN	_pow:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allmul:PROC
EXTRN	__dtol3:PROC
EXTRN	__ftol2:PROC
EXTRN	__ltod3:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@
CONST	SEGMENT
??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@ DB '[S'
	DB	'YNTAX ERROR] variable ''%s'' has not been initialized', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LFIOBDML@true?6@
CONST	SEGMENT
??_C@_05LFIOBDML@true?6@ DB 'true', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIOGPBNO@false?6@
CONST	SEGMENT
??_C@_06NIOGPBNO@false?6@ DB 'false', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHILBAAL@?$CFLf?6@
CONST	SEGMENT
??_C@_04FHILBAAL@?$CFLf?6@ DB '%Lf', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IBFPJDFI@?$CFlld?6@
CONST	SEGMENT
??_C@_05IBFPJDFI@?$CFlld?6@ DB '%lld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JHPPHMML@?$FLERROR?$FN?5variable?5?8?$CFs?8?5does?5not?5@
CONST	SEGMENT
??_C@_0DJ@JHPPHMML@?$FLERROR?$FN?5variable?5?8?$CFs?8?5does?5not?5@ DB '['
	DB	'ERROR] variable ''%s'' does not exist or is out of scope', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
CONST	SEGMENT
??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@ DB '[ERROR] invali'
	DB	'd datatype', 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _RETURN_DATATYPE_NUM
_TEXT	SEGMENT
tv1247 = -1900						; size = 4
tv1145 = -1900						; size = 4
tv1046 = -1900						; size = 4
tv917 = -1900						; size = 4
tv820 = -1900						; size = 4
tv723 = -1900						; size = 4
tv626 = -1900						; size = 4
tv529 = -1900						; size = 4
tv2746 = -1896						; size = 8
tv2744 = -1896						; size = 8
tv2742 = -1896						; size = 8
tv2740 = -1896						; size = 8
tv2611 = -1896						; size = 4
tv2488 = -1896						; size = 4
tv2381 = -1896						; size = 4
tv2285 = -1896						; size = 4
tv2191 = -1896						; size = 4
tv2095 = -1896						; size = 4
tv1990 = -1896						; size = 4
tv1879 = -1896						; size = 4
tv1287 = -1896						; size = 4
tv1277 = -1896						; size = 4
tv1238 = -1896						; size = 4
tv1229 = -1896						; size = 4
tv1185 = -1896						; size = 4
tv1175 = -1896						; size = 4
tv1136 = -1896						; size = 4
tv1127 = -1896						; size = 4
tv2657 = -1892						; size = 4
tv2644 = -1892						; size = 4
tv2604 = -1892						; size = 4
tv2595 = -1892						; size = 4
tv2578 = -1892						; size = 4
tv2534 = -1892						; size = 4
tv2521 = -1892						; size = 4
tv2481 = -1892						; size = 4
tv2472 = -1892						; size = 4
tv2455 = -1892						; size = 4
tv2380 = -1892						; size = 4
tv2284 = -1892						; size = 4
tv2190 = -1892						; size = 4
tv2094 = -1892						; size = 4
tv1989 = -1892						; size = 4
tv1878 = -1892						; size = 4
tv1298 = -1892						; size = 4
tv1267 = -1892						; size = 4
tv1257 = -1892						; size = 4
tv1220 = -1892						; size = 4
tv1196 = -1892						; size = 4
tv1165 = -1892						; size = 4
tv1155 = -1892						; size = 4
tv1118 = -1892						; size = 4
tv1094 = -1892						; size = 4
tv1084 = -1892						; size = 4
tv1074 = -1892						; size = 4
tv1064 = -1892						; size = 4
tv1055 = -1892						; size = 4
tv1038 = -1892						; size = 4
tv1029 = -1892						; size = 4
tv1020 = -1892						; size = 4
tv997 = -1892						; size = 4
tv955 = -1892						; size = 4
tv945 = -1892						; size = 4
tv935 = -1892						; size = 4
tv926 = -1892						; size = 4
tv909 = -1892						; size = 4
tv900 = -1892						; size = 4
tv891 = -1892						; size = 4
tv868 = -1892						; size = 4
tv858 = -1892						; size = 4
tv848 = -1892						; size = 4
tv838 = -1892						; size = 4
tv829 = -1892						; size = 4
tv812 = -1892						; size = 4
tv803 = -1892						; size = 4
tv794 = -1892						; size = 4
tv771 = -1892						; size = 4
tv761 = -1892						; size = 4
tv751 = -1892						; size = 4
tv741 = -1892						; size = 4
tv732 = -1892						; size = 4
tv715 = -1892						; size = 4
tv706 = -1892						; size = 4
tv697 = -1892						; size = 4
tv674 = -1892						; size = 4
tv664 = -1892						; size = 4
tv654 = -1892						; size = 4
tv644 = -1892						; size = 4
tv635 = -1892						; size = 4
tv618 = -1892						; size = 4
tv609 = -1892						; size = 4
tv600 = -1892						; size = 4
tv577 = -1892						; size = 4
tv567 = -1892						; size = 4
tv557 = -1892						; size = 4
tv547 = -1892						; size = 4
tv538 = -1892						; size = 4
tv521 = -1892						; size = 4
tv512 = -1892						; size = 4
tv503 = -1892						; size = 4
tv69 = -1892						; size = 4
_res_int$1 = -1308					; size = 4
_res_long$ = -1296					; size = 8
_bool_val_2$2 = -1280					; size = 8
_bool_val_1$3 = -1264					; size = 8
_bool_val$4 = -1248					; size = 8
_bool_val$5 = -1232					; size = 8
_bool_val$6 = -1216					; size = 8
_bool_val$7 = -1200					; size = 8
_boolRes$8 = -1184					; size = 4
_bool_val_2$9 = -1172					; size = 8
_bool_val_1$10 = -1156					; size = 8
_bool_val$11 = -1140					; size = 8
_bool_val$12 = -1124					; size = 8
_bool_val$13 = -1108					; size = 8
_bool_val$14 = -1092					; size = 8
_boolRes$15 = -1076					; size = 4
_bool_val_2$16 = -1064					; size = 8
_bool_val_1$17 = -1048					; size = 8
_bool_val$18 = -1032					; size = 8
_bool_val$19 = -1016					; size = 8
_bool_val$20 = -1000					; size = 8
_bool_val$21 = -984					; size = 8
_boolRes$22 = -968					; size = 4
_bool_val_2$23 = -956					; size = 8
_bool_val_1$24 = -940					; size = 8
_bool_val$25 = -924					; size = 8
_bool_val$26 = -908					; size = 8
_bool_val$27 = -892					; size = 8
_bool_val$28 = -876					; size = 8
_boolRes$29 = -860					; size = 4
_bool_val_2$30 = -848					; size = 8
_bool_val_1$31 = -832					; size = 8
_bool_val$32 = -816					; size = 8
_bool_val$33 = -800					; size = 8
_bool_val$34 = -784					; size = 8
_bool_val$35 = -768					; size = 8
_boolRes$36 = -752					; size = 4
_bool_val_2$37 = -740					; size = 8
_bool_val_1$38 = -724					; size = 8
_bool_val$39 = -708					; size = 8
_bool_val$40 = -692					; size = 8
_bool_val$41 = -676					; size = 8
_bool_val$42 = -660					; size = 8
_boolRes$43 = -644					; size = 4
_bool_val_2$44 = -632					; size = 8
_bool_val_1$45 = -616					; size = 8
_bool_val$46 = -600					; size = 8
_bool_val$47 = -584					; size = 8
_bool_val$48 = -568					; size = 8
_bool_val$49 = -552					; size = 8
_boolRes$50 = -536					; size = 4
_bool_val_2$51 = -524					; size = 8
_bool_val_1$52 = -508					; size = 8
_bool_val$53 = -492					; size = 8
_bool_val$54 = -476					; size = 8
_bool_val$55 = -460					; size = 8
_bool_val$56 = -444					; size = 8
_boolRes$57 = -428					; size = 4
_result$58 = -416					; size = 4
_bool_val_2$59 = -404					; size = 8
_bool_val_1$60 = -388					; size = 8
_bool_val$61 = -372					; size = 8
_bool_val$62 = -356					; size = 8
_bool_val$63 = -340					; size = 8
_bool_val$64 = -324					; size = 8
_bool_val_2$65 = -308					; size = 8
_bool_val_1$66 = -292					; size = 8
_bool_val$67 = -276					; size = 8
_bool_val$68 = -260					; size = 8
_bool_val$69 = -244					; size = 8
_bool_val$70 = -228					; size = 8
_bool_val_2$71 = -212					; size = 8
_bool_val_1$72 = -196					; size = 8
_bool_val$73 = -180					; size = 8
_bool_val$74 = -164					; size = 8
_bool_val$75 = -148					; size = 8
_bool_val$76 = -132					; size = 8
_bool_val_2$77 = -116					; size = 8
_bool_val_1$78 = -100					; size = 8
_bool_val$79 = -84					; size = 8
_bool_val$80 = -68					; size = 8
_bool_val$81 = -52					; size = 8
_bool_val$82 = -36					; size = 8
_result$ = -20						; size = 4
_init$ = -8						; size = 4
_leftVal$ = 8						; size = 4
_rightVal$ = 12						; size = 4
_OP$ = 16						; size = 4
_dt_left$ = 20						; size = 4
_dt_right$ = 24						; size = 4
_RETURN_DATATYPE_NUM PROC				; COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1900				; 0000076cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1900]
	mov	ecx, 475				; 000001dbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __36662879_interpretAST@c
	call	@__CheckForDebuggerJustMyCode@4

; 120  : 	int init = 0;

	mov	DWORD PTR _init$[ebp], 0

; 121  : 	long double* result = malloc(sizeof(long double));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 122  : 	switch (OP)

	mov	eax, DWORD PTR _OP$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 30			; 0000001eH
	ja	$LN2@RETURN_DAT
	mov	ecx, DWORD PTR tv69[ebp]
	movzx	edx, BYTE PTR $LN276@RETURN_DAT[ecx]
	jmp	DWORD PTR $LN277@RETURN_DAT[edx*4]
$LN4@RETURN_DAT:

; 123  : 	{
; 124  : 	case TT_PLUS:   DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, +); break;

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN5@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN5@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	addsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN5@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN6@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN6@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	addsd	xmm0, QWORD PTR [edx]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN6@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN7@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN7@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	addsd	xmm0, QWORD PTR [esi]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN7@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN8@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN8@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	movsd	QWORD PTR tv2740[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv2740[ebp]
	addsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN8@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN9@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN9@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$82[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$82[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN9@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN10@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN10@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$81[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$81[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN10@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN11@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN11@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$80[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	addsd	xmm0, QWORD PTR _bool_val$80[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN11@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN12@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN12@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$79[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	addsd	xmm0, QWORD PTR _bool_val$79[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN12@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN13@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN13@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$78[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$77[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$78[ebp]
	addsd	xmm0, QWORD PTR _bool_val_2$77[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN13@RETURN_DAT:
	jmp	$LN2@RETURN_DAT
$LN14@RETURN_DAT:

; 125  : 	case TT_MINUS:  DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, -); break;

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN15@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN15@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	subsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN15@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN16@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN16@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	subsd	xmm0, QWORD PTR [edx]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN16@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN17@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN17@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	subsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN17@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN18@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN18@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	movsd	QWORD PTR tv2742[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv2742[ebp]
	subsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN18@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN19@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN19@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$76[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$76[ebp]
	subsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN19@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN20@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN20@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$75[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$75[ebp]
	subsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN20@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN21@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN21@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$74[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$74[ebp]
	subsd	xmm1, xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN21@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN22@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN22@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$73[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$73[ebp]
	subsd	xmm1, xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN22@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN23@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN23@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$72[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$71[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$72[ebp]
	subsd	xmm0, QWORD PTR _bool_val_2$71[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN23@RETURN_DAT:
	jmp	$LN2@RETURN_DAT
$LN24@RETURN_DAT:

; 126  : 	case TT_MUL:    DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, *); break;

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN25@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN25@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN25@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN26@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN26@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [edx]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN26@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN27@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN27@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	mulsd	xmm0, QWORD PTR [esi]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN27@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN28@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN28@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	movsd	QWORD PTR tv2744[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv2744[ebp]
	mulsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN28@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN29@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN29@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$70[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$70[ebp]
	mulsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN29@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN30@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN30@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$69[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$69[ebp]
	mulsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN30@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN31@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN31@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$68[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mulsd	xmm0, QWORD PTR _bool_val$68[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN31@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN32@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN32@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$67[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mulsd	xmm0, QWORD PTR _bool_val$67[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN32@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN33@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN33@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$66[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$65[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$66[ebp]
	mulsd	xmm0, QWORD PTR _bool_val_2$65[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN33@RETURN_DAT:
	jmp	$LN2@RETURN_DAT
$LN34@RETURN_DAT:

; 127  : 	case TT_DIV:    DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, / ); break;

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN35@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN35@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	divsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN35@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN36@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN36@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	divsd	xmm0, QWORD PTR [edx]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN36@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN37@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN37@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	divsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN37@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN38@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN38@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	movsd	QWORD PTR tv2746[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv2746[ebp]
	divsd	xmm1, xmm0
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN38@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN39@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN39@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$64[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$64[ebp]
	divsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN39@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN40@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN40@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$63[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$63[ebp]
	divsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [edx], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN40@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN41@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN41@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$62[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$62[ebp]
	divsd	xmm1, xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN41@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN42@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN42@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$61[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$61[ebp]
	divsd	xmm1, xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [ecx], xmm1
	mov	DWORD PTR _init$[ebp], 1
$LN42@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN43@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN43@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$60[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$59[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$60[ebp]
	divsd	xmm0, QWORD PTR _bool_val_2$59[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	DWORD PTR _init$[ebp], 1
$LN43@RETURN_DAT:
	jmp	$LN2@RETURN_DAT
$LN44@RETURN_DAT:

; 128  : 
; 129  : 	case TT_POW:
; 130  : 		if (dt_left == DT_FLOAT && dt_right == DT_FLOAT)

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN45@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN45@RETURN_DAT

; 131  : 		{
; 132  : 			*result = pow(*(leftVal->doubleVal), *(rightVal->doubleVal));

	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _leftVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _result$[ebp]
	fstp	QWORD PTR [ecx]

; 133  : 			init = 1;

	mov	DWORD PTR _init$[ebp], 1
$LN45@RETURN_DAT:

; 134  : 		}
; 135  : 		if (dt_left == DT_INT && dt_right == DT_FLOAT)

	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN46@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN46@RETURN_DAT

; 136  : 		{
; 137  : 			*result = pow(*(leftVal->intVal), *(rightVal->doubleVal));

	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _leftVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	call	__ltod3
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _result$[ebp]
	fstp	QWORD PTR [ecx]

; 138  : 			init = 1;

	mov	DWORD PTR _init$[ebp], 1
$LN46@RETURN_DAT:

; 139  : 		}
; 140  : 		if (dt_left == DT_FLOAT && dt_right == DT_INT)

	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN47@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN47@RETURN_DAT

; 141  : 		{
; 142  : 			*result = pow(*(leftVal->doubleVal), *(rightVal->intVal));

	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _leftVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _result$[ebp]
	fstp	QWORD PTR [eax]

; 143  : 			init = 1;

	mov	DWORD PTR _init$[ebp], 1
$LN47@RETURN_DAT:

; 144  : 		}
; 145  : 		if (dt_left == DT_INT && dt_right == DT_INT)

	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	$LN48@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	$LN48@RETURN_DAT

; 146  : 		{
; 147  : 			long long* result = malloc(sizeof(long long));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$58[ebp], eax

; 148  : 			*result = pow(*(leftVal->intVal), *(rightVal->intVal));

	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _leftVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	call	__ftol2
	mov	ecx, DWORD PTR _result$58[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 149  : 			free(leftVal), free(rightVal);

	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  : 			return new_DATA_STRUCT(NULL, NULL, NULL, result, NULL, DT_INT, 1);

	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _result$58[ebp]
	cdq
	push	edx
	push	eax
	push	0
	push	0
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN48@RETURN_DAT:

; 151  : 		}
; 152  : 		break;

	jmp	$LN2@RETURN_DAT
$LN49@RETURN_DAT:

; 153  : 
; 154  : 	case TT_EQUALS_CMP:      DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, == );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$57[ebp], eax
	mov	eax, DWORD PTR _boolRes$57[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN50@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN50@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR [eax]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN132@RETURN_DAT
	mov	DWORD PTR tv503[ebp], 1
	jmp	SHORT $LN133@RETURN_DAT
$LN132@RETURN_DAT:
	mov	DWORD PTR tv503[ebp], 0
$LN133@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$57[ebp]
	mov	edx, DWORD PTR tv503[ebp]
	mov	DWORD PTR [ecx], edx
$LN50@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN51@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN51@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	ucomisd	xmm0, QWORD PTR [edx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN134@RETURN_DAT
	mov	DWORD PTR tv512[ebp], 1
	jmp	SHORT $LN135@RETURN_DAT
$LN134@RETURN_DAT:
	mov	DWORD PTR tv512[ebp], 0
$LN135@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$57[ebp]
	mov	ecx, DWORD PTR tv512[ebp]
	mov	DWORD PTR [eax], ecx
$LN51@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN52@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN52@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN136@RETURN_DAT
	mov	DWORD PTR tv521[ebp], 1
	jmp	SHORT $LN137@RETURN_DAT
$LN136@RETURN_DAT:
	mov	DWORD PTR tv521[ebp], 0
$LN137@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$57[ebp]
	mov	ecx, DWORD PTR tv521[ebp]
	mov	DWORD PTR [eax], ecx
$LN52@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN53@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN53@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv1878[ebp], ecx
	mov	DWORD PTR tv1879[ebp], eax
	mov	ecx, DWORD PTR tv1878[ebp]
	mov	edx, DWORD PTR tv1879[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN138@RETURN_DAT
	mov	ecx, DWORD PTR tv1878[ebp]
	mov	edx, DWORD PTR tv1879[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN138@RETURN_DAT
	mov	DWORD PTR tv529[ebp], 1
	jmp	SHORT $LN139@RETURN_DAT
$LN138@RETURN_DAT:
	mov	DWORD PTR tv529[ebp], 0
$LN139@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$57[ebp]
	mov	edx, DWORD PTR tv529[ebp]
	mov	DWORD PTR [ecx], edx
$LN53@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN54@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN54@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$56[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$56[ebp]
	ucomisd	xmm0, QWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN140@RETURN_DAT
	mov	DWORD PTR tv538[ebp], 1
	jmp	SHORT $LN141@RETURN_DAT
$LN140@RETURN_DAT:
	mov	DWORD PTR tv538[ebp], 0
$LN141@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$57[ebp]
	mov	eax, DWORD PTR tv538[ebp]
	mov	DWORD PTR [edx], eax
$LN54@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN55@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN55@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$55[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$55[ebp]
	ucomisd	xmm0, QWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN142@RETURN_DAT
	mov	DWORD PTR tv547[ebp], 1
	jmp	SHORT $LN143@RETURN_DAT
$LN142@RETURN_DAT:
	mov	DWORD PTR tv547[ebp], 0
$LN143@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$57[ebp]
	mov	eax, DWORD PTR tv547[ebp]
	mov	DWORD PTR [edx], eax
$LN55@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN56@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN56@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$54[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$54[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN144@RETURN_DAT
	mov	DWORD PTR tv557[ebp], 1
	jmp	SHORT $LN145@RETURN_DAT
$LN144@RETURN_DAT:
	mov	DWORD PTR tv557[ebp], 0
$LN145@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$57[ebp]
	mov	edx, DWORD PTR tv557[ebp]
	mov	DWORD PTR [ecx], edx
$LN56@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN57@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN57@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$53[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$53[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN146@RETURN_DAT
	mov	DWORD PTR tv567[ebp], 1
	jmp	SHORT $LN147@RETURN_DAT
$LN146@RETURN_DAT:
	mov	DWORD PTR tv567[ebp], 0
$LN147@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$57[ebp]
	mov	edx, DWORD PTR tv567[ebp]
	mov	DWORD PTR [ecx], edx
$LN57@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN58@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN58@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$52[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$51[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$52[ebp]
	ucomisd	xmm0, QWORD PTR _bool_val_2$51[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN148@RETURN_DAT
	mov	DWORD PTR tv577[ebp], 1
	jmp	SHORT $LN149@RETURN_DAT
$LN148@RETURN_DAT:
	mov	DWORD PTR tv577[ebp], 0
$LN149@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$57[ebp]
	mov	ecx, DWORD PTR tv577[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN58@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$57[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN59@RETURN_DAT:

; 155  : 	case TT_NOT_EQUALS:      DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, != );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$50[ebp], eax
	mov	eax, DWORD PTR _boolRes$50[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN60@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN60@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR [eax]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN150@RETURN_DAT
	mov	DWORD PTR tv600[ebp], 1
	jmp	SHORT $LN151@RETURN_DAT
$LN150@RETURN_DAT:
	mov	DWORD PTR tv600[ebp], 0
$LN151@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$50[ebp]
	mov	edx, DWORD PTR tv600[ebp]
	mov	DWORD PTR [ecx], edx
$LN60@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN61@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN61@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	ucomisd	xmm0, QWORD PTR [edx]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN152@RETURN_DAT
	mov	DWORD PTR tv609[ebp], 1
	jmp	SHORT $LN153@RETURN_DAT
$LN152@RETURN_DAT:
	mov	DWORD PTR tv609[ebp], 0
$LN153@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$50[ebp]
	mov	ecx, DWORD PTR tv609[ebp]
	mov	DWORD PTR [eax], ecx
$LN61@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN62@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN62@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN154@RETURN_DAT
	mov	DWORD PTR tv618[ebp], 1
	jmp	SHORT $LN155@RETURN_DAT
$LN154@RETURN_DAT:
	mov	DWORD PTR tv618[ebp], 0
$LN155@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$50[ebp]
	mov	ecx, DWORD PTR tv618[ebp]
	mov	DWORD PTR [eax], ecx
$LN62@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN63@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN63@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv1989[ebp], ecx
	mov	DWORD PTR tv1990[ebp], eax
	mov	ecx, DWORD PTR tv1989[ebp]
	mov	edx, DWORD PTR tv1990[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN278@RETURN_DAT
	mov	ecx, DWORD PTR tv1989[ebp]
	mov	edx, DWORD PTR tv1990[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN156@RETURN_DAT
$LN278@RETURN_DAT:
	mov	DWORD PTR tv626[ebp], 1
	jmp	SHORT $LN157@RETURN_DAT
$LN156@RETURN_DAT:
	mov	DWORD PTR tv626[ebp], 0
$LN157@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$50[ebp]
	mov	edx, DWORD PTR tv626[ebp]
	mov	DWORD PTR [ecx], edx
$LN63@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN64@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN64@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$49[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$49[ebp]
	ucomisd	xmm0, QWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN158@RETURN_DAT
	mov	DWORD PTR tv635[ebp], 1
	jmp	SHORT $LN159@RETURN_DAT
$LN158@RETURN_DAT:
	mov	DWORD PTR tv635[ebp], 0
$LN159@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$50[ebp]
	mov	eax, DWORD PTR tv635[ebp]
	mov	DWORD PTR [edx], eax
$LN64@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN65@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN65@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$48[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$48[ebp]
	ucomisd	xmm0, QWORD PTR [ecx]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN160@RETURN_DAT
	mov	DWORD PTR tv644[ebp], 1
	jmp	SHORT $LN161@RETURN_DAT
$LN160@RETURN_DAT:
	mov	DWORD PTR tv644[ebp], 0
$LN161@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$50[ebp]
	mov	eax, DWORD PTR tv644[ebp]
	mov	DWORD PTR [edx], eax
$LN65@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN66@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN66@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$47[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$47[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN162@RETURN_DAT
	mov	DWORD PTR tv654[ebp], 1
	jmp	SHORT $LN163@RETURN_DAT
$LN162@RETURN_DAT:
	mov	DWORD PTR tv654[ebp], 0
$LN163@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$50[ebp]
	mov	edx, DWORD PTR tv654[ebp]
	mov	DWORD PTR [ecx], edx
$LN66@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN67@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN67@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$46[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$46[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN164@RETURN_DAT
	mov	DWORD PTR tv664[ebp], 1
	jmp	SHORT $LN165@RETURN_DAT
$LN164@RETURN_DAT:
	mov	DWORD PTR tv664[ebp], 0
$LN165@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$50[ebp]
	mov	edx, DWORD PTR tv664[ebp]
	mov	DWORD PTR [ecx], edx
$LN67@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN68@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN68@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$45[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$44[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$45[ebp]
	ucomisd	xmm0, QWORD PTR _bool_val_2$44[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN166@RETURN_DAT
	mov	DWORD PTR tv674[ebp], 1
	jmp	SHORT $LN167@RETURN_DAT
$LN166@RETURN_DAT:
	mov	DWORD PTR tv674[ebp], 0
$LN167@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$50[ebp]
	mov	ecx, DWORD PTR tv674[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN68@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$50[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN69@RETURN_DAT:

; 156  : 	case TT_GREATER_EQUALS:  DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, >= );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$43[ebp], eax
	mov	eax, DWORD PTR _boolRes$43[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN70@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN70@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR [eax]
	jb	SHORT $LN168@RETURN_DAT
	mov	DWORD PTR tv697[ebp], 1
	jmp	SHORT $LN169@RETURN_DAT
$LN168@RETURN_DAT:
	mov	DWORD PTR tv697[ebp], 0
$LN169@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$43[ebp]
	mov	edx, DWORD PTR tv697[ebp]
	mov	DWORD PTR [ecx], edx
$LN70@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN71@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN71@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	comisd	xmm0, QWORD PTR [edx]
	jb	SHORT $LN170@RETURN_DAT
	mov	DWORD PTR tv706[ebp], 1
	jmp	SHORT $LN171@RETURN_DAT
$LN170@RETURN_DAT:
	mov	DWORD PTR tv706[ebp], 0
$LN171@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$43[ebp]
	mov	ecx, DWORD PTR tv706[ebp]
	mov	DWORD PTR [eax], ecx
$LN71@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN72@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN72@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	comisd	xmm1, xmm0
	jb	SHORT $LN172@RETURN_DAT
	mov	DWORD PTR tv715[ebp], 1
	jmp	SHORT $LN173@RETURN_DAT
$LN172@RETURN_DAT:
	mov	DWORD PTR tv715[ebp], 0
$LN173@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$43[ebp]
	mov	ecx, DWORD PTR tv715[ebp]
	mov	DWORD PTR [eax], ecx
$LN72@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN73@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN73@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2094[ebp], ecx
	mov	DWORD PTR tv2095[ebp], eax
	mov	ecx, DWORD PTR tv2094[ebp]
	mov	edx, DWORD PTR tv2095[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN174@RETURN_DAT
	jg	SHORT $LN279@RETURN_DAT
	mov	ecx, DWORD PTR tv2094[ebp]
	mov	edx, DWORD PTR tv2095[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jb	SHORT $LN174@RETURN_DAT
$LN279@RETURN_DAT:
	mov	DWORD PTR tv723[ebp], 1
	jmp	SHORT $LN175@RETURN_DAT
$LN174@RETURN_DAT:
	mov	DWORD PTR tv723[ebp], 0
$LN175@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$43[ebp]
	mov	edx, DWORD PTR tv723[ebp]
	mov	DWORD PTR [ecx], edx
$LN73@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN74@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN74@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$42[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$42[ebp]
	comisd	xmm0, QWORD PTR [ecx]
	jb	SHORT $LN176@RETURN_DAT
	mov	DWORD PTR tv732[ebp], 1
	jmp	SHORT $LN177@RETURN_DAT
$LN176@RETURN_DAT:
	mov	DWORD PTR tv732[ebp], 0
$LN177@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$43[ebp]
	mov	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR [edx], eax
$LN74@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN75@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN75@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$41[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$41[ebp]
	comisd	xmm0, QWORD PTR [ecx]
	jb	SHORT $LN178@RETURN_DAT
	mov	DWORD PTR tv741[ebp], 1
	jmp	SHORT $LN179@RETURN_DAT
$LN178@RETURN_DAT:
	mov	DWORD PTR tv741[ebp], 0
$LN179@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$43[ebp]
	mov	eax, DWORD PTR tv741[ebp]
	mov	DWORD PTR [edx], eax
$LN75@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN76@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN76@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$40[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$40[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN180@RETURN_DAT
	mov	DWORD PTR tv751[ebp], 1
	jmp	SHORT $LN181@RETURN_DAT
$LN180@RETURN_DAT:
	mov	DWORD PTR tv751[ebp], 0
$LN181@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$43[ebp]
	mov	edx, DWORD PTR tv751[ebp]
	mov	DWORD PTR [ecx], edx
$LN76@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN77@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN77@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$39[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$39[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN182@RETURN_DAT
	mov	DWORD PTR tv761[ebp], 1
	jmp	SHORT $LN183@RETURN_DAT
$LN182@RETURN_DAT:
	mov	DWORD PTR tv761[ebp], 0
$LN183@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$43[ebp]
	mov	edx, DWORD PTR tv761[ebp]
	mov	DWORD PTR [ecx], edx
$LN77@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN78@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN78@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$38[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$37[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$38[ebp]
	comisd	xmm0, QWORD PTR _bool_val_2$37[ebp]
	jb	SHORT $LN184@RETURN_DAT
	mov	DWORD PTR tv771[ebp], 1
	jmp	SHORT $LN185@RETURN_DAT
$LN184@RETURN_DAT:
	mov	DWORD PTR tv771[ebp], 0
$LN185@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$43[ebp]
	mov	ecx, DWORD PTR tv771[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN78@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$43[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN79@RETURN_DAT:

; 157  : 	case TT_SMALLER_EQUALS:  DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, <= );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$36[ebp], eax
	mov	eax, DWORD PTR _boolRes$36[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN80@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN80@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR [ecx]
	jb	SHORT $LN186@RETURN_DAT
	mov	DWORD PTR tv794[ebp], 1
	jmp	SHORT $LN187@RETURN_DAT
$LN186@RETURN_DAT:
	mov	DWORD PTR tv794[ebp], 0
$LN187@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$36[ebp]
	mov	edx, DWORD PTR tv794[ebp]
	mov	DWORD PTR [ecx], edx
$LN80@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN81@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN81@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsd	xmm1, QWORD PTR [edx]
	comisd	xmm1, xmm0
	jb	SHORT $LN188@RETURN_DAT
	mov	DWORD PTR tv803[ebp], 1
	jmp	SHORT $LN189@RETURN_DAT
$LN188@RETURN_DAT:
	mov	DWORD PTR tv803[ebp], 0
$LN189@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$36[ebp]
	mov	ecx, DWORD PTR tv803[ebp]
	mov	DWORD PTR [eax], ecx
$LN81@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN82@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN82@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	comisd	xmm0, QWORD PTR [esi]
	jb	SHORT $LN190@RETURN_DAT
	mov	DWORD PTR tv812[ebp], 1
	jmp	SHORT $LN191@RETURN_DAT
$LN190@RETURN_DAT:
	mov	DWORD PTR tv812[ebp], 0
$LN191@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$36[ebp]
	mov	ecx, DWORD PTR tv812[ebp]
	mov	DWORD PTR [eax], ecx
$LN82@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN83@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN83@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2190[ebp], ecx
	mov	DWORD PTR tv2191[ebp], eax
	mov	ecx, DWORD PTR tv2190[ebp]
	mov	edx, DWORD PTR tv2191[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN192@RETURN_DAT
	jl	SHORT $LN280@RETURN_DAT
	mov	ecx, DWORD PTR tv2190[ebp]
	mov	edx, DWORD PTR tv2191[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	ja	SHORT $LN192@RETURN_DAT
$LN280@RETURN_DAT:
	mov	DWORD PTR tv820[ebp], 1
	jmp	SHORT $LN193@RETURN_DAT
$LN192@RETURN_DAT:
	mov	DWORD PTR tv820[ebp], 0
$LN193@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$36[ebp]
	mov	edx, DWORD PTR tv820[ebp]
	mov	DWORD PTR [ecx], edx
$LN83@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN84@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN84@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$35[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR _bool_val$35[ebp]
	jb	SHORT $LN194@RETURN_DAT
	mov	DWORD PTR tv829[ebp], 1
	jmp	SHORT $LN195@RETURN_DAT
$LN194@RETURN_DAT:
	mov	DWORD PTR tv829[ebp], 0
$LN195@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$36[ebp]
	mov	eax, DWORD PTR tv829[ebp]
	mov	DWORD PTR [edx], eax
$LN84@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN85@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN85@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$34[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR _bool_val$34[ebp]
	jb	SHORT $LN196@RETURN_DAT
	mov	DWORD PTR tv838[ebp], 1
	jmp	SHORT $LN197@RETURN_DAT
$LN196@RETURN_DAT:
	mov	DWORD PTR tv838[ebp], 0
$LN197@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$36[ebp]
	mov	eax, DWORD PTR tv838[ebp]
	mov	DWORD PTR [edx], eax
$LN85@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN86@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN86@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$33[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	comisd	xmm0, QWORD PTR _bool_val$33[ebp]
	jb	SHORT $LN198@RETURN_DAT
	mov	DWORD PTR tv848[ebp], 1
	jmp	SHORT $LN199@RETURN_DAT
$LN198@RETURN_DAT:
	mov	DWORD PTR tv848[ebp], 0
$LN199@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$36[ebp]
	mov	edx, DWORD PTR tv848[ebp]
	mov	DWORD PTR [ecx], edx
$LN86@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN87@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN87@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$32[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	comisd	xmm0, QWORD PTR _bool_val$32[ebp]
	jb	SHORT $LN200@RETURN_DAT
	mov	DWORD PTR tv858[ebp], 1
	jmp	SHORT $LN201@RETURN_DAT
$LN200@RETURN_DAT:
	mov	DWORD PTR tv858[ebp], 0
$LN201@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$36[ebp]
	mov	edx, DWORD PTR tv858[ebp]
	mov	DWORD PTR [ecx], edx
$LN87@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN88@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN88@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$31[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$30[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_2$30[ebp]
	comisd	xmm0, QWORD PTR _bool_val_1$31[ebp]
	jb	SHORT $LN202@RETURN_DAT
	mov	DWORD PTR tv868[ebp], 1
	jmp	SHORT $LN203@RETURN_DAT
$LN202@RETURN_DAT:
	mov	DWORD PTR tv868[ebp], 0
$LN203@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$36[ebp]
	mov	ecx, DWORD PTR tv868[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN88@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$36[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN89@RETURN_DAT:

; 158  : 	case TT_GREATER:         DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, > );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$29[ebp], eax
	mov	eax, DWORD PTR _boolRes$29[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN90@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN90@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR [eax]
	jbe	SHORT $LN204@RETURN_DAT
	mov	DWORD PTR tv891[ebp], 1
	jmp	SHORT $LN205@RETURN_DAT
$LN204@RETURN_DAT:
	mov	DWORD PTR tv891[ebp], 0
$LN205@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$29[ebp]
	mov	edx, DWORD PTR tv891[ebp]
	mov	DWORD PTR [ecx], edx
$LN90@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN91@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN91@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	comisd	xmm0, QWORD PTR [edx]
	jbe	SHORT $LN206@RETURN_DAT
	mov	DWORD PTR tv900[ebp], 1
	jmp	SHORT $LN207@RETURN_DAT
$LN206@RETURN_DAT:
	mov	DWORD PTR tv900[ebp], 0
$LN207@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$29[ebp]
	mov	ecx, DWORD PTR tv900[ebp]
	mov	DWORD PTR [eax], ecx
$LN91@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN92@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN92@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	movsd	xmm1, QWORD PTR [esi]
	comisd	xmm1, xmm0
	jbe	SHORT $LN208@RETURN_DAT
	mov	DWORD PTR tv909[ebp], 1
	jmp	SHORT $LN209@RETURN_DAT
$LN208@RETURN_DAT:
	mov	DWORD PTR tv909[ebp], 0
$LN209@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$29[ebp]
	mov	ecx, DWORD PTR tv909[ebp]
	mov	DWORD PTR [eax], ecx
$LN92@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN93@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN93@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2284[ebp], ecx
	mov	DWORD PTR tv2285[ebp], eax
	mov	ecx, DWORD PTR tv2284[ebp]
	mov	edx, DWORD PTR tv2285[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN210@RETURN_DAT
	jg	SHORT $LN281@RETURN_DAT
	mov	ecx, DWORD PTR tv2284[ebp]
	mov	edx, DWORD PTR tv2285[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jbe	SHORT $LN210@RETURN_DAT
$LN281@RETURN_DAT:
	mov	DWORD PTR tv917[ebp], 1
	jmp	SHORT $LN211@RETURN_DAT
$LN210@RETURN_DAT:
	mov	DWORD PTR tv917[ebp], 0
$LN211@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$29[ebp]
	mov	edx, DWORD PTR tv917[ebp]
	mov	DWORD PTR [ecx], edx
$LN93@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN94@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN94@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$28[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$28[ebp]
	comisd	xmm0, QWORD PTR [ecx]
	jbe	SHORT $LN212@RETURN_DAT
	mov	DWORD PTR tv926[ebp], 1
	jmp	SHORT $LN213@RETURN_DAT
$LN212@RETURN_DAT:
	mov	DWORD PTR tv926[ebp], 0
$LN213@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$29[ebp]
	mov	eax, DWORD PTR tv926[ebp]
	mov	DWORD PTR [edx], eax
$LN94@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN95@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN95@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$27[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR _bool_val$27[ebp]
	comisd	xmm0, QWORD PTR [ecx]
	jbe	SHORT $LN214@RETURN_DAT
	mov	DWORD PTR tv935[ebp], 1
	jmp	SHORT $LN215@RETURN_DAT
$LN214@RETURN_DAT:
	mov	DWORD PTR tv935[ebp], 0
$LN215@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$29[ebp]
	mov	eax, DWORD PTR tv935[ebp]
	mov	DWORD PTR [edx], eax
$LN95@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN96@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN96@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$26[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$26[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN216@RETURN_DAT
	mov	DWORD PTR tv945[ebp], 1
	jmp	SHORT $LN217@RETURN_DAT
$LN216@RETURN_DAT:
	mov	DWORD PTR tv945[ebp], 0
$LN217@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$29[ebp]
	mov	edx, DWORD PTR tv945[ebp]
	mov	DWORD PTR [ecx], edx
$LN96@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN97@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN97@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$25[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	movsd	xmm1, QWORD PTR _bool_val$25[ebp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN218@RETURN_DAT
	mov	DWORD PTR tv955[ebp], 1
	jmp	SHORT $LN219@RETURN_DAT
$LN218@RETURN_DAT:
	mov	DWORD PTR tv955[ebp], 0
$LN219@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$29[ebp]
	mov	edx, DWORD PTR tv955[ebp]
	mov	DWORD PTR [ecx], edx
$LN97@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN98@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN98@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$24[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$23[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$24[ebp]
	comisd	xmm0, QWORD PTR _bool_val_2$23[ebp]
	jbe	SHORT $LN220@RETURN_DAT
	mov	DWORD PTR tv997[ebp], 1
	jmp	SHORT $LN221@RETURN_DAT
$LN220@RETURN_DAT:
	mov	DWORD PTR tv997[ebp], 0
$LN221@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$29[ebp]
	mov	ecx, DWORD PTR tv997[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN98@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$29[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN99@RETURN_DAT:

; 159  : 	case TT_SMALLER:         DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, < );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$22[ebp], eax
	mov	eax, DWORD PTR _boolRes$22[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN100@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN100@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR [ecx]
	jbe	SHORT $LN222@RETURN_DAT
	mov	DWORD PTR tv1020[ebp], 1
	jmp	SHORT $LN223@RETURN_DAT
$LN222@RETURN_DAT:
	mov	DWORD PTR tv1020[ebp], 0
$LN223@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$22[ebp]
	mov	edx, DWORD PTR tv1020[ebp]
	mov	DWORD PTR [ecx], edx
$LN100@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN101@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN101@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsd	xmm1, QWORD PTR [edx]
	comisd	xmm1, xmm0
	jbe	SHORT $LN224@RETURN_DAT
	mov	DWORD PTR tv1029[ebp], 1
	jmp	SHORT $LN225@RETURN_DAT
$LN224@RETURN_DAT:
	mov	DWORD PTR tv1029[ebp], 0
$LN225@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$22[ebp]
	mov	ecx, DWORD PTR tv1029[ebp]
	mov	DWORD PTR [eax], ecx
$LN101@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN102@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN102@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _rightVal$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	comisd	xmm0, QWORD PTR [esi]
	jbe	SHORT $LN226@RETURN_DAT
	mov	DWORD PTR tv1038[ebp], 1
	jmp	SHORT $LN227@RETURN_DAT
$LN226@RETURN_DAT:
	mov	DWORD PTR tv1038[ebp], 0
$LN227@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$22[ebp]
	mov	ecx, DWORD PTR tv1038[ebp]
	mov	DWORD PTR [eax], ecx
$LN102@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN103@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN103@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2380[ebp], ecx
	mov	DWORD PTR tv2381[ebp], eax
	mov	ecx, DWORD PTR tv2380[ebp]
	mov	edx, DWORD PTR tv2381[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN228@RETURN_DAT
	jl	SHORT $LN282@RETURN_DAT
	mov	ecx, DWORD PTR tv2380[ebp]
	mov	edx, DWORD PTR tv2381[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN228@RETURN_DAT
$LN282@RETURN_DAT:
	mov	DWORD PTR tv1046[ebp], 1
	jmp	SHORT $LN229@RETURN_DAT
$LN228@RETURN_DAT:
	mov	DWORD PTR tv1046[ebp], 0
$LN229@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$22[ebp]
	mov	edx, DWORD PTR tv1046[ebp]
	mov	DWORD PTR [ecx], edx
$LN103@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN104@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN104@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$21[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR _bool_val$21[ebp]
	jbe	SHORT $LN230@RETURN_DAT
	mov	DWORD PTR tv1055[ebp], 1
	jmp	SHORT $LN231@RETURN_DAT
$LN230@RETURN_DAT:
	mov	DWORD PTR tv1055[ebp], 0
$LN231@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$22[ebp]
	mov	eax, DWORD PTR tv1055[ebp]
	mov	DWORD PTR [edx], eax
$LN104@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN105@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN105@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$20[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR _bool_val$20[ebp]
	jbe	SHORT $LN232@RETURN_DAT
	mov	DWORD PTR tv1064[ebp], 1
	jmp	SHORT $LN233@RETURN_DAT
$LN232@RETURN_DAT:
	mov	DWORD PTR tv1064[ebp], 0
$LN233@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$22[ebp]
	mov	eax, DWORD PTR tv1064[ebp]
	mov	DWORD PTR [edx], eax
$LN105@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN106@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN106@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$19[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	comisd	xmm0, QWORD PTR _bool_val$19[ebp]
	jbe	SHORT $LN234@RETURN_DAT
	mov	DWORD PTR tv1074[ebp], 1
	jmp	SHORT $LN235@RETURN_DAT
$LN234@RETURN_DAT:
	mov	DWORD PTR tv1074[ebp], 0
$LN235@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$22[ebp]
	mov	edx, DWORD PTR tv1074[ebp]
	mov	DWORD PTR [ecx], edx
$LN106@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN107@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN107@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$18[ebp], xmm0
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, eax
	call	__ltod3
	comisd	xmm0, QWORD PTR _bool_val$18[ebp]
	jbe	SHORT $LN236@RETURN_DAT
	mov	DWORD PTR tv1084[ebp], 1
	jmp	SHORT $LN237@RETURN_DAT
$LN236@RETURN_DAT:
	mov	DWORD PTR tv1084[ebp], 0
$LN237@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$22[ebp]
	mov	edx, DWORD PTR tv1084[ebp]
	mov	DWORD PTR [ecx], edx
$LN107@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN108@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN108@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$17[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$16[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_2$16[ebp]
	comisd	xmm0, QWORD PTR _bool_val_1$17[ebp]
	jbe	SHORT $LN238@RETURN_DAT
	mov	DWORD PTR tv1094[ebp], 1
	jmp	SHORT $LN239@RETURN_DAT
$LN238@RETURN_DAT:
	mov	DWORD PTR tv1094[ebp], 0
$LN239@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$22[ebp]
	mov	ecx, DWORD PTR tv1094[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN108@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$22[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN109@RETURN_DAT:

; 160  : 	case TT_AND:             DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, &&);

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$15[ebp], eax
	mov	eax, DWORD PTR _boolRes$15[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN110@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN110@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN240@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN240@RETURN_DAT
	mov	DWORD PTR tv1118[ebp], 1
	jmp	SHORT $LN241@RETURN_DAT
$LN240@RETURN_DAT:
	mov	DWORD PTR tv1118[ebp], 0
$LN241@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$15[ebp]
	mov	edx, DWORD PTR tv1118[ebp]
	mov	DWORD PTR [ecx], edx
$LN110@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN111@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN111@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2455[ebp], ecx
	mov	edx, DWORD PTR tv2455[ebp]
	mov	eax, DWORD PTR tv2455[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN242@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN242@RETURN_DAT
	mov	DWORD PTR tv1127[ebp], 1
	jmp	SHORT $LN243@RETURN_DAT
$LN242@RETURN_DAT:
	mov	DWORD PTR tv1127[ebp], 0
$LN243@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$15[ebp]
	mov	edx, DWORD PTR tv1127[ebp]
	mov	DWORD PTR [ecx], edx
$LN111@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN112@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN112@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN244@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2472[ebp], eax
	mov	ecx, DWORD PTR tv2472[ebp]
	mov	edx, DWORD PTR tv2472[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	je	SHORT $LN244@RETURN_DAT
	mov	DWORD PTR tv1136[ebp], 1
	jmp	SHORT $LN245@RETURN_DAT
$LN244@RETURN_DAT:
	mov	DWORD PTR tv1136[ebp], 0
$LN245@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$15[ebp]
	mov	edx, DWORD PTR tv1136[ebp]
	mov	DWORD PTR [ecx], edx
$LN112@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN113@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN113@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2481[ebp], ecx
	mov	edx, DWORD PTR tv2481[ebp]
	mov	eax, DWORD PTR tv2481[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN246@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2488[ebp], eax
	mov	ecx, DWORD PTR tv2488[ebp]
	mov	edx, DWORD PTR tv2488[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	je	SHORT $LN246@RETURN_DAT
	mov	DWORD PTR tv1145[ebp], 1
	jmp	SHORT $LN247@RETURN_DAT
$LN246@RETURN_DAT:
	mov	DWORD PTR tv1145[ebp], 0
$LN247@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$15[ebp]
	mov	edx, DWORD PTR tv1145[ebp]
	mov	DWORD PTR [ecx], edx
$LN113@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN114@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN114@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$14[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$14[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN248@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN248@RETURN_DAT
	mov	DWORD PTR tv1155[ebp], 1
	jmp	SHORT $LN249@RETURN_DAT
$LN248@RETURN_DAT:
	mov	DWORD PTR tv1155[ebp], 0
$LN249@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$15[ebp]
	mov	eax, DWORD PTR tv1155[ebp]
	mov	DWORD PTR [edx], eax
$LN114@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN115@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN115@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$13[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$13[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN250@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN250@RETURN_DAT
	mov	DWORD PTR tv1165[ebp], 1
	jmp	SHORT $LN251@RETURN_DAT
$LN250@RETURN_DAT:
	mov	DWORD PTR tv1165[ebp], 0
$LN251@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$15[ebp]
	mov	eax, DWORD PTR tv1165[ebp]
	mov	DWORD PTR [edx], eax
$LN115@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN116@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN116@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$12[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$12[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN252@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2521[ebp], ecx
	mov	edx, DWORD PTR tv2521[ebp]
	mov	eax, DWORD PTR tv2521[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN252@RETURN_DAT
	mov	DWORD PTR tv1175[ebp], 1
	jmp	SHORT $LN253@RETURN_DAT
$LN252@RETURN_DAT:
	mov	DWORD PTR tv1175[ebp], 0
$LN253@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$15[ebp]
	mov	eax, DWORD PTR tv1175[ebp]
	mov	DWORD PTR [edx], eax
$LN116@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN117@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN117@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$11[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$11[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN254@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2534[ebp], ecx
	mov	edx, DWORD PTR tv2534[ebp]
	mov	eax, DWORD PTR tv2534[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN254@RETURN_DAT
	mov	DWORD PTR tv1185[ebp], 1
	jmp	SHORT $LN255@RETURN_DAT
$LN254@RETURN_DAT:
	mov	DWORD PTR tv1185[ebp], 0
$LN255@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$15[ebp]
	mov	eax, DWORD PTR tv1185[ebp]
	mov	DWORD PTR [edx], eax
$LN117@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	$LN118@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN118@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$10[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$9[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$10[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN256@RETURN_DAT
	movsd	xmm0, QWORD PTR _bool_val_2$9[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN256@RETURN_DAT
	mov	DWORD PTR tv1196[ebp], 1
	jmp	SHORT $LN257@RETURN_DAT
$LN256@RETURN_DAT:
	mov	DWORD PTR tv1196[ebp], 0
$LN257@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$15[ebp]
	mov	ecx, DWORD PTR tv1196[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN118@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$15[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN119@RETURN_DAT:

; 161  : 	case TT_OR:              DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, || );

	mov	esi, esp
	push	4
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolRes$8[ebp], eax
	mov	eax, DWORD PTR _boolRes$8[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN120@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN120@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN258@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN258@RETURN_DAT
	mov	DWORD PTR tv1220[ebp], 0
	jmp	SHORT $LN259@RETURN_DAT
$LN258@RETURN_DAT:
	mov	DWORD PTR tv1220[ebp], 1
$LN259@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$8[ebp]
	mov	edx, DWORD PTR tv1220[ebp]
	mov	DWORD PTR [ecx], edx
$LN120@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN121@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN121@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2578[ebp], ecx
	mov	edx, DWORD PTR tv2578[ebp]
	mov	eax, DWORD PTR tv2578[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN260@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsd	xmm0, QWORD PTR [eax]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN260@RETURN_DAT
	mov	DWORD PTR tv1229[ebp], 0
	jmp	SHORT $LN261@RETURN_DAT
$LN260@RETURN_DAT:
	mov	DWORD PTR tv1229[ebp], 1
$LN261@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$8[ebp]
	mov	edx, DWORD PTR tv1229[ebp]
	mov	DWORD PTR [ecx], edx
$LN121@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN122@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN122@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN262@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2595[ebp], eax
	mov	ecx, DWORD PTR tv2595[ebp]
	mov	edx, DWORD PTR tv2595[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN262@RETURN_DAT
	mov	DWORD PTR tv1238[ebp], 0
	jmp	SHORT $LN263@RETURN_DAT
$LN262@RETURN_DAT:
	mov	DWORD PTR tv1238[ebp], 1
$LN263@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$8[ebp]
	mov	edx, DWORD PTR tv1238[ebp]
	mov	DWORD PTR [ecx], edx
$LN122@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN123@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN123@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2604[ebp], ecx
	mov	edx, DWORD PTR tv2604[ebp]
	mov	eax, DWORD PTR tv2604[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN264@RETURN_DAT
	mov	edx, DWORD PTR _rightVal$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv2611[ebp], eax
	mov	ecx, DWORD PTR tv2611[ebp]
	mov	edx, DWORD PTR tv2611[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	SHORT $LN264@RETURN_DAT
	mov	DWORD PTR tv1247[ebp], 0
	jmp	SHORT $LN265@RETURN_DAT
$LN264@RETURN_DAT:
	mov	DWORD PTR tv1247[ebp], 1
$LN265@RETURN_DAT:
	mov	ecx, DWORD PTR _boolRes$8[ebp]
	mov	edx, DWORD PTR tv1247[ebp]
	mov	DWORD PTR [ecx], edx
$LN123@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN124@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 2
	jne	SHORT $LN124@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$7[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$7[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN266@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN266@RETURN_DAT
	mov	DWORD PTR tv1257[ebp], 0
	jmp	SHORT $LN267@RETURN_DAT
$LN266@RETURN_DAT:
	mov	DWORD PTR tv1257[ebp], 1
$LN267@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$8[ebp]
	mov	eax, DWORD PTR tv1257[ebp]
	mov	DWORD PTR [edx], eax
$LN124@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 2
	jne	SHORT $LN125@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN125@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$6[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$6[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN268@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN268@RETURN_DAT
	mov	DWORD PTR tv1267[ebp], 0
	jmp	SHORT $LN269@RETURN_DAT
$LN268@RETURN_DAT:
	mov	DWORD PTR tv1267[ebp], 1
$LN269@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$8[ebp]
	mov	eax, DWORD PTR tv1267[ebp]
	mov	DWORD PTR [edx], eax
$LN125@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	SHORT $LN126@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 0
	jne	SHORT $LN126@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$5[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$5[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN270@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2644[ebp], ecx
	mov	edx, DWORD PTR tv2644[ebp]
	mov	eax, DWORD PTR tv2644[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN270@RETURN_DAT
	mov	DWORD PTR tv1277[ebp], 0
	jmp	SHORT $LN271@RETURN_DAT
$LN270@RETURN_DAT:
	mov	DWORD PTR tv1277[ebp], 1
$LN271@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$8[ebp]
	mov	eax, DWORD PTR tv1277[ebp]
	mov	DWORD PTR [edx], eax
$LN126@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 0
	jne	SHORT $LN127@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN127@RETURN_DAT
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val$4[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val$4[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN272@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv2657[ebp], ecx
	mov	edx, DWORD PTR tv2657[ebp]
	mov	eax, DWORD PTR tv2657[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN272@RETURN_DAT
	mov	DWORD PTR tv1287[ebp], 0
	jmp	SHORT $LN273@RETURN_DAT
$LN272@RETURN_DAT:
	mov	DWORD PTR tv1287[ebp], 1
$LN273@RETURN_DAT:
	mov	edx, DWORD PTR _boolRes$8[ebp]
	mov	eax, DWORD PTR tv1287[ebp]
	mov	DWORD PTR [edx], eax
$LN127@RETURN_DAT:
	cmp	DWORD PTR _dt_left$[ebp], 5
	jne	$LN128@RETURN_DAT
	cmp	DWORD PTR _dt_right$[ebp], 5
	jne	SHORT $LN128@RETURN_DAT
	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_1$3[ebp], xmm0
	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	movsd	QWORD PTR _bool_val_2$2[ebp], xmm0
	movsd	xmm0, QWORD PTR _bool_val_1$3[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN274@RETURN_DAT
	movsd	xmm0, QWORD PTR _bool_val_2$2[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN274@RETURN_DAT
	mov	DWORD PTR tv1298[ebp], 0
	jmp	SHORT $LN275@RETURN_DAT
$LN274@RETURN_DAT:
	mov	DWORD PTR tv1298[ebp], 1
$LN275@RETURN_DAT:
	mov	eax, DWORD PTR _boolRes$8[ebp]
	mov	ecx, DWORD PTR tv1298[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR _init$[ebp], 1
$LN128@RETURN_DAT:
	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	1
	push	5
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _boolRes$8[ebp]
	push	eax
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	$LN1@RETURN_DAT
$LN2@RETURN_DAT:

; 162  : 
; 163  : 
; 164  : 
; 165  : 	}
; 166  : 	free(leftVal), free(rightVal);

	mov	esi, esp
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _rightVal$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : 	long long res_long = *result;

	mov	eax, DWORD PTR _result$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	call	__dtol3
	mov	DWORD PTR _res_long$[ebp], eax
	mov	DWORD PTR _res_long$[ebp+4], edx

; 168  : 	if (init == 0)

	cmp	DWORD PTR _init$[ebp], 0
	jne	SHORT $LN129@RETURN_DAT

; 169  : 	{
; 170  : 		printf("[ERROR] invalid datatype\n");

	push	OFFSET ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
	call	_printf
	add	esp, 4

; 171  : 		exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN129@RETURN_DAT:

; 172  : 	}
; 173  : 	if ((*result / res_long) == 1)

	mov	edx, DWORD PTR _res_long$[ebp+4]
	mov	ecx, DWORD PTR _res_long$[ebp]
	call	__ltod3
	mov	eax, DWORD PTR _result$[ebp]
	movsd	xmm1, QWORD PTR [eax]
	divsd	xmm1, xmm0
	ucomisd	xmm1, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN130@RETURN_DAT

; 174  : 	{
; 175  : 		long long* res_int = malloc(sizeof(long long));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res_int$1[ebp], eax

; 176  : 		*res_int = (long long)*result;

	mov	eax, DWORD PTR _result$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	call	__dtol3
	mov	ecx, DWORD PTR _res_int$1[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 177  : 		free(result);

	mov	esi, esp
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 178  : 		return new_DATA_STRUCT(NULL, NULL, NULL, res_int, NULL, DT_INT, 1);

	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _res_int$1[ebp]
	cdq
	push	edx
	push	eax
	push	0
	push	0
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	jmp	SHORT $LN1@RETURN_DAT
$LN130@RETURN_DAT:

; 179  : 	}
; 180  : 	return new_DATA_STRUCT(NULL, NULL, result, NULL, NULL, DT_FLOAT, 1);

	push	1
	push	2
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	0
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
$LN1@RETURN_DAT:

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1900				; 0000076cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN277@RETURN_DAT:
	DD	$LN4@RETURN_DAT
	DD	$LN14@RETURN_DAT
	DD	$LN24@RETURN_DAT
	DD	$LN34@RETURN_DAT
	DD	$LN44@RETURN_DAT
	DD	$LN49@RETURN_DAT
	DD	$LN109@RETURN_DAT
	DD	$LN119@RETURN_DAT
	DD	$LN59@RETURN_DAT
	DD	$LN89@RETURN_DAT
	DD	$LN99@RETURN_DAT
	DD	$LN69@RETURN_DAT
	DD	$LN79@RETURN_DAT
	DD	$LN2@RETURN_DAT
$LN276@RETURN_DAT:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	13					; 0000000dH
	DB	5
	DB	6
	DB	7
	DB	13					; 0000000dH
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
_RETURN_DATATYPE_NUM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _interpretMainAST
_TEXT	SEGMENT
tv393 = -376						; size = 4
tv367 = -376						; size = 4
tv84 = -376						; size = 4
_cmp_expr_dt$1 = -176					; size = 4
_cmp_expr$2 = -164					; size = 4
_init$3 = -152						; size = 4
_cmp_expr_dt$4 = -140					; size = 4
_cmp_expr$5 = -128					; size = 4
_curID$6 = -116						; size = 4
_curID$7 = -104						; size = 4
_node$8 = -92						; size = 4
_id_token$9 = -80					; size = 4
_saveVarName$10 = -68					; size = 4
_curNodeData$11 = -56					; size = 4
_struct_dt$12 = -44					; size = 4
_printVal_struct$13 = -32				; size = 4
_in_new_scope$ = -20					; size = 4
_curNode$ = -8						; size = 4
_root$ = 8						; size = 4
_interpretMainAST PROC					; COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __36662879_interpretAST@c
	call	@__CheckForDebuggerJustMyCode@4

; 277  : 	struct AST_Node* curNode = root;

	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR _curNode$[ebp], eax

; 278  : 	int in_new_scope = 0;

	mov	DWORD PTR _in_new_scope$[ebp], 0
$LN2@interpretM:

; 279  : 	while (curNode != NULL)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN3@interpretM

; 280  : 	{
; 281  : 		if (curNode->tokenType == TT_PRINT)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 7
	jne	$LN8@interpretM

; 282  : 		{
; 283  : 			struct DATA_STRUCT* printVal_struct = interpretAST_binexpr(curNode->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	DWORD PTR _printVal_struct$13[ebp], eax

; 284  : 			int struct_dt = printVal_struct->dataType;

	mov	eax, DWORD PTR _printVal_struct$13[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _struct_dt$12[ebp], ecx

; 285  : 			if (struct_dt == DT_INT)

	cmp	DWORD PTR _struct_dt$12[ebp], 0
	jne	SHORT $LN10@interpretM

; 286  : 			{
; 287  : 				printf("%lld\n", *(printVal_struct->intVal));

	mov	eax, DWORD PTR _printVal_struct$13[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	push	OFFSET ??_C@_05IBFPJDFI@?$CFlld?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 288  : 			}

	jmp	SHORT $LN4@interpretM
$LN10@interpretM:

; 289  : 			else if (struct_dt == DT_FLOAT)

	cmp	DWORD PTR _struct_dt$12[ebp], 2
	jne	SHORT $LN12@interpretM

; 290  : 			{
; 291  : 				printf("%Lf\n", *(printVal_struct->doubleVal));

	mov	eax, DWORD PTR _printVal_struct$13[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04FHILBAAL@?$CFLf?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 292  : 			}

	jmp	SHORT $LN4@interpretM
$LN12@interpretM:

; 293  : 
; 294  : 			else if (struct_dt == DT_BOOL)

	cmp	DWORD PTR _struct_dt$12[ebp], 5
	jne	SHORT $LN4@interpretM

; 295  : 			{
; 296  : 				switch (*(printVal_struct->boolVal))

	mov	eax, DWORD PTR _printVal_struct$13[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv84[ebp], edx
	cmp	DWORD PTR tv84[ebp], 0
	je	SHORT $LN15@interpretM
	cmp	DWORD PTR tv84[ebp], 1
	je	SHORT $LN16@interpretM
	jmp	SHORT $LN4@interpretM
$LN15@interpretM:

; 297  : 				{
; 298  : 				case 0: printf("false\n"); break;

	push	OFFSET ??_C@_06NIOGPBNO@false?6@
	call	_printf
	add	esp, 4
	jmp	SHORT $LN4@interpretM
$LN16@interpretM:

; 299  : 				case 1: printf("true\n");  break;

	push	OFFSET ??_C@_05LFIOBDML@true?6@
	call	_printf
	add	esp, 4
$LN4@interpretM:

; 300  : 				}
; 301  : 			}
; 302  : 		}

	jmp	$LN49@interpretM
$LN8@interpretM:

; 303  : 
; 304  : 		else if (curNode->tokenType == TT_IDENT)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 18			; 00000012H
	jne	$LN17@interpretM

; 305  : 		{
; 306  : 			struct IDENT_tokenData* curNodeData = (struct IDENT_tokenData*)curNode->otherData;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _curNodeData$11[ebp], ecx

; 307  : 			char* saveVarName = calloc(strlen(curNode->varName), sizeof(char));

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _saveVarName$10[ebp], eax

; 308  : 			saveVarName = strcpy(saveVarName, curNode->varName);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _saveVarName$10[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
	mov	DWORD PTR _saveVarName$10[ebp], eax

; 309  : 			stackFrame_add_var(saveVarName);

	mov	eax, DWORD PTR _saveVarName$10[ebp]
	push	eax
	call	_stackFrame_add_var
	add	esp, 4

; 310  : 
; 311  : 			if (curNodeData->init == 0)

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN19@interpretM

; 312  : 			{
; 313  : 				symtable_add(saveVarName, newID_token(DT_INT, 0, 0, saveVarName, 1, new_DATA_STRUCT(NULL, NULL, NULL, NULL, NULL, -1, 1)));

	push	1
	push	-1
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H
	push	eax
	push	1
	mov	eax, DWORD PTR _saveVarName$10[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	0
	call	_newID_token
	add	esp, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _saveVarName$10[ebp]
	push	ecx
	call	_symtable_add
	add	esp, 8
$LN19@interpretM:

; 314  : 			}
; 315  : 			if (curNodeData->init == 1)

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	$LN23@interpretM

; 316  : 			{
; 317  : 				if (curNodeData->var == 1)

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	cmp	DWORD PTR [eax+24], 1
	jne	SHORT $LN21@interpretM

; 318  : 				{
; 319  : 					// fix bug  (symtable)
; 320  : 					struct IDENT_tokenData* id_token = newID_token(DT_INT, 1, 0, saveVarName, 1, NULL);

	push	0
	push	1
	mov	eax, DWORD PTR _saveVarName$10[ebp]
	push	eax
	push	0
	push	0
	push	1
	push	0
	call	_newID_token
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _id_token$9[ebp], eax

; 321  : 					node_t* node = symtable_add(saveVarName, id_token);

	mov	eax, DWORD PTR _id_token$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveVarName$10[ebp]
	push	ecx
	call	_symtable_add
	add	esp, 8
	mov	DWORD PTR _node$8[ebp], eax

; 322  : 					struct IDENT_tokenData* curID = symtable_getItem(saveVarName);

	mov	eax, DWORD PTR _saveVarName$10[ebp]
	push	eax
	call	_symtable_getItem
	add	esp, 4
	mov	DWORD PTR _curID$7[ebp], eax

; 323  : 					curID->data = interpretAST_binexpr(curNode->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	edx, DWORD PTR _curID$7[ebp]
	mov	DWORD PTR [edx+28], eax

; 324  : 				}

	jmp	SHORT $LN23@interpretM
$LN21@interpretM:

; 325  : 				else if (curNodeData->var == 0)

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN23@interpretM

; 326  : 				{
; 327  : 					struct IDENT_tokenData* curID = symtable_getItem(curNodeData->varName);

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_symtable_getItem
	add	esp, 4
	mov	DWORD PTR _curID$6[ebp], eax

; 328  : 					if (curID == NULL)

	cmp	DWORD PTR _curID$6[ebp], 0
	jne	SHORT $LN24@interpretM

; 329  : 					{
; 330  : 						printf("[SYNTAX ERROR] variable '%s' has not been initialized\n", curNodeData->varName);

	mov	eax, DWORD PTR _curNodeData$11[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@
	call	_printf
	add	esp, 8

; 331  : 						exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@interpretM:

; 332  : 					}
; 333  : 					curID->data = interpretAST_binexpr(curNode->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	edx, DWORD PTR _curID$6[ebp]
	mov	DWORD PTR [edx+28], eax
$LN23@interpretM:

; 334  : 				}
; 335  : 			}
; 336  : 
; 337  : 			free(curNodeData);

	mov	esi, esp
	mov	eax, DWORD PTR _curNodeData$11[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 338  : 		}

	jmp	$LN49@interpretM
$LN17@interpretM:

; 339  : 
; 340  : 		// todo: free ident_node
; 341  : 		else if (curNode->tokenType == TT_UNDEF)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 21			; 00000015H
	jne	SHORT $LN25@interpretM

; 342  : 		{
; 343  : 			symtable_removeItem(curNode->left->varName);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_symtable_removeItem
	add	esp, 4

; 344  : 		}

	jmp	$LN49@interpretM
$LN25@interpretM:

; 345  : 
; 346  : 
; 347  : 		else if (curNode->tokenType == TT_IF)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 8
	jne	$LN27@interpretM

; 348  : 		{
; 349  : 		    struct DATA_STRUCT* cmp_expr = interpretAST_binexpr(curNode->left->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	DWORD PTR _cmp_expr$5[ebp], eax

; 350  : 			int cmp_expr_dt = cmp_expr->dataType;

	mov	eax, DWORD PTR _cmp_expr$5[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cmp_expr_dt$4[ebp], ecx

; 351  : 			int init = 0;

	mov	DWORD PTR _init$3[ebp], 0

; 352  : 			if (cmp_expr_dt == DT_INT)

	cmp	DWORD PTR _cmp_expr_dt$4[ebp], 0
	jne	SHORT $LN29@interpretM

; 353  : 			{
; 354  : 				if (*(cmp_expr->intVal) != 0)

	mov	eax, DWORD PTR _cmp_expr$5[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv367[ebp], ecx
	mov	edx, DWORD PTR tv367[ebp]
	mov	eax, DWORD PTR tv367[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN31@interpretM

; 355  : 				{
; 356  : 					init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 357  : 					interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN31@interpretM:

; 358  : 				}
; 359  : 			}

	jmp	SHORT $LN36@interpretM
$LN29@interpretM:

; 360  : 
; 361  : 			else if (cmp_expr_dt == DT_FLOAT)

	cmp	DWORD PTR _cmp_expr_dt$4[ebp], 2
	jne	SHORT $LN32@interpretM

; 362  : 			{
; 363  : 				if (*(cmp_expr->doubleVal) != 1)

	mov	eax, DWORD PTR _cmp_expr$5[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN34@interpretM

; 364  : 				{
; 365  : 					init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 366  : 					interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN34@interpretM:

; 367  : 				}
; 368  : 	        }

	jmp	SHORT $LN36@interpretM
$LN32@interpretM:

; 369  : 
; 370  : 			else if (cmp_expr_dt == DT_BOOL)

	cmp	DWORD PTR _cmp_expr_dt$4[ebp], 5
	jne	SHORT $LN36@interpretM

; 371  : 			{
; 372  : 				if (*(cmp_expr->boolVal) != 0)

	mov	eax, DWORD PTR _cmp_expr$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN36@interpretM

; 373  : 				{
; 374  : 					init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 375  : 					interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN36@interpretM:

; 376  : 				}
; 377  : 			}
; 378  : 			///////////////////////////////////////////////////////
; 379  : 			//// ELIF
; 380  : 			///////////////////////////////////////////////////////
; 381  : 			while (curNode->right->tokenType == TT_ELIF)

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx+16], 35			; 00000023H
	jne	$LN7@interpretM

; 382  : 			{
; 383  : 				curNode = curNode->right;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _curNode$[ebp], ecx

; 384  : 				struct DATA_STRUCT* cmp_expr = interpretAST_binexpr(curNode->left->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	DWORD PTR _cmp_expr$2[ebp], eax

; 385  : 				int cmp_expr_dt = cmp_expr->dataType;

	mov	eax, DWORD PTR _cmp_expr$2[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cmp_expr_dt$1[ebp], ecx

; 386  : 				if (cmp_expr_dt == DT_INT)

	cmp	DWORD PTR _cmp_expr_dt$1[ebp], 0
	jne	SHORT $LN37@interpretM

; 387  : 				{
; 388  : 					if (*(cmp_expr->intVal) != 0 && init != 1)

	mov	eax, DWORD PTR _cmp_expr$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv393[ebp], ecx
	mov	edx, DWORD PTR tv393[ebp]
	mov	eax, DWORD PTR tv393[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	je	SHORT $LN39@interpretM
	cmp	DWORD PTR _init$3[ebp], 1
	je	SHORT $LN39@interpretM

; 389  : 					{
; 390  : 						init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 391  : 						interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN39@interpretM:

; 392  : 					}
; 393  : 				}

	jmp	$LN44@interpretM
$LN37@interpretM:

; 394  : 
; 395  : 				else if (cmp_expr_dt == DT_FLOAT)

	cmp	DWORD PTR _cmp_expr_dt$1[ebp], 2
	jne	SHORT $LN40@interpretM

; 396  : 				{
; 397  : 					if (*(cmp_expr->doubleVal) != 1 && init != 1)

	mov	eax, DWORD PTR _cmp_expr$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN42@interpretM
	cmp	DWORD PTR _init$3[ebp], 1
	je	SHORT $LN42@interpretM

; 398  : 					{
; 399  : 						init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 400  : 						interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN42@interpretM:

; 401  : 					}
; 402  : 				}

	jmp	SHORT $LN44@interpretM
$LN40@interpretM:

; 403  : 
; 404  : 				else if (cmp_expr_dt == DT_BOOL)

	cmp	DWORD PTR _cmp_expr_dt$1[ebp], 5
	jne	SHORT $LN44@interpretM

; 405  : 				{
; 406  : 					if (*(cmp_expr->boolVal) != 0 && init != 1)

	mov	eax, DWORD PTR _cmp_expr$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN44@interpretM
	cmp	DWORD PTR _init$3[ebp], 1
	je	SHORT $LN44@interpretM

; 407  : 					{
; 408  : 						init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 409  : 						interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN44@interpretM:

; 410  : 					}
; 411  : 				}
; 412  : 			}

	jmp	$LN36@interpretM
$LN7@interpretM:

; 413  : 
; 414  : 			////////////////////////////////////////////////////
; 415  : 			////  ELSE
; 416  : 			////////////////////////////////////////////////////
; 417  : 			if (curNode->right->tokenType == TT_ELSE)

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx+16], 36			; 00000024H
	jne	SHORT $LN46@interpretM

; 418  : 			{
; 419  : 				curNode = curNode->right;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _curNode$[ebp], ecx

; 420  : 				
; 421  : 				if (init == 0)

	cmp	DWORD PTR _init$3[ebp], 0
	jne	SHORT $LN46@interpretM

; 422  : 				{
; 423  : 					init = 1;

	mov	DWORD PTR _init$3[ebp], 1

; 424  : 					interpretMainAST(curNode->left->right);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_interpretMainAST
	add	esp, 4
$LN46@interpretM:

; 425  : 				}
; 426  : 			}
; 427  : 		}

	jmp	SHORT $LN49@interpretM
$LN27@interpretM:

; 428  : 		////////////////////////////////////////////////////
; 429  : 		////  SCOPE
; 430  : 		////////////////////////////////////////////////////
; 431  : 
; 432  : 		else if (curNode->tokenType == TT_SCOPE)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 33			; 00000021H
	jne	SHORT $LN47@interpretM

; 433  : 		{
; 434  : 			varStack_push_frame();

	call	_varStack_push_frame

; 435  : 			interpretMainAST(curNode->left);

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_interpretMainAST
	add	esp, 4

; 436  : 		}

	jmp	SHORT $LN49@interpretM
$LN47@interpretM:

; 437  : 
; 438  : 		else if (curNode->tokenType == TT_SCOPE_END)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 34			; 00000022H
	jne	SHORT $LN49@interpretM

; 439  : 		{
; 440  : 			varStack_pop_frame();

	call	_varStack_pop_frame
$LN49@interpretM:

; 441  : 		}
; 442  : 
; 443  : 		//////////////////////////////////////////////////
; 444  : 
; 445  : 		curNode = curNode->right;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _curNode$[ebp], ecx

; 446  : 	}

	jmp	$LN2@interpretM
$LN3@interpretM:

; 447  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_interpretMainAST ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _interpretAST_binexpr
_TEXT	SEGMENT
tv79 = -280						; size = 4
_dt$1 = -80						; size = 4
_dt_right$ = -68					; size = 4
_dt_left$ = -56						; size = 4
_tNode$ = -44						; size = 4
_curIdent$ = -32					; size = 4
_rightVal$ = -20					; size = 4
_leftVal$ = -8						; size = 4
_root$ = 8						; size = 4
_interpretAST_binexpr PROC				; COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __36662879_interpretAST@c
	call	@__CheckForDebuggerJustMyCode@4

; 188  : 	struct DATA_STRUCT* leftVal = NULL, * rightVal = NULL;

	mov	DWORD PTR _leftVal$[ebp], 0
	mov	DWORD PTR _rightVal$[ebp], 0

; 189  : 	struct IDENT_tokenData* curIdent = NULL;

	mov	DWORD PTR _curIdent$[ebp], 0

; 190  : 	struct tableNode* tNode = NULL;

	mov	DWORD PTR _tNode$[ebp], 0

; 191  : 
; 192  : 	if (root->left != NULL)

	mov	eax, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@interpretA

; 193  : 	{
; 194  : 		leftVal = interpretAST_binexpr(root->left);

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	DWORD PTR _leftVal$[ebp], eax
$LN4@interpretA:

; 195  : 	}
; 196  : 	if (root->right != NULL) {

	mov	eax, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN5@interpretA

; 197  : 		rightVal = interpretAST_binexpr(root->right);

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_interpretAST_binexpr
	add	esp, 4
	mov	DWORD PTR _rightVal$[ebp], eax
$LN5@interpretA:

; 198  : 	}
; 199  : 
; 200  : 	int dt_left = -1;

	mov	DWORD PTR _dt_left$[ebp], -1

; 201  : 	int dt_right = -1;

	mov	DWORD PTR _dt_right$[ebp], -1

; 202  : 
; 203  : 	if (leftVal != NULL)

	cmp	DWORD PTR _leftVal$[ebp], 0
	je	SHORT $LN6@interpretA

; 204  : 	{
; 205  : 		dt_left = leftVal->dataType;

	mov	eax, DWORD PTR _leftVal$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _dt_left$[ebp], ecx
$LN6@interpretA:

; 206  : 	}
; 207  : 	if (rightVal != NULL)

	cmp	DWORD PTR _rightVal$[ebp], 0
	je	SHORT $LN7@interpretA

; 208  : 	{
; 209  : 		dt_right = rightVal->dataType;

	mov	eax, DWORD PTR _rightVal$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _dt_right$[ebp], ecx
$LN7@interpretA:

; 210  : 	}
; 211  : 
; 212  : 	switch (root->tokenType)

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 32			; 00000020H
	ja	$LN2@interpretA
	mov	edx, DWORD PTR tv79[ebp]
	movzx	eax, BYTE PTR $LN35@interpretA[edx]
	jmp	DWORD PTR $LN36@interpretA[eax*4]
$LN8@interpretA:

; 213  : 	{
; 214  : 	case TT_PLUS:   return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_PLUS, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN9@interpretA:

; 215  : 	case TT_MINUS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_MINUS, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN10@interpretA:

; 216  : 	case TT_MUL:    return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_MUL, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN11@interpretA:

; 217  : 	case TT_DIV: 	return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_DIV, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN12@interpretA:

; 218  : 	case TT_POW:    return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_POW, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN13@interpretA:

; 219  : 	case TT_INT:         *(root->data->intVal) *= root->data->minusVal;     return root->data;

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	eax, DWORD PTR [eax+24]
	cdq
	push	edx
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [eax+36]
	jmp	$LN2@interpretA
$LN14@interpretA:

; 220  : 	case TT_FLOAT:       *(root->data->doubleVal) *= root->data->minusVal;  return root->data;

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtsi2sd xmm0, DWORD PTR [ecx+24]
	mulsd	xmm0, QWORD PTR [edx]
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	movsd	QWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [eax+36]
	jmp	$LN2@interpretA
$LN15@interpretA:

; 221  : 	case TT_BOOL_TRUE:   return root->data;

	mov	eax, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [eax+36]
	jmp	$LN2@interpretA
$LN16@interpretA:

; 222  : 	case TT_BOOL_FALSE:  return root->data;

	mov	eax, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [eax+36]
	jmp	$LN2@interpretA
$LN17@interpretA:

; 223  : 	case TT_IDENT:
; 224  : 	{
; 225  : 		curIdent = (struct IDENT_tokenData*)symtable_getItem(root->varName);

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_symtable_getItem
	add	esp, 4
	mov	DWORD PTR _curIdent$[ebp], eax

; 226  : 		if (curIdent == NULL)

	cmp	DWORD PTR _curIdent$[ebp], 0
	jne	SHORT $LN18@interpretA

; 227  : 		{
; 228  : 			printf("[ERROR] variable '%s' does not exist or is out of scope\n", root->varName);

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	OFFSET ??_C@_0DJ@JHPPHMML@?$FLERROR?$FN?5variable?5?8?$CFs?8?5does?5not?5@
	call	_printf
	add	esp, 8

; 229  : 			exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@interpretA:

; 230  : 		}
; 231  : 		if(curIdent->data == NULL)

	mov	eax, DWORD PTR _curIdent$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN19@interpretA

; 232  : 		{
; 233  : 			printf("[ERROR] variable '%s' does not exist or is out of scope\n", root->varName);

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	OFFSET ??_C@_0DJ@JHPPHMML@?$FLERROR?$FN?5variable?5?8?$CFs?8?5does?5not?5@
	call	_printf
	add	esp, 8

; 234  : 			exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@interpretA:

; 235  : 		}
; 236  : 		int dt = curIdent->data->dataType;

	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _dt$1[ebp], edx

; 237  : 
; 238  : 		if (dt == DT_INT)

	cmp	DWORD PTR _dt$1[ebp], 0
	jne	SHORT $LN20@interpretA

; 239  : 		{
; 240  : 			*(curIdent->data->intVal) *= root->intVal;

	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	push	ecx
	mov	edx, DWORD PTR [edx]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 241  : 		}

	jmp	SHORT $LN25@interpretA
$LN20@interpretA:

; 242  : 		else if (dt == DT_FLOAT)

	cmp	DWORD PTR _dt$1[ebp], 2
	jne	SHORT $LN22@interpretA

; 243  : 		{
; 244  : 			*(curIdent->data->doubleVal) *= root->intVal;

	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	call	__ltod3
	mulsd	xmm0, QWORD PTR [esi]
	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+8]
	movsd	QWORD PTR [edx], xmm0

; 245  : 		}

	jmp	SHORT $LN25@interpretA
$LN22@interpretA:

; 246  : 		else if (dt == DT_BOOL)

	cmp	DWORD PTR _dt$1[ebp], 5
	jne	SHORT $LN24@interpretA

; 247  : 		{
; 248  : 			*(curIdent->data->boolVal) *= root->intVal;

	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	cdq
	mov	ecx, DWORD PTR _root$[ebp]
	mov	esi, DWORD PTR [ecx+4]
	push	esi
	mov	ecx, DWORD PTR [ecx]
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	edx, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax

; 249  : 		}

	jmp	SHORT $LN25@interpretA
$LN24@interpretA:

; 250  : 		else
; 251  : 		{
; 252  : 			printf("[ERROR] invalid datatype\n");

	push	OFFSET ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
	call	_printf
	add	esp, 4

; 253  : 			exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@interpretA:

; 254  : 		}
; 255  : 	}
; 256  : 	return DATA_STRUCT_cpy(curIdent->data);

	mov	eax, DWORD PTR _curIdent$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_DATA_STRUCT_cpy
	add	esp, 4
	jmp	$LN2@interpretA
$LN26@interpretA:

; 257  : 
; 258  : 
; 259  : 	case TT_EQUALS_CMP:      return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_EQUALS_CMP, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	22					; 00000016H
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN27@interpretA:

; 260  : 	case TT_NOT_EQUALS:      return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_NOT_EQUALS, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	26					; 0000001aH
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN28@interpretA:

; 261  : 	case TT_GREATER_EQUALS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_GREATER_EQUALS, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	29					; 0000001dH
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	$LN2@interpretA
$LN29@interpretA:

; 262  : 	case TT_SMALLER_EQUALS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_SMALLER_EQUALS, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	30					; 0000001eH
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@interpretA
$LN30@interpretA:

; 263  : 	case TT_GREATER:         return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_GREATER, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	27					; 0000001bH
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@interpretA
$LN31@interpretA:

; 264  : 	case TT_SMALLER:         return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_SMALLER, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	28					; 0000001cH
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@interpretA
$LN32@interpretA:

; 265  : 	case TT_AND:             return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_AND, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	23					; 00000017H
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@interpretA
$LN33@interpretA:

; 266  : 	case TT_OR:              return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_OR, dt_left, dt_right));

	mov	eax, DWORD PTR _dt_right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt_left$[ebp]
	push	ecx
	push	24					; 00000018H
	mov	edx, DWORD PTR _rightVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _leftVal$[ebp]
	push	eax
	call	_RETURN_DATATYPE_NUM
	add	esp, 20					; 00000014H
$LN2@interpretA:

; 267  : 
; 268  : 	}
; 269  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN36@interpretA:
	DD	$LN8@interpretA
	DD	$LN9@interpretA
	DD	$LN10@interpretA
	DD	$LN11@interpretA
	DD	$LN12@interpretA
	DD	$LN13@interpretA
	DD	$LN14@interpretA
	DD	$LN17@interpretA
	DD	$LN26@interpretA
	DD	$LN32@interpretA
	DD	$LN33@interpretA
	DD	$LN27@interpretA
	DD	$LN30@interpretA
	DD	$LN31@interpretA
	DD	$LN28@interpretA
	DD	$LN29@interpretA
	DD	$LN15@interpretA
	DD	$LN16@interpretA
	DD	$LN2@interpretA
$LN35@interpretA:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	6
	DB	18					; 00000012H
	DB	7
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	18					; 00000012H
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
_interpretAST_binexpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\header\tokens.h
;	COMDAT _DATA_STRUCT_cpy
_TEXT	SEGMENT
_intVal$ = -80						; size = 4
_doubleVal$ = -68					; size = 4
_charVal$ = -56						; size = 4
_strVal$ = -44						; size = 4
_minusVal$ = -32					; size = 4
_dt$ = -20						; size = 4
_boolVal$ = -8						; size = 4
_src$ = 8						; size = 4
_DATA_STRUCT_cpy PROC					; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8478A1A4_tokens@h
	call	@__CheckForDebuggerJustMyCode@4

; 54   : 	int* boolVal = NULL;

	mov	DWORD PTR _boolVal$[ebp], 0

; 55   : 	if (src->boolVal != NULL)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@DATA_STRUC

; 56   : 	{
; 57   : 		boolVal = calloc(1, sizeof(int));

	mov	esi, esp
	push	4
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _boolVal$[ebp], eax

; 58   : 		*boolVal = *(src->boolVal);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _boolVal$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
$LN2@DATA_STRUC:

; 59   : 	}
; 60   : 	int dt = src->dataType;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _dt$[ebp], ecx

; 61   : 	int minusVal = src->minusVal;

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _minusVal$[ebp], ecx

; 62   : 	char* strVal = NULL;

	mov	DWORD PTR _strVal$[ebp], 0

; 63   : 	if (src->strVal != NULL)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@DATA_STRUC

; 64   : 	{
; 65   : 		strVal = strcpy(strVal, src->strVal);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _strVal$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
	mov	DWORD PTR _strVal$[ebp], eax
$LN3@DATA_STRUC:

; 66   : 	}
; 67   : 	char* charVal = calloc(1, sizeof(char));

	mov	esi, esp
	push	1
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _charVal$[ebp], eax

; 68   : 	if (src->charVal != NULL)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@DATA_STRUC

; 69   : 	{
; 70   : 		*charVal = *(src->charVal);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _charVal$[ebp]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al
$LN4@DATA_STRUC:

; 71   : 	}
; 72   : 	long double* doubleVal = NULL;

	mov	DWORD PTR _doubleVal$[ebp], 0

; 73   : 	if (src->doubleVal != NULL)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@DATA_STRUC

; 74   : 	{
; 75   : 		doubleVal = calloc(0, sizeof(long double));

	mov	esi, esp
	push	8
	push	0
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _doubleVal$[ebp], eax

; 76   : 		*doubleVal = *(src->doubleVal);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _doubleVal$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [edx], xmm0
$LN5@DATA_STRUC:

; 77   : 	}
; 78   : 	long long* intVal = NULL;

	mov	DWORD PTR _intVal$[ebp], 0

; 79   : 	if (src->intVal != NULL)

	mov	eax, DWORD PTR _src$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@DATA_STRUC

; 80   : 	{
; 81   : 		intVal = calloc(1, sizeof(long long));

	mov	esi, esp
	push	8
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _intVal$[ebp], eax

; 82   : 		*intVal = *(src->intVal);

	mov	eax, DWORD PTR _src$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _intVal$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], ecx
$LN6@DATA_STRUC:

; 83   : 	}
; 84   : 	return new_DATA_STRUCT(strVal, boolVal, doubleVal, intVal, charVal, dt, minusVal);

	mov	eax, DWORD PTR _minusVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _charVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _intVal$[ebp]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _doubleVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _boolVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strVal$[ebp]
	push	edx
	call	_new_DATA_STRUCT
	add	esp, 32					; 00000020H

; 85   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DATA_STRUCT_cpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\header\tokens.h
;	COMDAT _new_DATA_STRUCT
_TEXT	SEGMENT
_init$ = -8						; size = 4
_strVal$ = 8						; size = 4
_boolVal$ = 12						; size = 4
_doubleVal$ = 16					; size = 4
_intVal$ = 20						; size = 8
_charVal$ = 28						; size = 4
_dataType$ = 32						; size = 4
_minusVal$ = 36						; size = 4
_new_DATA_STRUCT PROC					; COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8478A1A4_tokens@h
	call	@__CheckForDebuggerJustMyCode@4

; 29   : 	struct DATA_STRUCT* init = malloc(sizeof(struct DATA_STRUCT));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init$[ebp], eax

; 30   : 	init->strVal = strVal;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _strVal$[ebp]
	mov	DWORD PTR [eax], ecx

; 31   : 	init->boolVal = boolVal;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _boolVal$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 32   : 	init->doubleVal = doubleVal;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _doubleVal$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 33   : 	init->intVal = intVal;

	mov	eax, DWORD PTR _intVal$[ebp]
	mov	ecx, DWORD PTR _init$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 34   : 	init->charVal = charVal;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _charVal$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 35   : 	init->dataType = dataType;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _dataType$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 36   : 	init->minusVal = minusVal;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _minusVal$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 37   : 	return init;

	mov	eax, DWORD PTR _init$[ebp]

; 38   : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_new_DATA_STRUCT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9FF75F13_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __1850469A_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
