; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__0524722D_list@c DB 01H
msvcjmc	ENDS
PUBLIC	_newLinkedList
PUBLIC	_LinkedList_add
PUBLIC	_LinkedList_add_beg
PUBLIC	_LinkedList_add_end
PUBLIC	_LinkedList_size
PUBLIC	_LinkedList_getItem
PUBLIC	_LinkedList_clear
PUBLIC	_LinkedList_getNode
PUBLIC	_LinkedList_remove
PUBLIC	_LinkedList_getItemId
PUBLIC	_LinkedList_setItemId
PUBLIC	_LinkedList_getLast
PUBLIC	_LinkedList_getFirst
PUBLIC	_LinkedList_findNodeByKey
PUBLIC	__JustMyCode_Default
EXTRN	__imp__malloc:PROC
EXTRN	_strcmp:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_findNodeByKey
_TEXT	SEGMENT
_key_$1 = -68						; size = 4
_temp$2 = -56						; size = 4
_key_string$3 = -44					; size = 4
_key_$4 = -32						; size = 4
_temp$5 = -20						; size = 4
_key_int$6 = -8						; size = 4
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_type$ = 16						; size = 4
_LinkedList_findNodeByKey PROC				; COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  : 	if (type == HASH_MAP_INT)

  00028	83 7d 10 00	 cmp	 DWORD PTR _type$[ebp], 0
  0002c	75 37		 jne	 SHORT $LN6@LinkedList

; 186  : 	{
; 187  : 		int key_int = (int*)key;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00031	89 45 f8	 mov	 DWORD PTR _key_int$6[ebp], eax

; 188  : 		node_t* temp = list->head;

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d ec	 mov	 DWORD PTR _temp$5[ebp], ecx
$LN2@LinkedList:

; 189  : 		while (temp != NULL)

  0003c	83 7d ec 00	 cmp	 DWORD PTR _temp$5[ebp], 0
  00040	74 21		 je	 SHORT $LN3@LinkedList

; 190  : 		{
; 191  : 			int key_ = (int*)temp->key;

  00042	8b 45 ec	 mov	 eax, DWORD PTR _temp$5[ebp]
  00045	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00048	89 4d e0	 mov	 DWORD PTR _key_$4[ebp], ecx

; 192  : 			if (key_ == key)

  0004b	8b 45 e0	 mov	 eax, DWORD PTR _key_$4[ebp]
  0004e	3b 45 0c	 cmp	 eax, DWORD PTR _key$[ebp]
  00051	75 05		 jne	 SHORT $LN8@LinkedList

; 193  : 			{
; 194  : 				return temp;

  00053	8b 45 ec	 mov	 eax, DWORD PTR _temp$5[ebp]
  00056	eb 4d		 jmp	 SHORT $LN1@LinkedList
$LN8@LinkedList:

; 195  : 			}
; 196  : 
; 197  : 			temp = temp->next;

  00058	8b 45 ec	 mov	 eax, DWORD PTR _temp$5[ebp]
  0005b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005e	89 4d ec	 mov	 DWORD PTR _temp$5[ebp], ecx

; 198  : 		}

  00061	eb d9		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 199  : 	}

  00063	eb 3e		 jmp	 SHORT $LN7@LinkedList
$LN6@LinkedList:

; 200  : 	else if (type == HASH_MAP_STRING)

  00065	83 7d 10 01	 cmp	 DWORD PTR _type$[ebp], 1
  00069	75 38		 jne	 SHORT $LN7@LinkedList

; 201  : 	{
; 202  : 		char* key_string = (char*)key;

  0006b	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0006e	89 45 d4	 mov	 DWORD PTR _key_string$3[ebp], eax

; 203  : 		node_t* temp = list->head;

  00071	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 4d c8	 mov	 DWORD PTR _temp$2[ebp], ecx
$LN4@LinkedList:

; 204  : 		while (temp != NULL)

  00079	83 7d c8 00	 cmp	 DWORD PTR _temp$2[ebp], 0
  0007d	74 24		 je	 SHORT $LN7@LinkedList

; 205  : 		{
; 206  : 			char* key_ = (char*)temp->key;

  0007f	8b 45 c8	 mov	 eax, DWORD PTR _temp$2[ebp]
  00082	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00085	89 4d bc	 mov	 DWORD PTR _key_$1[ebp], ecx

; 207  : 			if (strcmp(key_string, key_) == 0)

  00088	8b 45 bc	 mov	 eax, DWORD PTR _key_$1[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d d4	 mov	 ecx, DWORD PTR _key_string$3[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 _strcmp
  00095	83 c4 08	 add	 esp, 8
  00098	85 c0		 test	 eax, eax
  0009a	75 05		 jne	 SHORT $LN10@LinkedList

; 208  : 			{
; 209  : 				return temp;

  0009c	8b 45 c8	 mov	 eax, DWORD PTR _temp$2[ebp]
  0009f	eb 04		 jmp	 SHORT $LN1@LinkedList
$LN10@LinkedList:

; 210  : 			}
; 211  : 		}

  000a1	eb d6		 jmp	 SHORT $LN4@LinkedList
$LN7@LinkedList:

; 212  : 	}
; 213  : 	return NULL;

  000a3	33 c0		 xor	 eax, eax
$LN1@LinkedList:

; 214  : }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
_LinkedList_findNodeByKey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getFirst
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_getFirst PROC				; COMDAT

; 274  : void* LinkedList_getFirst(LinkedList* list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 275  : 	return list->head->data;

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 276  : }

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_LinkedList_getFirst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getLast
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_getLast PROC				; COMDAT

; 270  : void* LinkedList_getLast(LinkedList* list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 271  : 	return list->tail->data;

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 272  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_LinkedList_getLast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_setItemId
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_id$ = 16						; size = 4
_LinkedList_setItemId PROC				; COMDAT

; 216  : void LinkedList_setItemId(LinkedList* list, int index, int id) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 217  : 	int size = LinkedList_size(list);

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LinkedList_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 218  : 	if (size > 1 && index > size / 2 - 1) {

  00037	83 7d f8 01	 cmp	 DWORD PTR _size$[ebp], 1
  0003b	7e 4d		 jle	 SHORT $LN6@LinkedList
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00040	99		 cdq
  00041	2b c2		 sub	 eax, edx
  00043	d1 f8		 sar	 eax, 1
  00045	83 e8 01	 sub	 eax, 1
  00048	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  0004b	7e 3d		 jle	 SHORT $LN6@LinkedList

; 219  : 		node_t* temp = list->tail;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 220  : 		int idx = 0;

  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 221  : 		while (idx < size - index - 1)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00060	2b 45 0c	 sub	 eax, DWORD PTR _index$[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	39 45 e0	 cmp	 DWORD PTR _idx$1[ebp], eax
  00069	7d 14		 jge	 SHORT $LN3@LinkedList

; 222  : 		{
; 223  : 			temp = temp->last;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  0006e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00071	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 224  : 			idx++;

  00074	8b 45 e0	 mov	 eax, DWORD PTR _idx$1[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 e0	 mov	 DWORD PTR _idx$1[ebp], eax

; 225  : 		}

  0007d	eb de		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 226  : 		temp->id = id;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _id$[ebp]
  00085	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 227  : 		return;

  00088	eb 34		 jmp	 SHORT $LN1@LinkedList
$LN6@LinkedList:

; 228  : 	}
; 229  : 
; 230  : 	node_t* temp = list->head;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 231  : 	int idx = 0;

  00092	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 232  : 	while (idx < index)

  00099	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  0009c	3b 45 0c	 cmp	 eax, DWORD PTR _index$[ebp]
  0009f	7d 14		 jge	 SHORT $LN5@LinkedList

; 233  : 	{
; 234  : 		idx++;

  000a1	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 c8	 mov	 DWORD PTR _idx$[ebp], eax

; 235  : 		temp = temp->next;

  000aa	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b0	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 236  : 	}

  000b3	eb e4		 jmp	 SHORT $LN4@LinkedList
$LN5@LinkedList:

; 237  : 	temp->id = id;

  000b5	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _id$[ebp]
  000bb	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN1@LinkedList:

; 238  : 	return;
; 239  : }

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_LinkedList_setItemId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getItemId
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getItemId PROC				; COMDAT

; 159  : int LinkedList_getItemId(LinkedList* list, int index) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  : 	int size = LinkedList_size(list);

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LinkedList_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 161  : 	if (size > 1 && index > size / 2 - 1) {

  00037	83 7d f8 01	 cmp	 DWORD PTR _size$[ebp], 1
  0003b	7e 4a		 jle	 SHORT $LN6@LinkedList
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00040	99		 cdq
  00041	2b c2		 sub	 eax, edx
  00043	d1 f8		 sar	 eax, 1
  00045	83 e8 01	 sub	 eax, 1
  00048	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  0004b	7e 3a		 jle	 SHORT $LN6@LinkedList

; 162  : 		node_t* temp = list->tail;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 163  : 		int idx = 0;

  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 164  : 		while (idx < size - index - 1)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00060	2b 45 0c	 sub	 eax, DWORD PTR _index$[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	39 45 e0	 cmp	 DWORD PTR _idx$1[ebp], eax
  00069	7d 14		 jge	 SHORT $LN3@LinkedList

; 165  : 		{
; 166  : 			temp = temp->last;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  0006e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00071	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 167  : 			idx++;

  00074	8b 45 e0	 mov	 eax, DWORD PTR _idx$1[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 e0	 mov	 DWORD PTR _idx$1[ebp], eax

; 168  : 		}

  0007d	eb de		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 169  : 		return temp->id;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  00082	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00085	eb 31		 jmp	 SHORT $LN1@LinkedList
$LN6@LinkedList:

; 170  : 	}
; 171  : 
; 172  : 	node_t* temp = list->head;

  00087	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 173  : 	int idx = 0;

  0008f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 174  : 	while (idx < index)

  00096	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  00099	3b 45 0c	 cmp	 eax, DWORD PTR _index$[ebp]
  0009c	7d 14		 jge	 SHORT $LN5@LinkedList

; 175  : 	{
; 176  : 		idx++;

  0009e	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  000a1	83 c0 01	 add	 eax, 1
  000a4	89 45 c8	 mov	 DWORD PTR _idx$[ebp], eax

; 177  : 		temp = temp->next;

  000a7	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000aa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ad	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 178  : 	}

  000b0	eb e4		 jmp	 SHORT $LN4@LinkedList
$LN5@LinkedList:

; 179  : 	return temp->id;

  000b2	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000b5	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$LN1@LinkedList:

; 180  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_LinkedList_getItemId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_remove
_TEXT	SEGMENT
_idx$1 = -104						; size = 4
_next$2 = -92						; size = 4
_prev$3 = -80						; size = 4
_temp$4 = -68						; size = 4
_idx$5 = -56						; size = 4
_next$6 = -44						; size = 4
_prev$7 = -32						; size = 4
_temp$8 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_remove PROC					; COMDAT

; 71   : void LinkedList_remove(LinkedList* list, int index) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 72   : 	int size = LinkedList_size(list);

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LinkedList_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 73   : 	if (index == size - 1)

  00037	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  0003a	83 e8 01	 sub	 eax, 1
  0003d	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  00040	75 23		 jne	 SHORT $LN6@LinkedList

; 74   : 	{
; 75   : 		list->tail = list->tail->last;;

  00042	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00045	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00048	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0004b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 76   : 		list->size--;

  00051	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00054	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00057	83 e9 01	 sub	 ecx, 1
  0005a	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0005d	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 77   : 		return;

  00060	e9 40 01 00 00	 jmp	 $LN1@LinkedList
$LN6@LinkedList:

; 78   : 	}
; 79   : 	if (index == 0)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _index$[ebp], 0
  00069	75 21		 jne	 SHORT $LN7@LinkedList

; 80   : 	{
; 81   : 		list->head = list->head->next;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00073	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00076	89 02		 mov	 DWORD PTR [edx], eax

; 82   : 		list->size--;

  00078	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0007b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007e	83 e9 01	 sub	 ecx, 1
  00081	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00084	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 83   : 		return;

  00087	e9 19 01 00 00	 jmp	 $LN1@LinkedList
$LN7@LinkedList:

; 84   : 	}
; 85   : 	if (index > 1 && index > size / 2 - 1)

  0008c	83 7d 0c 01	 cmp	 DWORD PTR _index$[ebp], 1
  00090	0f 8e 95 00 00
	00		 jle	 $LN8@LinkedList
  00096	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00099	99		 cdq
  0009a	2b c2		 sub	 eax, edx
  0009c	d1 f8		 sar	 eax, 1
  0009e	83 e8 01	 sub	 eax, 1
  000a1	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  000a4	0f 8e 81 00 00
	00		 jle	 $LN8@LinkedList

; 86   : 	{
; 87   : 		node_t* temp = list->tail;

  000aa	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b0	89 4d ec	 mov	 DWORD PTR _temp$8[ebp], ecx

; 88   : 		node_t* prev = NULL;

  000b3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _prev$7[ebp], 0

; 89   : 		node_t* next = NULL;

  000ba	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _next$6[ebp], 0

; 90   : 		int idx = size - 1;

  000c1	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  000c4	83 e8 01	 sub	 eax, 1
  000c7	89 45 c8	 mov	 DWORD PTR _idx$5[ebp], eax
$LN2@LinkedList:

; 91   : 
; 92   : 		while (temp != NULL) {

  000ca	83 7d ec 00	 cmp	 DWORD PTR _temp$8[ebp], 0
  000ce	74 36		 je	 SHORT $LN3@LinkedList

; 93   : 			if (idx == index - 1)

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  000d3	83 e8 01	 sub	 eax, 1
  000d6	39 45 c8	 cmp	 DWORD PTR _idx$5[ebp], eax
  000d9	75 06		 jne	 SHORT $LN10@LinkedList

; 94   : 			{
; 95   : 				prev = temp;

  000db	8b 45 ec	 mov	 eax, DWORD PTR _temp$8[ebp]
  000de	89 45 e0	 mov	 DWORD PTR _prev$7[ebp], eax
$LN10@LinkedList:

; 96   : 			}
; 97   : 			if (idx == index + 1)

  000e1	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  000e4	83 c0 01	 add	 eax, 1
  000e7	39 45 c8	 cmp	 DWORD PTR _idx$5[ebp], eax
  000ea	75 06		 jne	 SHORT $LN11@LinkedList

; 98   : 			{
; 99   : 				next = temp;

  000ec	8b 45 ec	 mov	 eax, DWORD PTR _temp$8[ebp]
  000ef	89 45 d4	 mov	 DWORD PTR _next$6[ebp], eax
$LN11@LinkedList:

; 100  : 			}
; 101  : 			temp = temp->last;

  000f2	8b 45 ec	 mov	 eax, DWORD PTR _temp$8[ebp]
  000f5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f8	89 4d ec	 mov	 DWORD PTR _temp$8[ebp], ecx

; 102  : 			idx--;

  000fb	8b 45 c8	 mov	 eax, DWORD PTR _idx$5[ebp]
  000fe	83 e8 01	 sub	 eax, 1
  00101	89 45 c8	 mov	 DWORD PTR _idx$5[ebp], eax

; 103  : 		}

  00104	eb c4		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 104  : 		prev->next = next;

  00106	8b 45 e0	 mov	 eax, DWORD PTR _prev$7[ebp]
  00109	8b 4d d4	 mov	 ecx, DWORD PTR _next$6[ebp]
  0010c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 105  : 		next->last = prev;

  0010f	8b 45 d4	 mov	 eax, DWORD PTR _next$6[ebp]
  00112	8b 4d e0	 mov	 ecx, DWORD PTR _prev$7[ebp]
  00115	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 106  : 		list->size--;

  00118	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0011b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011e	83 e9 01	 sub	 ecx, 1
  00121	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00124	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 107  : 		return;

  00127	eb 7c		 jmp	 SHORT $LN1@LinkedList

; 108  : 	}

  00129	eb 7a		 jmp	 SHORT $LN1@LinkedList
$LN8@LinkedList:

; 109  : 	else
; 110  : 	{
; 111  : 		node_t* temp = list->head;

  0012b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	89 4d bc	 mov	 DWORD PTR _temp$4[ebp], ecx

; 112  : 		node_t* prev = NULL;

  00133	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _prev$3[ebp], 0

; 113  : 		node_t* next = NULL;

  0013a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _next$2[ebp], 0

; 114  : 		int idx = 0;

  00141	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _idx$1[ebp], 0
$LN4@LinkedList:

; 115  : 
; 116  : 		while (temp != NULL)

  00148	83 7d bc 00	 cmp	 DWORD PTR _temp$4[ebp], 0
  0014c	74 36		 je	 SHORT $LN5@LinkedList

; 117  : 		{
; 118  : 			if (idx == index - 1)

  0014e	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00151	83 e8 01	 sub	 eax, 1
  00154	39 45 98	 cmp	 DWORD PTR _idx$1[ebp], eax
  00157	75 06		 jne	 SHORT $LN12@LinkedList

; 119  : 			{
; 120  : 				prev = temp;

  00159	8b 45 bc	 mov	 eax, DWORD PTR _temp$4[ebp]
  0015c	89 45 b0	 mov	 DWORD PTR _prev$3[ebp], eax
$LN12@LinkedList:

; 121  : 			}
; 122  : 			if (idx == index + 1)

  0015f	8b 45 0c	 mov	 eax, DWORD PTR _index$[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	39 45 98	 cmp	 DWORD PTR _idx$1[ebp], eax
  00168	75 06		 jne	 SHORT $LN13@LinkedList

; 123  : 			{
; 124  : 				next = temp;

  0016a	8b 45 bc	 mov	 eax, DWORD PTR _temp$4[ebp]
  0016d	89 45 a4	 mov	 DWORD PTR _next$2[ebp], eax
$LN13@LinkedList:

; 125  : 			}
; 126  : 			temp = temp->next;

  00170	8b 45 bc	 mov	 eax, DWORD PTR _temp$4[ebp]
  00173	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00176	89 4d bc	 mov	 DWORD PTR _temp$4[ebp], ecx

; 127  : 			idx++;

  00179	8b 45 98	 mov	 eax, DWORD PTR _idx$1[ebp]
  0017c	83 c0 01	 add	 eax, 1
  0017f	89 45 98	 mov	 DWORD PTR _idx$1[ebp], eax

; 128  : 		}

  00182	eb c4		 jmp	 SHORT $LN4@LinkedList
$LN5@LinkedList:

; 129  : 		prev->next = next;

  00184	8b 45 b0	 mov	 eax, DWORD PTR _prev$3[ebp]
  00187	8b 4d a4	 mov	 ecx, DWORD PTR _next$2[ebp]
  0018a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 130  : 		next->last = prev;

  0018d	8b 45 a4	 mov	 eax, DWORD PTR _next$2[ebp]
  00190	8b 4d b0	 mov	 ecx, DWORD PTR _prev$3[ebp]
  00193	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 131  : 		list->size--;

  00196	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00199	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0019c	83 e9 01	 sub	 ecx, 1
  0019f	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  001a2	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN1@LinkedList:

; 132  : 		return;
; 133  : 	}
; 134  : }

  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
  001a7	5b		 pop	 ebx
  001a8	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  001ae	3b ec		 cmp	 ebp, esp
  001b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
_LinkedList_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getNode
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getNode PROC				; COMDAT

; 241  : node_t* LinkedList_getNode(LinkedList* list, int index) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 242  : 	int size = LinkedList_size(list);

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LinkedList_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 243  : 	if (size > 1 && index > size / 2 - 1) {

  00037	83 7d f8 01	 cmp	 DWORD PTR _size$[ebp], 1
  0003b	7e 47		 jle	 SHORT $LN6@LinkedList
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00040	99		 cdq
  00041	2b c2		 sub	 eax, edx
  00043	d1 f8		 sar	 eax, 1
  00045	83 e8 01	 sub	 eax, 1
  00048	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  0004b	7e 37		 jle	 SHORT $LN6@LinkedList

; 244  : 		node_t* temp = list->tail;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 245  : 		int idx = 0;

  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 246  : 		while (idx < size - index - 1)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00060	2b 45 0c	 sub	 eax, DWORD PTR _index$[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	39 45 e0	 cmp	 DWORD PTR _idx$1[ebp], eax
  00069	7d 14		 jge	 SHORT $LN3@LinkedList

; 247  : 		{
; 248  : 			temp = temp->last;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  0006e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00071	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 249  : 			idx++;

  00074	8b 45 e0	 mov	 eax, DWORD PTR _idx$1[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 e0	 mov	 DWORD PTR _idx$1[ebp], eax

; 250  : 		}

  0007d	eb de		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 251  : 		return temp;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  00082	eb 2e		 jmp	 SHORT $LN1@LinkedList
$LN6@LinkedList:

; 252  : 	}
; 253  : 
; 254  : 	node_t* temp = list->head;

  00084	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 255  : 	int idx = 0;

  0008c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 256  : 	while (idx < index)

  00093	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  00096	3b 45 0c	 cmp	 eax, DWORD PTR _index$[ebp]
  00099	7d 14		 jge	 SHORT $LN5@LinkedList

; 257  : 	{
; 258  : 		idx++;

  0009b	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 c8	 mov	 DWORD PTR _idx$[ebp], eax

; 259  : 		temp = temp->next;

  000a4	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000aa	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 260  : 	}

  000ad	eb e4		 jmp	 SHORT $LN4@LinkedList
$LN5@LinkedList:

; 261  : 	return temp;

  000af	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
$LN1@LinkedList:

; 262  : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
_LinkedList_getNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_clear
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_clear PROC					; COMDAT

; 264  : void LinkedList_clear(LinkedList* list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 265  : 	list->head = NULL;

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 266  : 	list->tail = NULL;

  00031	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00034	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 267  : 	list->size = 0;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 268  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_LinkedList_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getItem
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getItem PROC				; COMDAT

; 136  : void* LinkedList_getItem(LinkedList* list, int index) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 137  : 	int size = LinkedList_size(list);

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _LinkedList_size
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 138  : 	if (size > 1 && index > size / 2 - 1) {

  00037	83 7d f8 01	 cmp	 DWORD PTR _size$[ebp], 1
  0003b	7e 49		 jle	 SHORT $LN6@LinkedList
  0003d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00040	99		 cdq
  00041	2b c2		 sub	 eax, edx
  00043	d1 f8		 sar	 eax, 1
  00045	83 e8 01	 sub	 eax, 1
  00048	39 45 0c	 cmp	 DWORD PTR _index$[ebp], eax
  0004b	7e 39		 jle	 SHORT $LN6@LinkedList

; 139  : 		node_t* temp = list->tail;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00050	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00053	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 140  : 		int idx = 0;

  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 141  : 		while (idx < size - index - 1)

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _size$[ebp]
  00060	2b 45 0c	 sub	 eax, DWORD PTR _index$[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	39 45 e0	 cmp	 DWORD PTR _idx$1[ebp], eax
  00069	7d 14		 jge	 SHORT $LN3@LinkedList

; 142  : 		{
; 143  : 			temp = temp->last;

  0006b	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  0006e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00071	89 4d ec	 mov	 DWORD PTR _temp$2[ebp], ecx

; 144  : 			idx++;

  00074	8b 45 e0	 mov	 eax, DWORD PTR _idx$1[ebp]
  00077	83 c0 01	 add	 eax, 1
  0007a	89 45 e0	 mov	 DWORD PTR _idx$1[ebp], eax

; 145  : 		}

  0007d	eb de		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 146  : 		return temp->data;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _temp$2[ebp]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	eb 30		 jmp	 SHORT $LN1@LinkedList
$LN6@LinkedList:

; 147  : 	}
; 148  : 
; 149  : 	node_t* temp = list->head;

  00086	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008b	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 150  : 	int idx = 0;

  0008e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 151  : 	while (idx < index)

  00095	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  00098	3b 45 0c	 cmp	 eax, DWORD PTR _index$[ebp]
  0009b	7d 14		 jge	 SHORT $LN5@LinkedList

; 152  : 	{
; 153  : 		idx++;

  0009d	8b 45 c8	 mov	 eax, DWORD PTR _idx$[ebp]
  000a0	83 c0 01	 add	 eax, 1
  000a3	89 45 c8	 mov	 DWORD PTR _idx$[ebp], eax

; 154  : 		temp = temp->next;

  000a6	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ac	89 4d d4	 mov	 DWORD PTR _temp$[ebp], ecx

; 155  : 	}

  000af	eb e4		 jmp	 SHORT $LN4@LinkedList
$LN5@LinkedList:

; 156  : 	return temp->data;

  000b1	8b 45 d4	 mov	 eax, DWORD PTR _temp$[ebp]
  000b4	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@LinkedList:

; 157  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_LinkedList_getItem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_size
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_size PROC					; COMDAT

; 67   : int LinkedList_size(LinkedList* list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   : 	return list->size;

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 69   : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
_LinkedList_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add_end
_TEXT	SEGMENT
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_hash$ = 16						; size = 4
_key$ = 20						; size = 4
_varName$ = 24						; size = 4
_LinkedList_add_end PROC				; COMDAT

; 63   : void LinkedList_add_end(LinkedList* list, void* data, unsigned long hash, void* key, char* varName) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : 	LinkedList_add(list, -1, data, hash, key, varName);

  00028	8b 45 18	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _key$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 10	 mov	 edx, DWORD PTR _hash$[ebp]
  00033	52		 push	 edx
  00034	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00037	50		 push	 eax
  00038	6a ff		 push	 -1
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _LinkedList_add
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 65   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_LinkedList_add_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add_beg
_TEXT	SEGMENT
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_hash$ = 16						; size = 4
_key$ = 20						; size = 4
_varName$ = 24						; size = 4
_LinkedList_add_beg PROC				; COMDAT

; 59   : void LinkedList_add_beg(LinkedList* list, void* data, unsigned long hash, void* key, char* varName) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   : 	LinkedList_add(list, 0, data, hash, key, varName);

  00028	8b 45 18	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _key$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 10	 mov	 edx, DWORD PTR _hash$[ebp]
  00033	52		 push	 edx
  00034	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00037	50		 push	 eax
  00038	6a 00		 push	 0
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _LinkedList_add
  00043	83 c4 18	 add	 esp, 24			; 00000018H

; 61   : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_LinkedList_add_beg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add
_TEXT	SEGMENT
_cur$ = -44						; size = 4
_prev$ = -32						; size = 4
_idx$ = -20						; size = 4
_node$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
_hash$ = 20						; size = 4
_key$ = 24						; size = 4
_varName$ = 28						; size = 4
_LinkedList_add PROC					; COMDAT

; 14   : void LinkedList_add(LinkedList* list, int index, void* data, unsigned long hash, void* key, char* varName) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 15   : 	node_t* node = malloc(sizeof(node_t));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 1c		 push	 28			; 0000001cH
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _node$[ebp], eax

; 16   : 	node->data = data;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00042	8b 4d 10	 mov	 ecx, DWORD PTR _data$[ebp]
  00045	89 08		 mov	 DWORD PTR [eax], ecx

; 17   : 	node->hash = hash;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  0004a	8b 4d 14	 mov	 ecx, DWORD PTR _hash$[ebp]
  0004d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 18   : 	node->key = key;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00053	8b 4d 18	 mov	 ecx, DWORD PTR _key$[ebp]
  00056	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 19   : 	node->varName = varName;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  0005c	8b 4d 1c	 mov	 ecx, DWORD PTR _varName$[ebp]
  0005f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 20   : 	node->next = NULL;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00065	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 21   : 	node->last = NULL;

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  0006f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 22   : 	node->id = 0;

  00076	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00079	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 23   : 
; 24   : 	if (list->head == NULL)

  00080	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00083	83 38 00	 cmp	 DWORD PTR [eax], 0
  00086	75 25		 jne	 SHORT $LN4@LinkedList

; 25   : 	{
; 26   : 		list->head = node;

  00088	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  0008e	89 08		 mov	 DWORD PTR [eax], ecx

; 27   : 		list->tail = node;

  00090	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  00096	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 28   : 		list->size++;

  00099	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0009c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009f	83 c1 01	 add	 ecx, 1
  000a2	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 29   : 		return;

  000a8	e9 9f 00 00 00	 jmp	 $LN1@LinkedList
$LN4@LinkedList:

; 30   : 	}
; 31   : 	int idx = 0;

  000ad	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _idx$[ebp], 0

; 32   : 	node_t* prev = NULL;

  000b4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _prev$[ebp], 0

; 33   : 	node_t* cur = list->head;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	89 4d d4	 mov	 DWORD PTR _cur$[ebp], ecx
$LN2@LinkedList:

; 34   : 
; 35   : 	while (idx != index && cur != NULL)

  000c3	8b 45 ec	 mov	 eax, DWORD PTR _idx$[ebp]
  000c6	3b 45 0c	 cmp	 eax, DWORD PTR _index$[ebp]
  000c9	74 20		 je	 SHORT $LN3@LinkedList
  000cb	83 7d d4 00	 cmp	 DWORD PTR _cur$[ebp], 0
  000cf	74 1a		 je	 SHORT $LN3@LinkedList

; 36   : 	{
; 37   : 		idx++;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _idx$[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 45 ec	 mov	 DWORD PTR _idx$[ebp], eax

; 38   : 		prev = cur;

  000da	8b 45 d4	 mov	 eax, DWORD PTR _cur$[ebp]
  000dd	89 45 e0	 mov	 DWORD PTR _prev$[ebp], eax

; 39   : 		cur = cur->next;

  000e0	8b 45 d4	 mov	 eax, DWORD PTR _cur$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	89 4d d4	 mov	 DWORD PTR _cur$[ebp], ecx

; 40   : 	}

  000e9	eb d8		 jmp	 SHORT $LN2@LinkedList
$LN3@LinkedList:

; 41   : 	if (idx == 0)

  000eb	83 7d ec 00	 cmp	 DWORD PTR _idx$[ebp], 0
  000ef	75 2b		 jne	 SHORT $LN5@LinkedList

; 42   : 	{
; 43   : 		list->head = node;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000f4	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  000f7	89 08		 mov	 DWORD PTR [eax], ecx

; 44   : 		cur->last = node;

  000f9	8b 45 d4	 mov	 eax, DWORD PTR _cur$[ebp]
  000fc	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  000ff	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 45   : 		node->next = cur;

  00102	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00105	8b 4d d4	 mov	 ecx, DWORD PTR _cur$[ebp]
  00108	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 46   : 		list->size++;

  0010b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0010e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00111	83 c1 01	 add	 ecx, 1
  00114	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00117	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 47   : 		return;

  0011a	eb 30		 jmp	 SHORT $LN1@LinkedList
$LN5@LinkedList:

; 48   : 	}
; 49   : 	if (cur == NULL)

  0011c	83 7d d4 00	 cmp	 DWORD PTR _cur$[ebp], 0
  00120	75 2a		 jne	 SHORT $LN1@LinkedList

; 50   : 	{
; 51   : 		node->last = prev;

  00122	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00125	8b 4d e0	 mov	 ecx, DWORD PTR _prev$[ebp]
  00128	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 52   : 		prev->next = node;

  0012b	8b 45 e0	 mov	 eax, DWORD PTR _prev$[ebp]
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  00131	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 53   : 		list->tail = node;

  00134	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _node$[ebp]
  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 54   : 		list->size++;

  0013d	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00140	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00143	83 c1 01	 add	 ecx, 1
  00146	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00149	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN1@LinkedList:

; 55   : 		return;
; 56   : 	}
; 57   : }

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00155	3b ec		 cmp	 ebp, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c3		 ret	 0
_LinkedList_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _newLinkedList
_TEXT	SEGMENT
_initList$ = -8						; size = 4
_newLinkedList PROC					; COMDAT

; 6    : LinkedList* newLinkedList() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0524722D_list@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 7    : 	LinkedList* initList = malloc(sizeof(LinkedList));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _initList$[ebp], eax

; 8    : 	initList->head = NULL;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _initList$[ebp]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 9    : 	initList->tail = NULL;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _initList$[ebp]
  0004b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 10   : 	initList->size = 0;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _initList$[ebp]
  00055	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 11   : 	return initList;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _initList$[ebp]

; 12   : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_newLinkedList ENDP
_TEXT	ENDS
END
