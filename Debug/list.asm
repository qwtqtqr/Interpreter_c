; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__0524722D_list@c DB 01H
msvcjmc	ENDS
PUBLIC	_newLinkedList
PUBLIC	_LinkedList_add
PUBLIC	_LinkedList_add_beg
PUBLIC	_LinkedList_add_end
PUBLIC	_LinkedList_size
PUBLIC	_LinkedList_getItem
PUBLIC	_LinkedList_clear
PUBLIC	_LinkedList_getNode
PUBLIC	_LinkedList_remove
PUBLIC	_LinkedList_getItemId
PUBLIC	_LinkedList_setItemId
PUBLIC	_LinkedList_getLast
PUBLIC	_LinkedList_getFirst
PUBLIC	_LinkedList_findNodeByKey
PUBLIC	__JustMyCode_Default
EXTRN	__imp__malloc:PROC
EXTRN	_strcmp:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_findNodeByKey
_TEXT	SEGMENT
_key_$1 = -68						; size = 4
_temp$2 = -56						; size = 4
_key_string$3 = -44					; size = 4
_key_$4 = -32						; size = 4
_temp$5 = -20						; size = 4
_key_int$6 = -8						; size = 4
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_type$ = 16						; size = 4
_LinkedList_findNodeByKey PROC				; COMDAT

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 189  : 	if (type == HASH_MAP_INT)

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN6@LinkedList

; 190  : 	{
; 191  : 		int key_int = (int*)key;

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key_int$6[ebp], eax

; 192  : 		node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$5[ebp], ecx
$LN2@LinkedList:

; 193  : 		while (temp != NULL)

	cmp	DWORD PTR _temp$5[ebp], 0
	je	SHORT $LN3@LinkedList

; 194  : 		{
; 195  : 			int key_ = (int*)temp->key;

	mov	eax, DWORD PTR _temp$5[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _key_$4[ebp], ecx

; 196  : 			if (key_ == key)

	mov	eax, DWORD PTR _key_$4[ebp]
	cmp	eax, DWORD PTR _key$[ebp]
	jne	SHORT $LN8@LinkedList

; 197  : 			{
; 198  : 				return temp;

	mov	eax, DWORD PTR _temp$5[ebp]
	jmp	SHORT $LN1@LinkedList
$LN8@LinkedList:

; 199  : 			}
; 200  : 
; 201  : 			temp = temp->next;

	mov	eax, DWORD PTR _temp$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$5[ebp], ecx

; 202  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 203  : 	}

	jmp	SHORT $LN7@LinkedList
$LN6@LinkedList:

; 204  : 	else if (type == HASH_MAP_STRING)

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN7@LinkedList

; 205  : 	{
; 206  : 		char* key_string = (char*)key;

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key_string$3[ebp], eax

; 207  : 		node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$2[ebp], ecx
$LN4@LinkedList:

; 208  : 		while (temp != NULL)

	cmp	DWORD PTR _temp$2[ebp], 0
	je	SHORT $LN7@LinkedList

; 209  : 		{
; 210  : 			char* key_ = (char*)temp->key;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _key_$1[ebp], ecx

; 211  : 			if (strcmp(key_string, key_) == 0)

	mov	eax, DWORD PTR _key_$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _key_string$3[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@LinkedList

; 212  : 			{
; 213  : 				return temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	jmp	SHORT $LN1@LinkedList
$LN10@LinkedList:

; 214  : 			}
; 215  : 		}

	jmp	SHORT $LN4@LinkedList
$LN7@LinkedList:

; 216  : 	}
; 217  : 	return NULL;

	xor	eax, eax
$LN1@LinkedList:

; 218  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_findNodeByKey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getFirst
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_getFirst PROC				; COMDAT

; 278  : void* LinkedList_getFirst(LinkedList* list) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 279  : 	return list->head->data;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]

; 280  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_getFirst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getLast
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_getLast PROC				; COMDAT

; 274  : void* LinkedList_getLast(LinkedList* list) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 275  : 	return list->tail->data;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_getLast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_setItemId
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_id$ = 16						; size = 4
_LinkedList_setItemId PROC				; COMDAT

; 220  : void LinkedList_setItemId(LinkedList* list, int index, int id) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 221  : 	int size = LinkedList_size(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_LinkedList_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 222  : 	if (size > 1 && index > size / 2 - 1) {

	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN6@LinkedList
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	SHORT $LN6@LinkedList

; 223  : 		node_t* temp = list->tail;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$2[ebp], ecx

; 224  : 		int idx = 0;

	mov	DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 225  : 		while (idx < size - index - 1)

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jge	SHORT $LN3@LinkedList

; 226  : 		{
; 227  : 			temp = temp->last;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$2[ebp], ecx

; 228  : 			idx++;

	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax

; 229  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 230  : 		temp->id = id;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 231  : 		return;

	jmp	SHORT $LN1@LinkedList
$LN6@LinkedList:

; 232  : 	}
; 233  : 
; 234  : 	node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 235  : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 236  : 	while (idx < index)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN5@LinkedList

; 237  : 	{
; 238  : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 239  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 240  : 	}

	jmp	SHORT $LN4@LinkedList
$LN5@LinkedList:

; 241  : 	temp->id = id;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@LinkedList:

; 242  : 	return;
; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_setItemId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getItemId
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getItemId PROC				; COMDAT

; 163  : int LinkedList_getItemId(LinkedList* list, int index) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 164  : 	int size = LinkedList_size(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_LinkedList_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 165  : 	if (size > 1 && index > size / 2 - 1) {

	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN6@LinkedList
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	SHORT $LN6@LinkedList

; 166  : 		node_t* temp = list->tail;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$2[ebp], ecx

; 167  : 		int idx = 0;

	mov	DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 168  : 		while (idx < size - index - 1)

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jge	SHORT $LN3@LinkedList

; 169  : 		{
; 170  : 			temp = temp->last;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$2[ebp], ecx

; 171  : 			idx++;

	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax

; 172  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 173  : 		return temp->id;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN1@LinkedList
$LN6@LinkedList:

; 174  : 	}
; 175  : 
; 176  : 	node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 177  : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 178  : 	while (idx < index)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN5@LinkedList

; 179  : 	{
; 180  : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 181  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 182  : 	}

	jmp	SHORT $LN4@LinkedList
$LN5@LinkedList:

; 183  : 	return temp->id;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [eax+12]
$LN1@LinkedList:

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_getItemId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_remove
_TEXT	SEGMENT
_idx$1 = -104						; size = 4
_next$2 = -92						; size = 4
_prev$3 = -80						; size = 4
_temp$4 = -68						; size = 4
_idx$5 = -56						; size = 4
_next$6 = -44						; size = 4
_prev$7 = -32						; size = 4
_temp$8 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_remove PROC					; COMDAT

; 71   : void LinkedList_remove(LinkedList* list, int index) {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 72   : 	int size = LinkedList_size(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_LinkedList_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 73   : 	if (index == size - 1)

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jne	SHORT $LN6@LinkedList

; 74   : 	{
; 75   : 		if (list->tail != NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@LinkedList

; 76   : 		{
; 77   : 
; 78   : 			list->tail = list->tail->last;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+4], eax

; 79   : 			list->size--;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 80   : 			return;

	jmp	$LN1@LinkedList
$LN6@LinkedList:

; 81   : 		}
; 82   : 	}
; 83   : 	if (index == 0)

	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN8@LinkedList

; 84   : 	{
; 85   : 		list->head = list->head->next;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax

; 86   : 		list->size--;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 87   : 		return;

	jmp	$LN1@LinkedList
$LN8@LinkedList:

; 88   : 	}
; 89   : 	if (index > 1 && index > size / 2 - 1)

	cmp	DWORD PTR _index$[ebp], 1
	jle	$LN9@LinkedList
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	$LN9@LinkedList

; 90   : 	{
; 91   : 		node_t* temp = list->tail;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$8[ebp], ecx

; 92   : 		node_t* prev = NULL;

	mov	DWORD PTR _prev$7[ebp], 0

; 93   : 		node_t* next = NULL;

	mov	DWORD PTR _next$6[ebp], 0

; 94   : 		int idx = size - 1;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$5[ebp], eax
$LN2@LinkedList:

; 95   : 
; 96   : 		while (temp != NULL) {

	cmp	DWORD PTR _temp$8[ebp], 0
	je	SHORT $LN3@LinkedList

; 97   : 			if (idx == index - 1)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$5[ebp], eax
	jne	SHORT $LN11@LinkedList

; 98   : 			{
; 99   : 				prev = temp;

	mov	eax, DWORD PTR _temp$8[ebp]
	mov	DWORD PTR _prev$7[ebp], eax
$LN11@LinkedList:

; 100  : 			}
; 101  : 			if (idx == index + 1)

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	cmp	DWORD PTR _idx$5[ebp], eax
	jne	SHORT $LN12@LinkedList

; 102  : 			{
; 103  : 				next = temp;

	mov	eax, DWORD PTR _temp$8[ebp]
	mov	DWORD PTR _next$6[ebp], eax
$LN12@LinkedList:

; 104  : 			}
; 105  : 			temp = temp->last;

	mov	eax, DWORD PTR _temp$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$8[ebp], ecx

; 106  : 			idx--;

	mov	eax, DWORD PTR _idx$5[ebp]
	sub	eax, 1
	mov	DWORD PTR _idx$5[ebp], eax

; 107  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 108  : 		prev->next = next;

	mov	eax, DWORD PTR _prev$7[ebp]
	mov	ecx, DWORD PTR _next$6[ebp]
	mov	DWORD PTR [eax+4], ecx

; 109  : 		next->last = prev;

	mov	eax, DWORD PTR _next$6[ebp]
	mov	ecx, DWORD PTR _prev$7[ebp]
	mov	DWORD PTR [eax+8], ecx

; 110  : 		list->size--;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 111  : 		return;

	jmp	SHORT $LN1@LinkedList

; 112  : 	}

	jmp	SHORT $LN1@LinkedList
$LN9@LinkedList:

; 113  : 	else
; 114  : 	{
; 115  : 		node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$4[ebp], ecx

; 116  : 		node_t* prev = NULL;

	mov	DWORD PTR _prev$3[ebp], 0

; 117  : 		node_t* next = NULL;

	mov	DWORD PTR _next$2[ebp], 0

; 118  : 		int idx = 0;

	mov	DWORD PTR _idx$1[ebp], 0
$LN4@LinkedList:

; 119  : 
; 120  : 		while (temp != NULL)

	cmp	DWORD PTR _temp$4[ebp], 0
	je	SHORT $LN5@LinkedList

; 121  : 		{
; 122  : 			if (idx == index - 1)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jne	SHORT $LN13@LinkedList

; 123  : 			{
; 124  : 				prev = temp;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	DWORD PTR _prev$3[ebp], eax
$LN13@LinkedList:

; 125  : 			}
; 126  : 			if (idx == index + 1)

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jne	SHORT $LN14@LinkedList

; 127  : 			{
; 128  : 				next = temp;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	DWORD PTR _next$2[ebp], eax
$LN14@LinkedList:

; 129  : 			}
; 130  : 			temp = temp->next;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$4[ebp], ecx

; 131  : 			idx++;

	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax

; 132  : 		}

	jmp	SHORT $LN4@LinkedList
$LN5@LinkedList:

; 133  : 		prev->next = next;

	mov	eax, DWORD PTR _prev$3[ebp]
	mov	ecx, DWORD PTR _next$2[ebp]
	mov	DWORD PTR [eax+4], ecx

; 134  : 		next->last = prev;

	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR _prev$3[ebp]
	mov	DWORD PTR [eax+8], ecx

; 135  : 		list->size--;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@LinkedList:

; 136  : 		return;
; 137  : 	}
; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getNode
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getNode PROC				; COMDAT

; 245  : node_t* LinkedList_getNode(LinkedList* list, int index) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 246  : 	int size = LinkedList_size(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_LinkedList_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 247  : 	if (size > 1 && index > size / 2 - 1) {

	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN6@LinkedList
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	SHORT $LN6@LinkedList

; 248  : 		node_t* temp = list->tail;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$2[ebp], ecx

; 249  : 		int idx = 0;

	mov	DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 250  : 		while (idx < size - index - 1)

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jge	SHORT $LN3@LinkedList

; 251  : 		{
; 252  : 			temp = temp->last;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$2[ebp], ecx

; 253  : 			idx++;

	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax

; 254  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 255  : 		return temp;

	mov	eax, DWORD PTR _temp$2[ebp]
	jmp	SHORT $LN1@LinkedList
$LN6@LinkedList:

; 256  : 	}
; 257  : 
; 258  : 	node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 259  : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 260  : 	while (idx < index)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN5@LinkedList

; 261  : 	{
; 262  : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 263  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 264  : 	}

	jmp	SHORT $LN4@LinkedList
$LN5@LinkedList:

; 265  : 	return temp;

	mov	eax, DWORD PTR _temp$[ebp]
$LN1@LinkedList:

; 266  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_getNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_clear
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_clear PROC					; COMDAT

; 268  : void LinkedList_clear(LinkedList* list) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 269  : 	list->head = NULL;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax], 0

; 270  : 	list->tail = NULL;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+4], 0

; 271  : 	list->size = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+8], 0

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_getItem
_TEXT	SEGMENT
_idx$ = -56						; size = 4
_temp$ = -44						; size = 4
_idx$1 = -32						; size = 4
_temp$2 = -20						; size = 4
_size$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_LinkedList_getItem PROC				; COMDAT

; 140  : void* LinkedList_getItem(LinkedList* list, int index) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 141  : 	int size = LinkedList_size(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_LinkedList_size
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax

; 142  : 	if (size > 1 && index > size / 2 - 1) {

	cmp	DWORD PTR _size$[ebp], 1
	jle	SHORT $LN6@LinkedList
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _index$[ebp], eax
	jle	SHORT $LN6@LinkedList

; 143  : 		node_t* temp = list->tail;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$2[ebp], ecx

; 144  : 		int idx = 0;

	mov	DWORD PTR _idx$1[ebp], 0
$LN2@LinkedList:

; 145  : 		while (idx < size - index - 1)

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _idx$1[ebp], eax
	jge	SHORT $LN3@LinkedList

; 146  : 		{
; 147  : 			temp = temp->last;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$2[ebp], ecx

; 148  : 			idx++;

	mov	eax, DWORD PTR _idx$1[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$1[ebp], eax

; 149  : 		}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 150  : 		return temp->data;

	mov	eax, DWORD PTR _temp$2[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN1@LinkedList
$LN6@LinkedList:

; 151  : 	}
; 152  : 
; 153  : 	node_t* temp = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx

; 154  : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN4@LinkedList:

; 155  : 	while (idx < index)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN5@LinkedList

; 156  : 	{
; 157  : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 158  : 		temp = temp->next;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx

; 159  : 	}

	jmp	SHORT $LN4@LinkedList
$LN5@LinkedList:

; 160  : 	return temp->data;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	eax, DWORD PTR [eax]
$LN1@LinkedList:

; 161  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_getItem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_size
_TEXT	SEGMENT
_list$ = 8						; size = 4
_LinkedList_size PROC					; COMDAT

; 67   : int LinkedList_size(LinkedList* list) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   : 	return list->size;

	mov	eax, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 69   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add_end
_TEXT	SEGMENT
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_hash$ = 16						; size = 4
_key$ = 20						; size = 4
_varName$ = 24						; size = 4
_LinkedList_add_end PROC				; COMDAT

; 63   : void LinkedList_add_end(LinkedList* list, void* data, unsigned long hash, void* key, char* varName) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 64   : 	LinkedList_add(list, -1, data, hash, key, varName);

	mov	eax, DWORD PTR _varName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_LinkedList_add
	add	esp, 24					; 00000018H

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_add_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add_beg
_TEXT	SEGMENT
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_hash$ = 16						; size = 4
_key$ = 20						; size = 4
_varName$ = 24						; size = 4
_LinkedList_add_beg PROC				; COMDAT

; 59   : void LinkedList_add_beg(LinkedList* list, void* data, unsigned long hash, void* key, char* varName) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   : 	LinkedList_add(list, 0, data, hash, key, varName);

	mov	eax, DWORD PTR _varName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_LinkedList_add
	add	esp, 24					; 00000018H

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_add_beg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _LinkedList_add
_TEXT	SEGMENT
_cur$ = -44						; size = 4
_prev$ = -32						; size = 4
_idx$ = -20						; size = 4
_node$ = -8						; size = 4
_list$ = 8						; size = 4
_index$ = 12						; size = 4
_data$ = 16						; size = 4
_hash$ = 20						; size = 4
_key$ = 24						; size = 4
_varName$ = 28						; size = 4
_LinkedList_add PROC					; COMDAT

; 14   : void LinkedList_add(LinkedList* list, int index, void* data, unsigned long hash, void* key, char* varName) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 15   : 	node_t* node = malloc(sizeof(node_t));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _node$[ebp], eax

; 16   : 	node->data = data;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx

; 17   : 	node->hash = hash;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 18   : 	node->key = key;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 19   : 	node->varName = varName;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _varName$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 20   : 	node->next = NULL;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], 0

; 21   : 	node->last = NULL;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+8], 0

; 22   : 	node->id = 0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+12], 0

; 23   : 
; 24   : 	if (list->head == NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@LinkedList

; 25   : 	{
; 26   : 		list->head = node;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx

; 27   : 		list->tail = node;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 28   : 		list->size++;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 29   : 		return;

	jmp	$LN1@LinkedList
$LN4@LinkedList:

; 30   : 	}
; 31   : 	int idx = 0;

	mov	DWORD PTR _idx$[ebp], 0

; 32   : 	node_t* prev = NULL;

	mov	DWORD PTR _prev$[ebp], 0

; 33   : 	node_t* cur = list->head;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@LinkedList:

; 34   : 
; 35   : 	while (idx != index && cur != NULL)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	je	SHORT $LN3@LinkedList
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@LinkedList

; 36   : 	{
; 37   : 		idx++;

	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 38   : 		prev = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 39   : 		cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx

; 40   : 	}

	jmp	SHORT $LN2@LinkedList
$LN3@LinkedList:

; 41   : 	if (idx == 0)

	cmp	DWORD PTR _idx$[ebp], 0
	jne	SHORT $LN5@LinkedList

; 42   : 	{
; 43   : 		list->head = node;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx

; 44   : 		cur->last = node;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 45   : 		node->next = cur;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 46   : 		list->size++;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 47   : 		return;

	jmp	SHORT $LN1@LinkedList
$LN5@LinkedList:

; 48   : 	}
; 49   : 	if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN1@LinkedList

; 50   : 	{
; 51   : 		node->last = prev;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 52   : 		prev->next = node;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 53   : 		list->tail = node;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 54   : 		list->size++;

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@LinkedList:

; 55   : 		return;
; 56   : 	}
; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LinkedList_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\list.c
;	COMDAT _newLinkedList
_TEXT	SEGMENT
_initList$ = -8						; size = 4
_newLinkedList PROC					; COMDAT

; 6    : LinkedList* newLinkedList() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __0524722D_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 7    : 	LinkedList* initList = malloc(sizeof(LinkedList));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _initList$[ebp], eax

; 8    : 	initList->head = NULL;

	mov	eax, DWORD PTR _initList$[ebp]
	mov	DWORD PTR [eax], 0

; 9    : 	initList->tail = NULL;

	mov	eax, DWORD PTR _initList$[ebp]
	mov	DWORD PTR [eax+4], 0

; 10   : 	initList->size = 0;

	mov	eax, DWORD PTR _initList$[ebp]
	mov	DWORD PTR [eax+8], 0

; 11   : 	return initList;

	mov	eax, DWORD PTR _initList$[ebp]

; 12   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newLinkedList ENDP
_TEXT	ENDS
END
