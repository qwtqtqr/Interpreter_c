; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_05PKCPKOLM@undef@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8478A1A4_tokens@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__36662879_interpretAST@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKCPKOLM@undef@
CONST	SEGMENT
??_C@_05PKCPKOLM@undef@ DB 'undef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_interpretAST_int
PUBLIC	_interpretMainAST
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@ ; `string'
PUBLIC	??_C@_0CB@HLPGCBMK@?$FLERROR?$FN?5variable?5does?5not?5exist@ ; `string'
PUBLIC	??_C@_05IBFPJDFI@?$CFlld?6@			; `string'
PUBLIC	??_C@_04FHILBAAL@?$CFLf?6@			; `string'
PUBLIC	??_C@_06NIOGPBNO@false?6@			; `string'
PUBLIC	??_C@_05LFIOBDML@true?6@			; `string'
PUBLIC	??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__exit:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_symtable_add:PROC
EXTRN	_symtable_getItem:PROC
EXTRN	_newID_token:PROC
EXTRN	_symtable_removeItem:PROC
EXTRN	_pow:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allmul:PROC
EXTRN	__dtol3:PROC
EXTRN	__ftol2:PROC
EXTRN	__ltod3:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@
CONST	SEGMENT
??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@ DB '[S'
	DB	'YNTAX ERROR] variable ''%s'' has not been initialized', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LFIOBDML@true?6@
CONST	SEGMENT
??_C@_05LFIOBDML@true?6@ DB 'true', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIOGPBNO@false?6@
CONST	SEGMENT
??_C@_06NIOGPBNO@false?6@ DB 'false', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHILBAAL@?$CFLf?6@
CONST	SEGMENT
??_C@_04FHILBAAL@?$CFLf?6@ DB '%Lf', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IBFPJDFI@?$CFlld?6@
CONST	SEGMENT
??_C@_05IBFPJDFI@?$CFlld?6@ DB '%lld', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HLPGCBMK@?$FLERROR?$FN?5variable?5does?5not?5exist@
CONST	SEGMENT
??_C@_0CB@HLPGCBMK@?$FLERROR?$FN?5variable?5does?5not?5exist@ DB '[ERROR]'
	DB	' variable does not exist', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
CONST	SEGMENT
??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@ DB '[ERROR] invali'
	DB	'd datatype', 0aH, 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _RETURN_DATATYPE_NUM
_TEXT	SEGMENT
tv1247 = -1900						; size = 4
tv1145 = -1900						; size = 4
tv1046 = -1900						; size = 4
tv917 = -1900						; size = 4
tv820 = -1900						; size = 4
tv723 = -1900						; size = 4
tv626 = -1900						; size = 4
tv529 = -1900						; size = 4
tv2746 = -1896						; size = 8
tv2744 = -1896						; size = 8
tv2742 = -1896						; size = 8
tv2740 = -1896						; size = 8
tv2611 = -1896						; size = 4
tv2488 = -1896						; size = 4
tv2381 = -1896						; size = 4
tv2285 = -1896						; size = 4
tv2191 = -1896						; size = 4
tv2095 = -1896						; size = 4
tv1990 = -1896						; size = 4
tv1879 = -1896						; size = 4
tv1287 = -1896						; size = 4
tv1277 = -1896						; size = 4
tv1238 = -1896						; size = 4
tv1229 = -1896						; size = 4
tv1185 = -1896						; size = 4
tv1175 = -1896						; size = 4
tv1136 = -1896						; size = 4
tv1127 = -1896						; size = 4
tv2657 = -1892						; size = 4
tv2644 = -1892						; size = 4
tv2604 = -1892						; size = 4
tv2595 = -1892						; size = 4
tv2578 = -1892						; size = 4
tv2534 = -1892						; size = 4
tv2521 = -1892						; size = 4
tv2481 = -1892						; size = 4
tv2472 = -1892						; size = 4
tv2455 = -1892						; size = 4
tv2380 = -1892						; size = 4
tv2284 = -1892						; size = 4
tv2190 = -1892						; size = 4
tv2094 = -1892						; size = 4
tv1989 = -1892						; size = 4
tv1878 = -1892						; size = 4
tv1298 = -1892						; size = 4
tv1267 = -1892						; size = 4
tv1257 = -1892						; size = 4
tv1220 = -1892						; size = 4
tv1196 = -1892						; size = 4
tv1165 = -1892						; size = 4
tv1155 = -1892						; size = 4
tv1118 = -1892						; size = 4
tv1094 = -1892						; size = 4
tv1084 = -1892						; size = 4
tv1074 = -1892						; size = 4
tv1064 = -1892						; size = 4
tv1055 = -1892						; size = 4
tv1038 = -1892						; size = 4
tv1029 = -1892						; size = 4
tv1020 = -1892						; size = 4
tv997 = -1892						; size = 4
tv955 = -1892						; size = 4
tv945 = -1892						; size = 4
tv935 = -1892						; size = 4
tv926 = -1892						; size = 4
tv909 = -1892						; size = 4
tv900 = -1892						; size = 4
tv891 = -1892						; size = 4
tv868 = -1892						; size = 4
tv858 = -1892						; size = 4
tv848 = -1892						; size = 4
tv838 = -1892						; size = 4
tv829 = -1892						; size = 4
tv812 = -1892						; size = 4
tv803 = -1892						; size = 4
tv794 = -1892						; size = 4
tv771 = -1892						; size = 4
tv761 = -1892						; size = 4
tv751 = -1892						; size = 4
tv741 = -1892						; size = 4
tv732 = -1892						; size = 4
tv715 = -1892						; size = 4
tv706 = -1892						; size = 4
tv697 = -1892						; size = 4
tv674 = -1892						; size = 4
tv664 = -1892						; size = 4
tv654 = -1892						; size = 4
tv644 = -1892						; size = 4
tv635 = -1892						; size = 4
tv618 = -1892						; size = 4
tv609 = -1892						; size = 4
tv600 = -1892						; size = 4
tv577 = -1892						; size = 4
tv567 = -1892						; size = 4
tv557 = -1892						; size = 4
tv547 = -1892						; size = 4
tv538 = -1892						; size = 4
tv521 = -1892						; size = 4
tv512 = -1892						; size = 4
tv503 = -1892						; size = 4
tv69 = -1892						; size = 4
_res_int$1 = -1308					; size = 4
_res_long$ = -1296					; size = 8
_bool_val_2$2 = -1280					; size = 8
_bool_val_1$3 = -1264					; size = 8
_bool_val$4 = -1248					; size = 8
_bool_val$5 = -1232					; size = 8
_bool_val$6 = -1216					; size = 8
_bool_val$7 = -1200					; size = 8
_boolRes$8 = -1184					; size = 4
_bool_val_2$9 = -1172					; size = 8
_bool_val_1$10 = -1156					; size = 8
_bool_val$11 = -1140					; size = 8
_bool_val$12 = -1124					; size = 8
_bool_val$13 = -1108					; size = 8
_bool_val$14 = -1092					; size = 8
_boolRes$15 = -1076					; size = 4
_bool_val_2$16 = -1064					; size = 8
_bool_val_1$17 = -1048					; size = 8
_bool_val$18 = -1032					; size = 8
_bool_val$19 = -1016					; size = 8
_bool_val$20 = -1000					; size = 8
_bool_val$21 = -984					; size = 8
_boolRes$22 = -968					; size = 4
_bool_val_2$23 = -956					; size = 8
_bool_val_1$24 = -940					; size = 8
_bool_val$25 = -924					; size = 8
_bool_val$26 = -908					; size = 8
_bool_val$27 = -892					; size = 8
_bool_val$28 = -876					; size = 8
_boolRes$29 = -860					; size = 4
_bool_val_2$30 = -848					; size = 8
_bool_val_1$31 = -832					; size = 8
_bool_val$32 = -816					; size = 8
_bool_val$33 = -800					; size = 8
_bool_val$34 = -784					; size = 8
_bool_val$35 = -768					; size = 8
_boolRes$36 = -752					; size = 4
_bool_val_2$37 = -740					; size = 8
_bool_val_1$38 = -724					; size = 8
_bool_val$39 = -708					; size = 8
_bool_val$40 = -692					; size = 8
_bool_val$41 = -676					; size = 8
_bool_val$42 = -660					; size = 8
_boolRes$43 = -644					; size = 4
_bool_val_2$44 = -632					; size = 8
_bool_val_1$45 = -616					; size = 8
_bool_val$46 = -600					; size = 8
_bool_val$47 = -584					; size = 8
_bool_val$48 = -568					; size = 8
_bool_val$49 = -552					; size = 8
_boolRes$50 = -536					; size = 4
_bool_val_2$51 = -524					; size = 8
_bool_val_1$52 = -508					; size = 8
_bool_val$53 = -492					; size = 8
_bool_val$54 = -476					; size = 8
_bool_val$55 = -460					; size = 8
_bool_val$56 = -444					; size = 8
_boolRes$57 = -428					; size = 4
_result$58 = -416					; size = 4
_bool_val_2$59 = -404					; size = 8
_bool_val_1$60 = -388					; size = 8
_bool_val$61 = -372					; size = 8
_bool_val$62 = -356					; size = 8
_bool_val$63 = -340					; size = 8
_bool_val$64 = -324					; size = 8
_bool_val_2$65 = -308					; size = 8
_bool_val_1$66 = -292					; size = 8
_bool_val$67 = -276					; size = 8
_bool_val$68 = -260					; size = 8
_bool_val$69 = -244					; size = 8
_bool_val$70 = -228					; size = 8
_bool_val_2$71 = -212					; size = 8
_bool_val_1$72 = -196					; size = 8
_bool_val$73 = -180					; size = 8
_bool_val$74 = -164					; size = 8
_bool_val$75 = -148					; size = 8
_bool_val$76 = -132					; size = 8
_bool_val_2$77 = -116					; size = 8
_bool_val_1$78 = -100					; size = 8
_bool_val$79 = -84					; size = 8
_bool_val$80 = -68					; size = 8
_bool_val$81 = -52					; size = 8
_bool_val$82 = -36					; size = 8
_result$ = -20						; size = 4
_init$ = -8						; size = 4
_leftVal$ = 8						; size = 4
_rightVal$ = 12						; size = 4
_OP$ = 16						; size = 4
_dt_left$ = 20						; size = 4
_dt_right$ = 24						; size = 4
_RETURN_DATATYPE_NUM PROC				; COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 07 00
	00		 sub	 esp, 1900		; 0000076cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 94 f8 ff
	ff		 lea	 edi, DWORD PTR [ebp-1900]
  00012	b9 db 01 00 00	 mov	 ecx, 475		; 000001dbH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __36662879_interpretAST@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  : 	int init = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _init$[ebp], 0

; 120  : 	long double* result = malloc(sizeof(long double));

  0002f	8b f4		 mov	 esi, esp
  00031	6a 08		 push	 8
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00039	83 c4 04	 add	 esp, 4
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	89 45 ec	 mov	 DWORD PTR _result$[ebp], eax

; 121  : 	switch (OP)

  00046	8b 45 10	 mov	 eax, DWORD PTR _OP$[ebp]
  00049	89 85 9c f8 ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  0004f	83 bd 9c f8 ff
	ff 1e		 cmp	 DWORD PTR tv69[ebp], 30	; 0000001eH
  00056	0f 87 95 29 00
	00		 ja	 $LN2@RETURN_DAT
  0005c	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  00062	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN276@RETURN_DAT[ecx]
  00069	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN277@RETURN_DAT[edx*4]
$LN4@RETURN_DAT:

; 122  : 	{
; 123  : 	case TT_PLUS:   DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, +); break;

  00070	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00074	75 28		 jne	 SHORT $LN5@RETURN_DAT
  00076	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  0007a	75 22		 jne	 SHORT $LN5@RETURN_DAT
  0007c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0007f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00082	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00085	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00088	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0008c	f2 0f 58 00	 addsd	 xmm0, QWORD PTR [eax]
  00090	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00093	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00097	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN5@RETURN_DAT:
  0009e	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  000a2	75 30		 jne	 SHORT $LN6@RETURN_DAT
  000a4	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  000a8	75 2a		 jne	 SHORT $LN6@RETURN_DAT
  000aa	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  000ad	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b5	8b c8		 mov	 ecx, eax
  000b7	e8 00 00 00 00	 call	 __ltod3
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  000bf	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c2	f2 0f 58 02	 addsd	 xmm0, QWORD PTR [edx]
  000c6	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  000c9	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  000cd	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN6@RETURN_DAT:
  000d4	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  000d8	75 2e		 jne	 SHORT $LN7@RETURN_DAT
  000da	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  000de	75 28		 jne	 SHORT $LN7@RETURN_DAT
  000e0	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  000e3	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  000e9	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ec	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ee	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000f1	e8 00 00 00 00	 call	 __ltod3
  000f6	f2 0f 58 06	 addsd	 xmm0, QWORD PTR [esi]
  000fa	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  000fd	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00101	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN7@RETURN_DAT:
  00108	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0010c	75 4a		 jne	 SHORT $LN8@RETURN_DAT
  0010e	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00112	75 44		 jne	 SHORT $LN8@RETURN_DAT
  00114	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00117	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0011a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011f	8b c8		 mov	 ecx, eax
  00121	e8 00 00 00 00	 call	 __ltod3
  00126	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00129	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0012c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0012e	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00131	f2 0f 11 85 98
	f8 ff ff	 movsd	 QWORD PTR tv2740[ebp], xmm0
  00139	e8 00 00 00 00	 call	 __ltod3
  0013e	f2 0f 10 8d 98
	f8 ff ff	 movsd	 xmm1, QWORD PTR tv2740[ebp]
  00146	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0014a	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  0014d	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  00151	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN8@RETURN_DAT:
  00158	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0015c	75 32		 jne	 SHORT $LN9@RETURN_DAT
  0015e	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00162	75 2c		 jne	 SHORT $LN9@RETURN_DAT
  00164	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00167	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016a	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0016e	f2 0f 11 45 dc	 movsd	 QWORD PTR _bool_val$82[ebp], xmm0
  00173	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00176	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00179	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR _bool_val$82[ebp]
  0017e	f2 0f 58 01	 addsd	 xmm0, QWORD PTR [ecx]
  00182	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  00185	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  00189	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN9@RETURN_DAT:
  00190	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00194	75 32		 jne	 SHORT $LN10@RETURN_DAT
  00196	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0019a	75 2c		 jne	 SHORT $LN10@RETURN_DAT
  0019c	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0019f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a2	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  001a6	f2 0f 11 45 cc	 movsd	 QWORD PTR _bool_val$81[ebp], xmm0
  001ab	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  001ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b1	f2 0f 10 45 cc	 movsd	 xmm0, QWORD PTR _bool_val$81[ebp]
  001b6	f2 0f 58 01	 addsd	 xmm0, QWORD PTR [ecx]
  001ba	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  001bd	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  001c1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN10@RETURN_DAT:
  001c8	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  001cc	75 3a		 jne	 SHORT $LN11@RETURN_DAT
  001ce	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  001d2	75 34		 jne	 SHORT $LN11@RETURN_DAT
  001d4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  001d7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001da	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  001de	f2 0f 11 45 bc	 movsd	 QWORD PTR _bool_val$80[ebp], xmm0
  001e3	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  001e6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001e9	8b 01		 mov	 eax, DWORD PTR [ecx]
  001eb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001ee	8b c8		 mov	 ecx, eax
  001f0	e8 00 00 00 00	 call	 __ltod3
  001f5	f2 0f 58 45 bc	 addsd	 xmm0, QWORD PTR _bool_val$80[ebp]
  001fa	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  001fd	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00201	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN11@RETURN_DAT:
  00208	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0020c	75 3a		 jne	 SHORT $LN12@RETURN_DAT
  0020e	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00212	75 34		 jne	 SHORT $LN12@RETURN_DAT
  00214	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00217	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0021a	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0021e	f2 0f 11 45 ac	 movsd	 QWORD PTR _bool_val$79[ebp], xmm0
  00223	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00226	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00229	8b 01		 mov	 eax, DWORD PTR [ecx]
  0022b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0022e	8b c8		 mov	 ecx, eax
  00230	e8 00 00 00 00	 call	 __ltod3
  00235	f2 0f 58 45 ac	 addsd	 xmm0, QWORD PTR _bool_val$79[ebp]
  0023a	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  0023d	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00241	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN12@RETURN_DAT:
  00248	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0024c	75 3c		 jne	 SHORT $LN13@RETURN_DAT
  0024e	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00252	75 36		 jne	 SHORT $LN13@RETURN_DAT
  00254	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00257	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0025a	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0025e	f2 0f 11 45 9c	 movsd	 QWORD PTR _bool_val_1$78[ebp], xmm0
  00263	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00266	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00269	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0026d	f2 0f 11 45 8c	 movsd	 QWORD PTR _bool_val_2$77[ebp], xmm0
  00272	f2 0f 10 45 9c	 movsd	 xmm0, QWORD PTR _bool_val_1$78[ebp]
  00277	f2 0f 58 45 8c	 addsd	 xmm0, QWORD PTR _bool_val_2$77[ebp]
  0027c	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  0027f	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00283	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN13@RETURN_DAT:
  0028a	e9 62 27 00 00	 jmp	 $LN2@RETURN_DAT
$LN14@RETURN_DAT:

; 124  : 	case TT_MINUS:  DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, -); break;

  0028f	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00293	75 28		 jne	 SHORT $LN15@RETURN_DAT
  00295	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00299	75 22		 jne	 SHORT $LN15@RETURN_DAT
  0029b	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0029e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002a1	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  002a4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002a7	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  002ab	f2 0f 5c 00	 subsd	 xmm0, QWORD PTR [eax]
  002af	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  002b2	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  002b6	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN15@RETURN_DAT:
  002bd	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  002c1	75 30		 jne	 SHORT $LN16@RETURN_DAT
  002c3	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  002c7	75 2a		 jne	 SHORT $LN16@RETURN_DAT
  002c9	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  002cc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002cf	8b 01		 mov	 eax, DWORD PTR [ecx]
  002d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002d4	8b c8		 mov	 ecx, eax
  002d6	e8 00 00 00 00	 call	 __ltod3
  002db	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  002de	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002e1	f2 0f 5c 02	 subsd	 xmm0, QWORD PTR [edx]
  002e5	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  002e8	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  002ec	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN16@RETURN_DAT:
  002f3	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  002f7	75 32		 jne	 SHORT $LN17@RETURN_DAT
  002f9	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  002fd	75 2c		 jne	 SHORT $LN17@RETURN_DAT
  002ff	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00302	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00305	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00308	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0030b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0030d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00310	e8 00 00 00 00	 call	 __ltod3
  00315	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  00319	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0031d	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00320	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  00324	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN17@RETURN_DAT:
  0032b	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0032f	75 4a		 jne	 SHORT $LN18@RETURN_DAT
  00331	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00335	75 44		 jne	 SHORT $LN18@RETURN_DAT
  00337	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0033a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0033d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0033f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00342	8b c8		 mov	 ecx, eax
  00344	e8 00 00 00 00	 call	 __ltod3
  00349	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  0034c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0034f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00351	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00354	f2 0f 11 85 98
	f8 ff ff	 movsd	 QWORD PTR tv2742[ebp], xmm0
  0035c	e8 00 00 00 00	 call	 __ltod3
  00361	f2 0f 10 8d 98
	f8 ff ff	 movsd	 xmm1, QWORD PTR tv2742[ebp]
  00369	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0036d	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00370	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  00374	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN18@RETURN_DAT:
  0037b	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0037f	75 38		 jne	 SHORT $LN19@RETURN_DAT
  00381	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00385	75 32		 jne	 SHORT $LN19@RETURN_DAT
  00387	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0038a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0038d	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00391	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR _bool_val$76[ebp], xmm0
  00399	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0039c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0039f	f2 0f 10 85 7c
	ff ff ff	 movsd	 xmm0, QWORD PTR _bool_val$76[ebp]
  003a7	f2 0f 5c 01	 subsd	 xmm0, QWORD PTR [ecx]
  003ab	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  003ae	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  003b2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN19@RETURN_DAT:
  003b9	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  003bd	75 38		 jne	 SHORT $LN20@RETURN_DAT
  003bf	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  003c3	75 32		 jne	 SHORT $LN20@RETURN_DAT
  003c5	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  003c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003cb	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  003cf	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR _bool_val$75[ebp], xmm0
  003d7	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  003da	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003dd	f2 0f 10 85 6c
	ff ff ff	 movsd	 xmm0, QWORD PTR _bool_val$75[ebp]
  003e5	f2 0f 5c 01	 subsd	 xmm0, QWORD PTR [ecx]
  003e9	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  003ec	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  003f0	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN20@RETURN_DAT:
  003f7	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  003fb	75 44		 jne	 SHORT $LN21@RETURN_DAT
  003fd	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00401	75 3e		 jne	 SHORT $LN21@RETURN_DAT
  00403	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00406	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00409	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0040d	f2 0f 11 85 5c
	ff ff ff	 movsd	 QWORD PTR _bool_val$74[ebp], xmm0
  00415	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00418	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0041b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0041d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00420	8b c8		 mov	 ecx, eax
  00422	e8 00 00 00 00	 call	 __ltod3
  00427	f2 0f 10 8d 5c
	ff ff ff	 movsd	 xmm1, QWORD PTR _bool_val$74[ebp]
  0042f	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00433	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00436	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  0043a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN21@RETURN_DAT:
  00441	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00445	75 44		 jne	 SHORT $LN22@RETURN_DAT
  00447	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0044b	75 3e		 jne	 SHORT $LN22@RETURN_DAT
  0044d	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00450	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00453	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00457	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR _bool_val$73[ebp], xmm0
  0045f	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00462	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00465	8b 01		 mov	 eax, DWORD PTR [ecx]
  00467	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0046a	8b c8		 mov	 ecx, eax
  0046c	e8 00 00 00 00	 call	 __ltod3
  00471	f2 0f 10 8d 4c
	ff ff ff	 movsd	 xmm1, QWORD PTR _bool_val$73[ebp]
  00479	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0047d	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00480	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  00484	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN22@RETURN_DAT:
  0048b	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0048f	75 48		 jne	 SHORT $LN23@RETURN_DAT
  00491	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00495	75 42		 jne	 SHORT $LN23@RETURN_DAT
  00497	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0049a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0049d	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  004a1	f2 0f 11 85 3c
	ff ff ff	 movsd	 QWORD PTR _bool_val_1$72[ebp], xmm0
  004a9	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  004ac	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004af	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  004b3	f2 0f 11 85 2c
	ff ff ff	 movsd	 QWORD PTR _bool_val_2$71[ebp], xmm0
  004bb	f2 0f 10 85 3c
	ff ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$72[ebp]
  004c3	f2 0f 5c 85 2c
	ff ff ff	 subsd	 xmm0, QWORD PTR _bool_val_2$71[ebp]
  004cb	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  004ce	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  004d2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN23@RETURN_DAT:
  004d9	e9 13 25 00 00	 jmp	 $LN2@RETURN_DAT
$LN24@RETURN_DAT:

; 125  : 	case TT_MUL:    DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, *); break;

  004de	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  004e2	75 28		 jne	 SHORT $LN25@RETURN_DAT
  004e4	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  004e8	75 22		 jne	 SHORT $LN25@RETURN_DAT
  004ea	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  004ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004f0	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  004f3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  004f6	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  004fa	f2 0f 59 00	 mulsd	 xmm0, QWORD PTR [eax]
  004fe	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00501	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00505	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN25@RETURN_DAT:
  0050c	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00510	75 30		 jne	 SHORT $LN26@RETURN_DAT
  00512	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00516	75 2a		 jne	 SHORT $LN26@RETURN_DAT
  00518	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0051b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0051e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00520	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00523	8b c8		 mov	 ecx, eax
  00525	e8 00 00 00 00	 call	 __ltod3
  0052a	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  0052d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00530	f2 0f 59 02	 mulsd	 xmm0, QWORD PTR [edx]
  00534	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00537	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0053b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN26@RETURN_DAT:
  00542	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00546	75 2e		 jne	 SHORT $LN27@RETURN_DAT
  00548	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0054c	75 28		 jne	 SHORT $LN27@RETURN_DAT
  0054e	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00551	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00554	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00557	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0055a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0055c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0055f	e8 00 00 00 00	 call	 __ltod3
  00564	f2 0f 59 06	 mulsd	 xmm0, QWORD PTR [esi]
  00568	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  0056b	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0056f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN27@RETURN_DAT:
  00576	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0057a	75 4a		 jne	 SHORT $LN28@RETURN_DAT
  0057c	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00580	75 44		 jne	 SHORT $LN28@RETURN_DAT
  00582	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00585	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00588	8b 01		 mov	 eax, DWORD PTR [ecx]
  0058a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0058d	8b c8		 mov	 ecx, eax
  0058f	e8 00 00 00 00	 call	 __ltod3
  00594	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00597	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0059a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0059c	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0059f	f2 0f 11 85 98
	f8 ff ff	 movsd	 QWORD PTR tv2744[ebp], xmm0
  005a7	e8 00 00 00 00	 call	 __ltod3
  005ac	f2 0f 10 8d 98
	f8 ff ff	 movsd	 xmm1, QWORD PTR tv2744[ebp]
  005b4	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  005b8	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  005bb	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  005bf	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN28@RETURN_DAT:
  005c6	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  005ca	75 38		 jne	 SHORT $LN29@RETURN_DAT
  005cc	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  005d0	75 32		 jne	 SHORT $LN29@RETURN_DAT
  005d2	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  005d5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005d8	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  005dc	f2 0f 11 85 1c
	ff ff ff	 movsd	 QWORD PTR _bool_val$70[ebp], xmm0
  005e4	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  005e7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  005ea	f2 0f 10 85 1c
	ff ff ff	 movsd	 xmm0, QWORD PTR _bool_val$70[ebp]
  005f2	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  005f6	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  005f9	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  005fd	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN29@RETURN_DAT:
  00604	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00608	75 38		 jne	 SHORT $LN30@RETURN_DAT
  0060a	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0060e	75 32		 jne	 SHORT $LN30@RETURN_DAT
  00610	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00613	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00616	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0061a	f2 0f 11 85 0c
	ff ff ff	 movsd	 QWORD PTR _bool_val$69[ebp], xmm0
  00622	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00625	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00628	f2 0f 10 85 0c
	ff ff ff	 movsd	 xmm0, QWORD PTR _bool_val$69[ebp]
  00630	f2 0f 59 01	 mulsd	 xmm0, QWORD PTR [ecx]
  00634	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  00637	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  0063b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN30@RETURN_DAT:
  00642	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00646	75 40		 jne	 SHORT $LN31@RETURN_DAT
  00648	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0064c	75 3a		 jne	 SHORT $LN31@RETURN_DAT
  0064e	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00651	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00654	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00658	f2 0f 11 85 fc
	fe ff ff	 movsd	 QWORD PTR _bool_val$68[ebp], xmm0
  00660	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00663	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00666	8b 01		 mov	 eax, DWORD PTR [ecx]
  00668	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0066b	8b c8		 mov	 ecx, eax
  0066d	e8 00 00 00 00	 call	 __ltod3
  00672	f2 0f 59 85 fc
	fe ff ff	 mulsd	 xmm0, QWORD PTR _bool_val$68[ebp]
  0067a	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  0067d	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00681	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN31@RETURN_DAT:
  00688	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0068c	75 40		 jne	 SHORT $LN32@RETURN_DAT
  0068e	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00692	75 3a		 jne	 SHORT $LN32@RETURN_DAT
  00694	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00697	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0069a	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0069e	f2 0f 11 85 ec
	fe ff ff	 movsd	 QWORD PTR _bool_val$67[ebp], xmm0
  006a6	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  006a9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  006ac	8b 01		 mov	 eax, DWORD PTR [ecx]
  006ae	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  006b1	8b c8		 mov	 ecx, eax
  006b3	e8 00 00 00 00	 call	 __ltod3
  006b8	f2 0f 59 85 ec
	fe ff ff	 mulsd	 xmm0, QWORD PTR _bool_val$67[ebp]
  006c0	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  006c3	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  006c7	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN32@RETURN_DAT:
  006ce	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  006d2	75 48		 jne	 SHORT $LN33@RETURN_DAT
  006d4	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  006d8	75 42		 jne	 SHORT $LN33@RETURN_DAT
  006da	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  006dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006e0	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  006e4	f2 0f 11 85 dc
	fe ff ff	 movsd	 QWORD PTR _bool_val_1$66[ebp], xmm0
  006ec	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  006ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  006f2	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  006f6	f2 0f 11 85 cc
	fe ff ff	 movsd	 QWORD PTR _bool_val_2$65[ebp], xmm0
  006fe	f2 0f 10 85 dc
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$66[ebp]
  00706	f2 0f 59 85 cc
	fe ff ff	 mulsd	 xmm0, QWORD PTR _bool_val_2$65[ebp]
  0070e	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00711	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00715	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN33@RETURN_DAT:
  0071c	e9 d0 22 00 00	 jmp	 $LN2@RETURN_DAT
$LN34@RETURN_DAT:

; 126  : 	case TT_DIV:    DATATYPE_OPERATION_CALC(leftVal, rightVal, dt_left, dt_right, / ); break;

  00721	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00725	75 28		 jne	 SHORT $LN35@RETURN_DAT
  00727	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  0072b	75 22		 jne	 SHORT $LN35@RETURN_DAT
  0072d	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00730	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00733	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00736	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00739	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0073d	f2 0f 5e 00	 divsd	 xmm0, QWORD PTR [eax]
  00741	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00744	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  00748	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN35@RETURN_DAT:
  0074f	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00753	75 30		 jne	 SHORT $LN36@RETURN_DAT
  00755	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00759	75 2a		 jne	 SHORT $LN36@RETURN_DAT
  0075b	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0075e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00761	8b 01		 mov	 eax, DWORD PTR [ecx]
  00763	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00766	8b c8		 mov	 ecx, eax
  00768	e8 00 00 00 00	 call	 __ltod3
  0076d	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00770	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00773	f2 0f 5e 02	 divsd	 xmm0, QWORD PTR [edx]
  00777	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  0077a	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  0077e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN36@RETURN_DAT:
  00785	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00789	75 32		 jne	 SHORT $LN37@RETURN_DAT
  0078b	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0078f	75 2c		 jne	 SHORT $LN37@RETURN_DAT
  00791	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00794	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00797	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  0079a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0079d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0079f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  007a2	e8 00 00 00 00	 call	 __ltod3
  007a7	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  007ab	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007af	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  007b2	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  007b6	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN37@RETURN_DAT:
  007bd	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  007c1	75 4a		 jne	 SHORT $LN38@RETURN_DAT
  007c3	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  007c7	75 44		 jne	 SHORT $LN38@RETURN_DAT
  007c9	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  007cc	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  007cf	8b 01		 mov	 eax, DWORD PTR [ecx]
  007d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  007d4	8b c8		 mov	 ecx, eax
  007d6	e8 00 00 00 00	 call	 __ltod3
  007db	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  007de	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  007e1	8b 0a		 mov	 ecx, DWORD PTR [edx]
  007e3	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  007e6	f2 0f 11 85 98
	f8 ff ff	 movsd	 QWORD PTR tv2746[ebp], xmm0
  007ee	e8 00 00 00 00	 call	 __ltod3
  007f3	f2 0f 10 8d 98
	f8 ff ff	 movsd	 xmm1, QWORD PTR tv2746[ebp]
  007fb	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007ff	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00802	f2 0f 11 08	 movsd	 QWORD PTR [eax], xmm1
  00806	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN38@RETURN_DAT:
  0080d	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00811	75 38		 jne	 SHORT $LN39@RETURN_DAT
  00813	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00817	75 32		 jne	 SHORT $LN39@RETURN_DAT
  00819	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0081c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0081f	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00823	f2 0f 11 85 bc
	fe ff ff	 movsd	 QWORD PTR _bool_val$64[ebp], xmm0
  0082b	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0082e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00831	f2 0f 10 85 bc
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val$64[ebp]
  00839	f2 0f 5e 01	 divsd	 xmm0, QWORD PTR [ecx]
  0083d	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  00840	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  00844	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN39@RETURN_DAT:
  0084b	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  0084f	75 38		 jne	 SHORT $LN40@RETURN_DAT
  00851	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00855	75 32		 jne	 SHORT $LN40@RETURN_DAT
  00857	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0085a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0085d	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00861	f2 0f 11 85 ac
	fe ff ff	 movsd	 QWORD PTR _bool_val$63[ebp], xmm0
  00869	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0086c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0086f	f2 0f 10 85 ac
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val$63[ebp]
  00877	f2 0f 5e 01	 divsd	 xmm0, QWORD PTR [ecx]
  0087b	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp]
  0087e	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
  00882	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN40@RETURN_DAT:
  00889	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0088d	75 44		 jne	 SHORT $LN41@RETURN_DAT
  0088f	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00893	75 3e		 jne	 SHORT $LN41@RETURN_DAT
  00895	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00898	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0089b	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0089f	f2 0f 11 85 9c
	fe ff ff	 movsd	 QWORD PTR _bool_val$62[ebp], xmm0
  008a7	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  008aa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008ad	8b 01		 mov	 eax, DWORD PTR [ecx]
  008af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  008b2	8b c8		 mov	 ecx, eax
  008b4	e8 00 00 00 00	 call	 __ltod3
  008b9	f2 0f 10 8d 9c
	fe ff ff	 movsd	 xmm1, QWORD PTR _bool_val$62[ebp]
  008c1	f2 0f 5e c8	 divsd	 xmm1, xmm0
  008c5	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  008c8	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  008cc	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN41@RETURN_DAT:
  008d3	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  008d7	75 44		 jne	 SHORT $LN42@RETURN_DAT
  008d9	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  008dd	75 3e		 jne	 SHORT $LN42@RETURN_DAT
  008df	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  008e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008e5	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  008e9	f2 0f 11 85 8c
	fe ff ff	 movsd	 QWORD PTR _bool_val$61[ebp], xmm0
  008f1	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  008f4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  008f7	8b 01		 mov	 eax, DWORD PTR [ecx]
  008f9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  008fc	8b c8		 mov	 ecx, eax
  008fe	e8 00 00 00 00	 call	 __ltod3
  00903	f2 0f 10 8d 8c
	fe ff ff	 movsd	 xmm1, QWORD PTR _bool_val$61[ebp]
  0090b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0090f	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  00912	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  00916	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN42@RETURN_DAT:
  0091d	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00921	75 48		 jne	 SHORT $LN43@RETURN_DAT
  00923	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00927	75 42		 jne	 SHORT $LN43@RETURN_DAT
  00929	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0092c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0092f	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00933	f2 0f 11 85 7c
	fe ff ff	 movsd	 QWORD PTR _bool_val_1$60[ebp], xmm0
  0093b	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0093e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00941	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00945	f2 0f 11 85 6c
	fe ff ff	 movsd	 QWORD PTR _bool_val_2$59[ebp], xmm0
  0094d	f2 0f 10 85 7c
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$60[ebp]
  00955	f2 0f 5e 85 6c
	fe ff ff	 divsd	 xmm0, QWORD PTR _bool_val_2$59[ebp]
  0095d	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00960	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00964	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN43@RETURN_DAT:
  0096b	e9 81 20 00 00	 jmp	 $LN2@RETURN_DAT
$LN44@RETURN_DAT:

; 127  : 
; 128  : 	case TT_POW:
; 129  : 		if (dt_left == DT_FLOAT && dt_right == DT_FLOAT)

  00970	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00974	75 3e		 jne	 SHORT $LN45@RETURN_DAT
  00976	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  0097a	75 38		 jne	 SHORT $LN45@RETURN_DAT

; 130  : 		{
; 131  : 			*result = pow(*(leftVal->doubleVal), *(rightVal->doubleVal));

  0097c	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0097f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00982	83 ec 08	 sub	 esp, 8
  00985	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00989	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0098e	8b 55 08	 mov	 edx, DWORD PTR _leftVal$[ebp]
  00991	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00994	83 ec 08	 sub	 esp, 8
  00997	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0099b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009a0	e8 00 00 00 00	 call	 _pow
  009a5	83 c4 10	 add	 esp, 16			; 00000010H
  009a8	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  009ab	dd 19		 fstp	 QWORD PTR [ecx]

; 132  : 			init = 1;

  009ad	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN45@RETURN_DAT:

; 133  : 		}
; 134  : 		if (dt_left == DT_INT && dt_right == DT_FLOAT)

  009b4	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  009b8	75 44		 jne	 SHORT $LN46@RETURN_DAT
  009ba	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  009be	75 3e		 jne	 SHORT $LN46@RETURN_DAT

; 135  : 		{
; 136  : 			*result = pow(*(leftVal->intVal), *(rightVal->doubleVal));

  009c0	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  009c3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  009c6	83 ec 08	 sub	 esp, 8
  009c9	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  009cd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009d2	8b 55 08	 mov	 edx, DWORD PTR _leftVal$[ebp]
  009d5	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  009d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  009da	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  009dd	e8 00 00 00 00	 call	 __ltod3
  009e2	83 ec 08	 sub	 esp, 8
  009e5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009ea	e8 00 00 00 00	 call	 _pow
  009ef	83 c4 10	 add	 esp, 16			; 00000010H
  009f2	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  009f5	dd 19		 fstp	 QWORD PTR [ecx]

; 137  : 			init = 1;

  009f7	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN46@RETURN_DAT:

; 138  : 		}
; 139  : 		if (dt_left == DT_FLOAT && dt_right == DT_INT)

  009fe	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00a02	75 46		 jne	 SHORT $LN47@RETURN_DAT
  00a04	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00a08	75 40		 jne	 SHORT $LN47@RETURN_DAT

; 140  : 		{
; 141  : 			*result = pow(*(leftVal->doubleVal), *(rightVal->intVal));

  00a0a	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00a0d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a10	8b 01		 mov	 eax, DWORD PTR [ecx]
  00a12	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00a15	8b c8		 mov	 ecx, eax
  00a17	e8 00 00 00 00	 call	 __ltod3
  00a1c	83 ec 08	 sub	 esp, 8
  00a1f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a24	8b 4d 08	 mov	 ecx, DWORD PTR _leftVal$[ebp]
  00a27	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a2a	83 ec 08	 sub	 esp, 8
  00a2d	f2 0f 10 02	 movsd	 xmm0, QWORD PTR [edx]
  00a31	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a36	e8 00 00 00 00	 call	 _pow
  00a3b	83 c4 10	 add	 esp, 16			; 00000010H
  00a3e	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  00a41	dd 18		 fstp	 QWORD PTR [eax]

; 142  : 			init = 1;

  00a43	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN47@RETURN_DAT:

; 143  : 		}
; 144  : 		if (dt_left == DT_INT && dt_right == DT_INT)

  00a4a	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00a4e	0f 85 bc 00 00
	00		 jne	 $LN48@RETURN_DAT
  00a54	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00a58	0f 85 b2 00 00
	00		 jne	 $LN48@RETURN_DAT

; 145  : 		{
; 146  : 			long long* result = malloc(sizeof(long long));

  00a5e	8b f4		 mov	 esi, esp
  00a60	6a 08		 push	 8
  00a62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00a68	83 c4 04	 add	 esp, 4
  00a6b	3b f4		 cmp	 esi, esp
  00a6d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a72	89 85 60 fe ff
	ff		 mov	 DWORD PTR _result$58[ebp], eax

; 147  : 			*result = pow(*(leftVal->intVal), *(rightVal->intVal));

  00a78	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00a7b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00a7e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00a80	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00a83	8b c8		 mov	 ecx, eax
  00a85	e8 00 00 00 00	 call	 __ltod3
  00a8a	83 ec 08	 sub	 esp, 8
  00a8d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a92	8b 4d 08	 mov	 ecx, DWORD PTR _leftVal$[ebp]
  00a95	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a98	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00a9a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00a9d	e8 00 00 00 00	 call	 __ltod3
  00aa2	83 ec 08	 sub	 esp, 8
  00aa5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00aaa	e8 00 00 00 00	 call	 _pow
  00aaf	83 c4 10	 add	 esp, 16			; 00000010H
  00ab2	e8 00 00 00 00	 call	 __ftol2
  00ab7	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR _result$58[ebp]
  00abd	89 01		 mov	 DWORD PTR [ecx], eax
  00abf	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 148  : 			free(leftVal), free(rightVal);

  00ac2	8b f4		 mov	 esi, esp
  00ac4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00ac7	50		 push	 eax
  00ac8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00ace	83 c4 04	 add	 esp, 4
  00ad1	3b f4		 cmp	 esi, esp
  00ad3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ad8	8b f4		 mov	 esi, esp
  00ada	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00add	51		 push	 ecx
  00ade	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00ae4	83 c4 04	 add	 esp, 4
  00ae7	3b f4		 cmp	 esi, esp
  00ae9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 			return new_DATA_STRUCT(NULL, NULL, NULL, result, NULL, DT_INT, 1);

  00aee	6a 01		 push	 1
  00af0	6a 00		 push	 0
  00af2	6a 00		 push	 0
  00af4	8b 85 60 fe ff
	ff		 mov	 eax, DWORD PTR _result$58[ebp]
  00afa	99		 cdq
  00afb	52		 push	 edx
  00afc	50		 push	 eax
  00afd	6a 00		 push	 0
  00aff	6a 00		 push	 0
  00b01	6a 00		 push	 0
  00b03	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  00b08	83 c4 20	 add	 esp, 32			; 00000020H
  00b0b	e9 f3 1f 00 00	 jmp	 $LN1@RETURN_DAT
$LN48@RETURN_DAT:

; 150  : 		}
; 151  : 		break;

  00b10	e9 dc 1e 00 00	 jmp	 $LN2@RETURN_DAT
$LN49@RETURN_DAT:

; 152  : 
; 153  : 	case TT_EQUALS_CMP:      DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, == );

  00b15	8b f4		 mov	 esi, esp
  00b17	6a 04		 push	 4
  00b19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00b1f	83 c4 04	 add	 esp, 4
  00b22	3b f4		 cmp	 esi, esp
  00b24	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b29	89 85 54 fe ff
	ff		 mov	 DWORD PTR _boolRes$57[ebp], eax
  00b2f	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _boolRes$57[ebp]
  00b35	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00b3b	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00b3f	75 44		 jne	 SHORT $LN50@RETURN_DAT
  00b41	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00b45	75 3e		 jne	 SHORT $LN50@RETURN_DAT
  00b47	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00b4a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00b4d	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00b50	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b53	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00b57	66 0f 2e 00	 ucomisd xmm0, QWORD PTR [eax]
  00b5b	9f		 lahf
  00b5c	f6 c4 44	 test	 ah, 68			; 00000044H
  00b5f	7a 0c		 jp	 SHORT $LN132@RETURN_DAT
  00b61	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv503[ebp], 1
  00b6b	eb 0a		 jmp	 SHORT $LN133@RETURN_DAT
$LN132@RETURN_DAT:
  00b6d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv503[ebp], 0
$LN133@RETURN_DAT:
  00b77	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _boolRes$57[ebp]
  00b7d	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv503[ebp]
  00b83	89 11		 mov	 DWORD PTR [ecx], edx
$LN50@RETURN_DAT:
  00b85	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00b89	75 4c		 jne	 SHORT $LN51@RETURN_DAT
  00b8b	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00b8f	75 46		 jne	 SHORT $LN51@RETURN_DAT
  00b91	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00b94	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b97	8b 01		 mov	 eax, DWORD PTR [ecx]
  00b99	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00b9c	8b c8		 mov	 ecx, eax
  00b9e	e8 00 00 00 00	 call	 __ltod3
  00ba3	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00ba6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00ba9	66 0f 2e 02	 ucomisd xmm0, QWORD PTR [edx]
  00bad	9f		 lahf
  00bae	f6 c4 44	 test	 ah, 68			; 00000044H
  00bb1	7a 0c		 jp	 SHORT $LN134@RETURN_DAT
  00bb3	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv512[ebp], 1
  00bbd	eb 0a		 jmp	 SHORT $LN135@RETURN_DAT
$LN134@RETURN_DAT:
  00bbf	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv512[ebp], 0
$LN135@RETURN_DAT:
  00bc9	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _boolRes$57[ebp]
  00bcf	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv512[ebp]
  00bd5	89 08		 mov	 DWORD PTR [eax], ecx
$LN51@RETURN_DAT:
  00bd7	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00bdb	75 4e		 jne	 SHORT $LN52@RETURN_DAT
  00bdd	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00be1	75 48		 jne	 SHORT $LN52@RETURN_DAT
  00be3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00be6	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00be9	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00bec	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00bef	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00bf1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00bf4	e8 00 00 00 00	 call	 __ltod3
  00bf9	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  00bfd	66 0f 2e c8	 ucomisd xmm1, xmm0
  00c01	9f		 lahf
  00c02	f6 c4 44	 test	 ah, 68			; 00000044H
  00c05	7a 0c		 jp	 SHORT $LN136@RETURN_DAT
  00c07	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv521[ebp], 1
  00c11	eb 0a		 jmp	 SHORT $LN137@RETURN_DAT
$LN136@RETURN_DAT:
  00c13	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv521[ebp], 0
$LN137@RETURN_DAT:
  00c1d	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _boolRes$57[ebp]
  00c23	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv521[ebp]
  00c29	89 08		 mov	 DWORD PTR [eax], ecx
$LN52@RETURN_DAT:
  00c2b	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00c2f	75 68		 jne	 SHORT $LN53@RETURN_DAT
  00c31	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00c35	75 62		 jne	 SHORT $LN53@RETURN_DAT
  00c37	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00c3a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00c3d	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00c40	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00c43	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv1878[ebp], ecx
  00c49	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv1879[ebp], eax
  00c4f	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1878[ebp]
  00c55	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1879[ebp]
  00c5b	8b 01		 mov	 eax, DWORD PTR [ecx]
  00c5d	3b 02		 cmp	 eax, DWORD PTR [edx]
  00c5f	75 20		 jne	 SHORT $LN138@RETURN_DAT
  00c61	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1878[ebp]
  00c67	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1879[ebp]
  00c6d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00c70	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00c73	75 0c		 jne	 SHORT $LN138@RETURN_DAT
  00c75	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv529[ebp], 1
  00c7f	eb 0a		 jmp	 SHORT $LN139@RETURN_DAT
$LN138@RETURN_DAT:
  00c81	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv529[ebp], 0
$LN139@RETURN_DAT:
  00c8b	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _boolRes$57[ebp]
  00c91	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv529[ebp]
  00c97	89 11		 mov	 DWORD PTR [ecx], edx
$LN53@RETURN_DAT:
  00c99	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00c9d	75 54		 jne	 SHORT $LN54@RETURN_DAT
  00c9f	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00ca3	75 4e		 jne	 SHORT $LN54@RETURN_DAT
  00ca5	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00ca8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00cab	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00caf	f2 0f 11 85 44
	fe ff ff	 movsd	 QWORD PTR _bool_val$56[ebp], xmm0
  00cb7	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00cba	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00cbd	f2 0f 10 85 44
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val$56[ebp]
  00cc5	66 0f 2e 01	 ucomisd xmm0, QWORD PTR [ecx]
  00cc9	9f		 lahf
  00cca	f6 c4 44	 test	 ah, 68			; 00000044H
  00ccd	7a 0c		 jp	 SHORT $LN140@RETURN_DAT
  00ccf	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv538[ebp], 1
  00cd9	eb 0a		 jmp	 SHORT $LN141@RETURN_DAT
$LN140@RETURN_DAT:
  00cdb	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv538[ebp], 0
$LN141@RETURN_DAT:
  00ce5	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _boolRes$57[ebp]
  00ceb	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv538[ebp]
  00cf1	89 02		 mov	 DWORD PTR [edx], eax
$LN54@RETURN_DAT:
  00cf3	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00cf7	75 54		 jne	 SHORT $LN55@RETURN_DAT
  00cf9	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00cfd	75 4e		 jne	 SHORT $LN55@RETURN_DAT
  00cff	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00d02	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d05	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00d09	f2 0f 11 85 34
	fe ff ff	 movsd	 QWORD PTR _bool_val$55[ebp], xmm0
  00d11	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00d14	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00d17	f2 0f 10 85 34
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val$55[ebp]
  00d1f	66 0f 2e 01	 ucomisd xmm0, QWORD PTR [ecx]
  00d23	9f		 lahf
  00d24	f6 c4 44	 test	 ah, 68			; 00000044H
  00d27	7a 0c		 jp	 SHORT $LN142@RETURN_DAT
  00d29	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv547[ebp], 1
  00d33	eb 0a		 jmp	 SHORT $LN143@RETURN_DAT
$LN142@RETURN_DAT:
  00d35	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv547[ebp], 0
$LN143@RETURN_DAT:
  00d3f	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _boolRes$57[ebp]
  00d45	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv547[ebp]
  00d4b	89 02		 mov	 DWORD PTR [edx], eax
$LN55@RETURN_DAT:
  00d4d	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00d51	75 60		 jne	 SHORT $LN56@RETURN_DAT
  00d53	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00d57	75 5a		 jne	 SHORT $LN56@RETURN_DAT
  00d59	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00d5c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d5f	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00d63	f2 0f 11 85 24
	fe ff ff	 movsd	 QWORD PTR _bool_val$54[ebp], xmm0
  00d6b	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00d6e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00d71	8b 01		 mov	 eax, DWORD PTR [ecx]
  00d73	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00d76	8b c8		 mov	 ecx, eax
  00d78	e8 00 00 00 00	 call	 __ltod3
  00d7d	f2 0f 10 8d 24
	fe ff ff	 movsd	 xmm1, QWORD PTR _bool_val$54[ebp]
  00d85	66 0f 2e c8	 ucomisd xmm1, xmm0
  00d89	9f		 lahf
  00d8a	f6 c4 44	 test	 ah, 68			; 00000044H
  00d8d	7a 0c		 jp	 SHORT $LN144@RETURN_DAT
  00d8f	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv557[ebp], 1
  00d99	eb 0a		 jmp	 SHORT $LN145@RETURN_DAT
$LN144@RETURN_DAT:
  00d9b	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv557[ebp], 0
$LN145@RETURN_DAT:
  00da5	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _boolRes$57[ebp]
  00dab	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv557[ebp]
  00db1	89 11		 mov	 DWORD PTR [ecx], edx
$LN56@RETURN_DAT:
  00db3	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00db7	75 60		 jne	 SHORT $LN57@RETURN_DAT
  00db9	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00dbd	75 5a		 jne	 SHORT $LN57@RETURN_DAT
  00dbf	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00dc2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00dc5	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00dc9	f2 0f 11 85 14
	fe ff ff	 movsd	 QWORD PTR _bool_val$53[ebp], xmm0
  00dd1	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00dd4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00dd7	8b 01		 mov	 eax, DWORD PTR [ecx]
  00dd9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00ddc	8b c8		 mov	 ecx, eax
  00dde	e8 00 00 00 00	 call	 __ltod3
  00de3	f2 0f 10 8d 14
	fe ff ff	 movsd	 xmm1, QWORD PTR _bool_val$53[ebp]
  00deb	66 0f 2e c8	 ucomisd xmm1, xmm0
  00def	9f		 lahf
  00df0	f6 c4 44	 test	 ah, 68			; 00000044H
  00df3	7a 0c		 jp	 SHORT $LN146@RETURN_DAT
  00df5	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv567[ebp], 1
  00dff	eb 0a		 jmp	 SHORT $LN147@RETURN_DAT
$LN146@RETURN_DAT:
  00e01	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv567[ebp], 0
$LN147@RETURN_DAT:
  00e0b	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _boolRes$57[ebp]
  00e11	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv567[ebp]
  00e17	89 11		 mov	 DWORD PTR [ecx], edx
$LN57@RETURN_DAT:
  00e19	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  00e1d	75 6b		 jne	 SHORT $LN58@RETURN_DAT
  00e1f	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  00e23	75 65		 jne	 SHORT $LN58@RETURN_DAT
  00e25	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00e28	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e2b	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00e2f	f2 0f 11 85 04
	fe ff ff	 movsd	 QWORD PTR _bool_val_1$52[ebp], xmm0
  00e37	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  00e3a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00e3d	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  00e41	f2 0f 11 85 f4
	fd ff ff	 movsd	 QWORD PTR _bool_val_2$51[ebp], xmm0
  00e49	f2 0f 10 85 04
	fe ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$52[ebp]
  00e51	66 0f 2e 85 f4
	fd ff ff	 ucomisd xmm0, QWORD PTR _bool_val_2$51[ebp]
  00e59	9f		 lahf
  00e5a	f6 c4 44	 test	 ah, 68			; 00000044H
  00e5d	7a 0c		 jp	 SHORT $LN148@RETURN_DAT
  00e5f	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv577[ebp], 1
  00e69	eb 0a		 jmp	 SHORT $LN149@RETURN_DAT
$LN148@RETURN_DAT:
  00e6b	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv577[ebp], 0
$LN149@RETURN_DAT:
  00e75	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _boolRes$57[ebp]
  00e7b	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv577[ebp]
  00e81	89 08		 mov	 DWORD PTR [eax], ecx
  00e83	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN58@RETURN_DAT:
  00e8a	8b f4		 mov	 esi, esp
  00e8c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00e8f	50		 push	 eax
  00e90	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00e96	83 c4 04	 add	 esp, 4
  00e99	3b f4		 cmp	 esi, esp
  00e9b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ea0	8b f4		 mov	 esi, esp
  00ea2	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00ea5	51		 push	 ecx
  00ea6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00eac	83 c4 04	 add	 esp, 4
  00eaf	3b f4		 cmp	 esi, esp
  00eb1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eb6	6a 01		 push	 1
  00eb8	6a 05		 push	 5
  00eba	6a 00		 push	 0
  00ebc	6a 00		 push	 0
  00ebe	6a 00		 push	 0
  00ec0	6a 00		 push	 0
  00ec2	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _boolRes$57[ebp]
  00ec8	50		 push	 eax
  00ec9	6a 00		 push	 0
  00ecb	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  00ed0	83 c4 20	 add	 esp, 32			; 00000020H
  00ed3	e9 2b 1c 00 00	 jmp	 $LN1@RETURN_DAT
$LN59@RETURN_DAT:

; 154  : 	case TT_NOT_EQUALS:      DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, != );

  00ed8	8b f4		 mov	 esi, esp
  00eda	6a 04		 push	 4
  00edc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00ee2	83 c4 04	 add	 esp, 4
  00ee5	3b f4		 cmp	 esi, esp
  00ee7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eec	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _boolRes$50[ebp], eax
  00ef2	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$50[ebp]
  00ef8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00efe	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00f02	75 44		 jne	 SHORT $LN60@RETURN_DAT
  00f04	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00f08	75 3e		 jne	 SHORT $LN60@RETURN_DAT
  00f0a	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00f0d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00f10	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00f13	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00f16	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00f1a	66 0f 2e 00	 ucomisd xmm0, QWORD PTR [eax]
  00f1e	9f		 lahf
  00f1f	f6 c4 44	 test	 ah, 68			; 00000044H
  00f22	7b 0c		 jnp	 SHORT $LN150@RETURN_DAT
  00f24	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv600[ebp], 1
  00f2e	eb 0a		 jmp	 SHORT $LN151@RETURN_DAT
$LN150@RETURN_DAT:
  00f30	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], 0
$LN151@RETURN_DAT:
  00f3a	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$50[ebp]
  00f40	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv600[ebp]
  00f46	89 11		 mov	 DWORD PTR [ecx], edx
$LN60@RETURN_DAT:
  00f48	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00f4c	75 4c		 jne	 SHORT $LN61@RETURN_DAT
  00f4e	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  00f52	75 46		 jne	 SHORT $LN61@RETURN_DAT
  00f54	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00f57	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00f5a	8b 01		 mov	 eax, DWORD PTR [ecx]
  00f5c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00f5f	8b c8		 mov	 ecx, eax
  00f61	e8 00 00 00 00	 call	 __ltod3
  00f66	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00f69	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00f6c	66 0f 2e 02	 ucomisd xmm0, QWORD PTR [edx]
  00f70	9f		 lahf
  00f71	f6 c4 44	 test	 ah, 68			; 00000044H
  00f74	7b 0c		 jnp	 SHORT $LN152@RETURN_DAT
  00f76	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv609[ebp], 1
  00f80	eb 0a		 jmp	 SHORT $LN153@RETURN_DAT
$LN152@RETURN_DAT:
  00f82	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN153@RETURN_DAT:
  00f8c	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$50[ebp]
  00f92	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv609[ebp]
  00f98	89 08		 mov	 DWORD PTR [eax], ecx
$LN61@RETURN_DAT:
  00f9a	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  00f9e	75 4e		 jne	 SHORT $LN62@RETURN_DAT
  00fa0	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00fa4	75 48		 jne	 SHORT $LN62@RETURN_DAT
  00fa6	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00fa9	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00fac	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  00faf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00fb2	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00fb4	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00fb7	e8 00 00 00 00	 call	 __ltod3
  00fbc	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  00fc0	66 0f 2e c8	 ucomisd xmm1, xmm0
  00fc4	9f		 lahf
  00fc5	f6 c4 44	 test	 ah, 68			; 00000044H
  00fc8	7b 0c		 jnp	 SHORT $LN154@RETURN_DAT
  00fca	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv618[ebp], 1
  00fd4	eb 0a		 jmp	 SHORT $LN155@RETURN_DAT
$LN154@RETURN_DAT:
  00fd6	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv618[ebp], 0
$LN155@RETURN_DAT:
  00fe0	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$50[ebp]
  00fe6	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv618[ebp]
  00fec	89 08		 mov	 DWORD PTR [eax], ecx
$LN62@RETURN_DAT:
  00fee	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  00ff2	75 68		 jne	 SHORT $LN63@RETURN_DAT
  00ff4	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  00ff8	75 62		 jne	 SHORT $LN63@RETURN_DAT
  00ffa	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00ffd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01000	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  01003	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01006	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv1989[ebp], ecx
  0100c	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv1990[ebp], eax
  01012	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1989[ebp]
  01018	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1990[ebp]
  0101e	8b 01		 mov	 eax, DWORD PTR [ecx]
  01020	3b 02		 cmp	 eax, DWORD PTR [edx]
  01022	75 14		 jne	 SHORT $LN278@RETURN_DAT
  01024	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1989[ebp]
  0102a	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1990[ebp]
  01030	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  01033	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01036	74 0c		 je	 SHORT $LN156@RETURN_DAT
$LN278@RETURN_DAT:
  01038	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv626[ebp], 1
  01042	eb 0a		 jmp	 SHORT $LN157@RETURN_DAT
$LN156@RETURN_DAT:
  01044	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv626[ebp], 0
$LN157@RETURN_DAT:
  0104e	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$50[ebp]
  01054	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv626[ebp]
  0105a	89 11		 mov	 DWORD PTR [ecx], edx
$LN63@RETURN_DAT:
  0105c	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01060	75 54		 jne	 SHORT $LN64@RETURN_DAT
  01062	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01066	75 4e		 jne	 SHORT $LN64@RETURN_DAT
  01068	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0106b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0106e	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01072	f2 0f 11 85 d8
	fd ff ff	 movsd	 QWORD PTR _bool_val$49[ebp], xmm0
  0107a	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0107d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01080	f2 0f 10 85 d8
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val$49[ebp]
  01088	66 0f 2e 01	 ucomisd xmm0, QWORD PTR [ecx]
  0108c	9f		 lahf
  0108d	f6 c4 44	 test	 ah, 68			; 00000044H
  01090	7b 0c		 jnp	 SHORT $LN158@RETURN_DAT
  01092	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv635[ebp], 1
  0109c	eb 0a		 jmp	 SHORT $LN159@RETURN_DAT
$LN158@RETURN_DAT:
  0109e	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv635[ebp], 0
$LN159@RETURN_DAT:
  010a8	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$50[ebp]
  010ae	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv635[ebp]
  010b4	89 02		 mov	 DWORD PTR [edx], eax
$LN64@RETURN_DAT:
  010b6	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  010ba	75 54		 jne	 SHORT $LN65@RETURN_DAT
  010bc	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  010c0	75 4e		 jne	 SHORT $LN65@RETURN_DAT
  010c2	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  010c5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  010c8	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  010cc	f2 0f 11 85 c8
	fd ff ff	 movsd	 QWORD PTR _bool_val$48[ebp], xmm0
  010d4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  010d7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  010da	f2 0f 10 85 c8
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val$48[ebp]
  010e2	66 0f 2e 01	 ucomisd xmm0, QWORD PTR [ecx]
  010e6	9f		 lahf
  010e7	f6 c4 44	 test	 ah, 68			; 00000044H
  010ea	7b 0c		 jnp	 SHORT $LN160@RETURN_DAT
  010ec	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv644[ebp], 1
  010f6	eb 0a		 jmp	 SHORT $LN161@RETURN_DAT
$LN160@RETURN_DAT:
  010f8	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv644[ebp], 0
$LN161@RETURN_DAT:
  01102	8b 95 e8 fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$50[ebp]
  01108	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv644[ebp]
  0110e	89 02		 mov	 DWORD PTR [edx], eax
$LN65@RETURN_DAT:
  01110	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01114	75 60		 jne	 SHORT $LN66@RETURN_DAT
  01116	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0111a	75 5a		 jne	 SHORT $LN66@RETURN_DAT
  0111c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0111f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01122	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01126	f2 0f 11 85 b8
	fd ff ff	 movsd	 QWORD PTR _bool_val$47[ebp], xmm0
  0112e	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01131	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01134	8b 01		 mov	 eax, DWORD PTR [ecx]
  01136	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01139	8b c8		 mov	 ecx, eax
  0113b	e8 00 00 00 00	 call	 __ltod3
  01140	f2 0f 10 8d b8
	fd ff ff	 movsd	 xmm1, QWORD PTR _bool_val$47[ebp]
  01148	66 0f 2e c8	 ucomisd xmm1, xmm0
  0114c	9f		 lahf
  0114d	f6 c4 44	 test	 ah, 68			; 00000044H
  01150	7b 0c		 jnp	 SHORT $LN162@RETURN_DAT
  01152	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv654[ebp], 1
  0115c	eb 0a		 jmp	 SHORT $LN163@RETURN_DAT
$LN162@RETURN_DAT:
  0115e	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv654[ebp], 0
$LN163@RETURN_DAT:
  01168	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$50[ebp]
  0116e	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv654[ebp]
  01174	89 11		 mov	 DWORD PTR [ecx], edx
$LN66@RETURN_DAT:
  01176	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0117a	75 60		 jne	 SHORT $LN67@RETURN_DAT
  0117c	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01180	75 5a		 jne	 SHORT $LN67@RETURN_DAT
  01182	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01185	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01188	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0118c	f2 0f 11 85 a8
	fd ff ff	 movsd	 QWORD PTR _bool_val$46[ebp], xmm0
  01194	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01197	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0119a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0119c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0119f	8b c8		 mov	 ecx, eax
  011a1	e8 00 00 00 00	 call	 __ltod3
  011a6	f2 0f 10 8d a8
	fd ff ff	 movsd	 xmm1, QWORD PTR _bool_val$46[ebp]
  011ae	66 0f 2e c8	 ucomisd xmm1, xmm0
  011b2	9f		 lahf
  011b3	f6 c4 44	 test	 ah, 68			; 00000044H
  011b6	7b 0c		 jnp	 SHORT $LN164@RETURN_DAT
  011b8	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv664[ebp], 1
  011c2	eb 0a		 jmp	 SHORT $LN165@RETURN_DAT
$LN164@RETURN_DAT:
  011c4	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv664[ebp], 0
$LN165@RETURN_DAT:
  011ce	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$50[ebp]
  011d4	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv664[ebp]
  011da	89 11		 mov	 DWORD PTR [ecx], edx
$LN67@RETURN_DAT:
  011dc	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  011e0	75 6b		 jne	 SHORT $LN68@RETURN_DAT
  011e2	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  011e6	75 65		 jne	 SHORT $LN68@RETURN_DAT
  011e8	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  011eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  011ee	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  011f2	f2 0f 11 85 98
	fd ff ff	 movsd	 QWORD PTR _bool_val_1$45[ebp], xmm0
  011fa	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  011fd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01200	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01204	f2 0f 11 85 88
	fd ff ff	 movsd	 QWORD PTR _bool_val_2$44[ebp], xmm0
  0120c	f2 0f 10 85 98
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$45[ebp]
  01214	66 0f 2e 85 88
	fd ff ff	 ucomisd xmm0, QWORD PTR _bool_val_2$44[ebp]
  0121c	9f		 lahf
  0121d	f6 c4 44	 test	 ah, 68			; 00000044H
  01220	7b 0c		 jnp	 SHORT $LN166@RETURN_DAT
  01222	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv674[ebp], 1
  0122c	eb 0a		 jmp	 SHORT $LN167@RETURN_DAT
$LN166@RETURN_DAT:
  0122e	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv674[ebp], 0
$LN167@RETURN_DAT:
  01238	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$50[ebp]
  0123e	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv674[ebp]
  01244	89 08		 mov	 DWORD PTR [eax], ecx
  01246	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN68@RETURN_DAT:
  0124d	8b f4		 mov	 esi, esp
  0124f	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01252	50		 push	 eax
  01253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  01259	83 c4 04	 add	 esp, 4
  0125c	3b f4		 cmp	 esi, esp
  0125e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01263	8b f4		 mov	 esi, esp
  01265	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01268	51		 push	 ecx
  01269	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0126f	83 c4 04	 add	 esp, 4
  01272	3b f4		 cmp	 esi, esp
  01274	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01279	6a 01		 push	 1
  0127b	6a 05		 push	 5
  0127d	6a 00		 push	 0
  0127f	6a 00		 push	 0
  01281	6a 00		 push	 0
  01283	6a 00		 push	 0
  01285	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$50[ebp]
  0128b	50		 push	 eax
  0128c	6a 00		 push	 0
  0128e	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  01293	83 c4 20	 add	 esp, 32			; 00000020H
  01296	e9 68 18 00 00	 jmp	 $LN1@RETURN_DAT
$LN69@RETURN_DAT:

; 155  : 	case TT_GREATER_EQUALS:  DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, >= );

  0129b	8b f4		 mov	 esi, esp
  0129d	6a 04		 push	 4
  0129f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  012a5	83 c4 04	 add	 esp, 4
  012a8	3b f4		 cmp	 esi, esp
  012aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012af	89 85 7c fd ff
	ff		 mov	 DWORD PTR _boolRes$43[ebp], eax
  012b5	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$43[ebp]
  012bb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  012c1	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  012c5	75 40		 jne	 SHORT $LN70@RETURN_DAT
  012c7	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  012cb	75 3a		 jne	 SHORT $LN70@RETURN_DAT
  012cd	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  012d0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  012d3	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  012d6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  012d9	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  012dd	66 0f 2f 00	 comisd	 xmm0, QWORD PTR [eax]
  012e1	72 0c		 jb	 SHORT $LN168@RETURN_DAT
  012e3	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv697[ebp], 1
  012ed	eb 0a		 jmp	 SHORT $LN169@RETURN_DAT
$LN168@RETURN_DAT:
  012ef	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN169@RETURN_DAT:
  012f9	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$43[ebp]
  012ff	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv697[ebp]
  01305	89 11		 mov	 DWORD PTR [ecx], edx
$LN70@RETURN_DAT:
  01307	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0130b	75 48		 jne	 SHORT $LN71@RETURN_DAT
  0130d	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01311	75 42		 jne	 SHORT $LN71@RETURN_DAT
  01313	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01316	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01319	8b 01		 mov	 eax, DWORD PTR [ecx]
  0131b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0131e	8b c8		 mov	 ecx, eax
  01320	e8 00 00 00 00	 call	 __ltod3
  01325	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01328	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0132b	66 0f 2f 02	 comisd	 xmm0, QWORD PTR [edx]
  0132f	72 0c		 jb	 SHORT $LN170@RETURN_DAT
  01331	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv706[ebp], 1
  0133b	eb 0a		 jmp	 SHORT $LN171@RETURN_DAT
$LN170@RETURN_DAT:
  0133d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv706[ebp], 0
$LN171@RETURN_DAT:
  01347	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$43[ebp]
  0134d	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv706[ebp]
  01353	89 08		 mov	 DWORD PTR [eax], ecx
$LN71@RETURN_DAT:
  01355	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01359	75 4a		 jne	 SHORT $LN72@RETURN_DAT
  0135b	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0135f	75 44		 jne	 SHORT $LN72@RETURN_DAT
  01361	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01364	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  01367	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  0136a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0136d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0136f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  01372	e8 00 00 00 00	 call	 __ltod3
  01377	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  0137b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0137f	72 0c		 jb	 SHORT $LN172@RETURN_DAT
  01381	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv715[ebp], 1
  0138b	eb 0a		 jmp	 SHORT $LN173@RETURN_DAT
$LN172@RETURN_DAT:
  0138d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv715[ebp], 0
$LN173@RETURN_DAT:
  01397	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$43[ebp]
  0139d	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv715[ebp]
  013a3	89 08		 mov	 DWORD PTR [eax], ecx
$LN72@RETURN_DAT:
  013a5	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  013a9	75 6a		 jne	 SHORT $LN73@RETURN_DAT
  013ab	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  013af	75 64		 jne	 SHORT $LN73@RETURN_DAT
  013b1	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  013b4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  013b7	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  013ba	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  013bd	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2094[ebp], ecx
  013c3	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2095[ebp], eax
  013c9	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2094[ebp]
  013cf	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2095[ebp]
  013d5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  013d8	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  013db	7c 20		 jl	 SHORT $LN174@RETURN_DAT
  013dd	7f 12		 jg	 SHORT $LN279@RETURN_DAT
  013df	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2094[ebp]
  013e5	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2095[ebp]
  013eb	8b 01		 mov	 eax, DWORD PTR [ecx]
  013ed	3b 02		 cmp	 eax, DWORD PTR [edx]
  013ef	72 0c		 jb	 SHORT $LN174@RETURN_DAT
$LN279@RETURN_DAT:
  013f1	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv723[ebp], 1
  013fb	eb 0a		 jmp	 SHORT $LN175@RETURN_DAT
$LN174@RETURN_DAT:
  013fd	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv723[ebp], 0
$LN175@RETURN_DAT:
  01407	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$43[ebp]
  0140d	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv723[ebp]
  01413	89 11		 mov	 DWORD PTR [ecx], edx
$LN73@RETURN_DAT:
  01415	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01419	75 50		 jne	 SHORT $LN74@RETURN_DAT
  0141b	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  0141f	75 4a		 jne	 SHORT $LN74@RETURN_DAT
  01421	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01424	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01427	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0142b	f2 0f 11 85 6c
	fd ff ff	 movsd	 QWORD PTR _bool_val$42[ebp], xmm0
  01433	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01436	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01439	f2 0f 10 85 6c
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val$42[ebp]
  01441	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  01445	72 0c		 jb	 SHORT $LN176@RETURN_DAT
  01447	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv732[ebp], 1
  01451	eb 0a		 jmp	 SHORT $LN177@RETURN_DAT
$LN176@RETURN_DAT:
  01453	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv732[ebp], 0
$LN177@RETURN_DAT:
  0145d	8b 95 7c fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$43[ebp]
  01463	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv732[ebp]
  01469	89 02		 mov	 DWORD PTR [edx], eax
$LN74@RETURN_DAT:
  0146b	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  0146f	75 50		 jne	 SHORT $LN75@RETURN_DAT
  01471	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01475	75 4a		 jne	 SHORT $LN75@RETURN_DAT
  01477	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0147a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0147d	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01481	f2 0f 11 85 5c
	fd ff ff	 movsd	 QWORD PTR _bool_val$41[ebp], xmm0
  01489	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0148c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0148f	f2 0f 10 85 5c
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val$41[ebp]
  01497	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  0149b	72 0c		 jb	 SHORT $LN178@RETURN_DAT
  0149d	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv741[ebp], 1
  014a7	eb 0a		 jmp	 SHORT $LN179@RETURN_DAT
$LN178@RETURN_DAT:
  014a9	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv741[ebp], 0
$LN179@RETURN_DAT:
  014b3	8b 95 7c fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$43[ebp]
  014b9	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv741[ebp]
  014bf	89 02		 mov	 DWORD PTR [edx], eax
$LN75@RETURN_DAT:
  014c1	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  014c5	75 5c		 jne	 SHORT $LN76@RETURN_DAT
  014c7	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  014cb	75 56		 jne	 SHORT $LN76@RETURN_DAT
  014cd	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  014d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  014d3	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  014d7	f2 0f 11 85 4c
	fd ff ff	 movsd	 QWORD PTR _bool_val$40[ebp], xmm0
  014df	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  014e2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014e5	8b 01		 mov	 eax, DWORD PTR [ecx]
  014e7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  014ea	8b c8		 mov	 ecx, eax
  014ec	e8 00 00 00 00	 call	 __ltod3
  014f1	f2 0f 10 8d 4c
	fd ff ff	 movsd	 xmm1, QWORD PTR _bool_val$40[ebp]
  014f9	66 0f 2f c8	 comisd	 xmm1, xmm0
  014fd	72 0c		 jb	 SHORT $LN180@RETURN_DAT
  014ff	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv751[ebp], 1
  01509	eb 0a		 jmp	 SHORT $LN181@RETURN_DAT
$LN180@RETURN_DAT:
  0150b	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv751[ebp], 0
$LN181@RETURN_DAT:
  01515	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$43[ebp]
  0151b	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv751[ebp]
  01521	89 11		 mov	 DWORD PTR [ecx], edx
$LN76@RETURN_DAT:
  01523	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01527	75 5c		 jne	 SHORT $LN77@RETURN_DAT
  01529	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0152d	75 56		 jne	 SHORT $LN77@RETURN_DAT
  0152f	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01532	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01535	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01539	f2 0f 11 85 3c
	fd ff ff	 movsd	 QWORD PTR _bool_val$39[ebp], xmm0
  01541	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01544	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01547	8b 01		 mov	 eax, DWORD PTR [ecx]
  01549	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0154c	8b c8		 mov	 ecx, eax
  0154e	e8 00 00 00 00	 call	 __ltod3
  01553	f2 0f 10 8d 3c
	fd ff ff	 movsd	 xmm1, QWORD PTR _bool_val$39[ebp]
  0155b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0155f	72 0c		 jb	 SHORT $LN182@RETURN_DAT
  01561	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv761[ebp], 1
  0156b	eb 0a		 jmp	 SHORT $LN183@RETURN_DAT
$LN182@RETURN_DAT:
  0156d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN183@RETURN_DAT:
  01577	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$43[ebp]
  0157d	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv761[ebp]
  01583	89 11		 mov	 DWORD PTR [ecx], edx
$LN77@RETURN_DAT:
  01585	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01589	75 67		 jne	 SHORT $LN78@RETURN_DAT
  0158b	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0158f	75 61		 jne	 SHORT $LN78@RETURN_DAT
  01591	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01594	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01597	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0159b	f2 0f 11 85 2c
	fd ff ff	 movsd	 QWORD PTR _bool_val_1$38[ebp], xmm0
  015a3	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  015a6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  015a9	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  015ad	f2 0f 11 85 1c
	fd ff ff	 movsd	 QWORD PTR _bool_val_2$37[ebp], xmm0
  015b5	f2 0f 10 85 2c
	fd ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$38[ebp]
  015bd	66 0f 2f 85 1c
	fd ff ff	 comisd	 xmm0, QWORD PTR _bool_val_2$37[ebp]
  015c5	72 0c		 jb	 SHORT $LN184@RETURN_DAT
  015c7	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv771[ebp], 1
  015d1	eb 0a		 jmp	 SHORT $LN185@RETURN_DAT
$LN184@RETURN_DAT:
  015d3	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv771[ebp], 0
$LN185@RETURN_DAT:
  015dd	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$43[ebp]
  015e3	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv771[ebp]
  015e9	89 08		 mov	 DWORD PTR [eax], ecx
  015eb	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN78@RETURN_DAT:
  015f2	8b f4		 mov	 esi, esp
  015f4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  015f7	50		 push	 eax
  015f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  015fe	83 c4 04	 add	 esp, 4
  01601	3b f4		 cmp	 esi, esp
  01603	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01608	8b f4		 mov	 esi, esp
  0160a	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  0160d	51		 push	 ecx
  0160e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  01614	83 c4 04	 add	 esp, 4
  01617	3b f4		 cmp	 esi, esp
  01619	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0161e	6a 01		 push	 1
  01620	6a 05		 push	 5
  01622	6a 00		 push	 0
  01624	6a 00		 push	 0
  01626	6a 00		 push	 0
  01628	6a 00		 push	 0
  0162a	8b 85 7c fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$43[ebp]
  01630	50		 push	 eax
  01631	6a 00		 push	 0
  01633	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  01638	83 c4 20	 add	 esp, 32			; 00000020H
  0163b	e9 c3 14 00 00	 jmp	 $LN1@RETURN_DAT
$LN79@RETURN_DAT:

; 156  : 	case TT_SMALLER_EQUALS:  DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, <= );

  01640	8b f4		 mov	 esi, esp
  01642	6a 04		 push	 4
  01644	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0164a	83 c4 04	 add	 esp, 4
  0164d	3b f4		 cmp	 esi, esp
  0164f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01654	89 85 10 fd ff
	ff		 mov	 DWORD PTR _boolRes$36[ebp], eax
  0165a	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$36[ebp]
  01660	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  01666	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  0166a	75 40		 jne	 SHORT $LN80@RETURN_DAT
  0166c	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01670	75 3a		 jne	 SHORT $LN80@RETURN_DAT
  01672	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01675	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01678	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0167b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0167e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  01682	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  01686	72 0c		 jb	 SHORT $LN186@RETURN_DAT
  01688	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv794[ebp], 1
  01692	eb 0a		 jmp	 SHORT $LN187@RETURN_DAT
$LN186@RETURN_DAT:
  01694	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv794[ebp], 0
$LN187@RETURN_DAT:
  0169e	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$36[ebp]
  016a4	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv794[ebp]
  016aa	89 11		 mov	 DWORD PTR [ecx], edx
$LN80@RETURN_DAT:
  016ac	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  016b0	75 4c		 jne	 SHORT $LN81@RETURN_DAT
  016b2	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  016b6	75 46		 jne	 SHORT $LN81@RETURN_DAT
  016b8	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  016bb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  016be	8b 01		 mov	 eax, DWORD PTR [ecx]
  016c0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  016c3	8b c8		 mov	 ecx, eax
  016c5	e8 00 00 00 00	 call	 __ltod3
  016ca	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  016cd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  016d0	f2 0f 10 0a	 movsd	 xmm1, QWORD PTR [edx]
  016d4	66 0f 2f c8	 comisd	 xmm1, xmm0
  016d8	72 0c		 jb	 SHORT $LN188@RETURN_DAT
  016da	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv803[ebp], 1
  016e4	eb 0a		 jmp	 SHORT $LN189@RETURN_DAT
$LN188@RETURN_DAT:
  016e6	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv803[ebp], 0
$LN189@RETURN_DAT:
  016f0	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$36[ebp]
  016f6	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv803[ebp]
  016fc	89 08		 mov	 DWORD PTR [eax], ecx
$LN81@RETURN_DAT:
  016fe	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01702	75 46		 jne	 SHORT $LN82@RETURN_DAT
  01704	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01708	75 40		 jne	 SHORT $LN82@RETURN_DAT
  0170a	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0170d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  01710	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01713	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01716	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01718	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0171b	e8 00 00 00 00	 call	 __ltod3
  01720	66 0f 2f 06	 comisd	 xmm0, QWORD PTR [esi]
  01724	72 0c		 jb	 SHORT $LN190@RETURN_DAT
  01726	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv812[ebp], 1
  01730	eb 0a		 jmp	 SHORT $LN191@RETURN_DAT
$LN190@RETURN_DAT:
  01732	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv812[ebp], 0
$LN191@RETURN_DAT:
  0173c	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$36[ebp]
  01742	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv812[ebp]
  01748	89 08		 mov	 DWORD PTR [eax], ecx
$LN82@RETURN_DAT:
  0174a	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0174e	75 6a		 jne	 SHORT $LN83@RETURN_DAT
  01750	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01754	75 64		 jne	 SHORT $LN83@RETURN_DAT
  01756	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01759	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0175c	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0175f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01762	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2190[ebp], ecx
  01768	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2191[ebp], eax
  0176e	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2190[ebp]
  01774	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2191[ebp]
  0177a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0177d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01780	7f 20		 jg	 SHORT $LN192@RETURN_DAT
  01782	7c 12		 jl	 SHORT $LN280@RETURN_DAT
  01784	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2190[ebp]
  0178a	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2191[ebp]
  01790	8b 01		 mov	 eax, DWORD PTR [ecx]
  01792	3b 02		 cmp	 eax, DWORD PTR [edx]
  01794	77 0c		 ja	 SHORT $LN192@RETURN_DAT
$LN280@RETURN_DAT:
  01796	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv820[ebp], 1
  017a0	eb 0a		 jmp	 SHORT $LN193@RETURN_DAT
$LN192@RETURN_DAT:
  017a2	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv820[ebp], 0
$LN193@RETURN_DAT:
  017ac	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$36[ebp]
  017b2	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv820[ebp]
  017b8	89 11		 mov	 DWORD PTR [ecx], edx
$LN83@RETURN_DAT:
  017ba	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  017be	75 50		 jne	 SHORT $LN84@RETURN_DAT
  017c0	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  017c4	75 4a		 jne	 SHORT $LN84@RETURN_DAT
  017c6	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  017c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  017cc	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  017d0	f2 0f 11 85 00
	fd ff ff	 movsd	 QWORD PTR _bool_val$35[ebp], xmm0
  017d8	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  017db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  017de	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  017e2	66 0f 2f 85 00
	fd ff ff	 comisd	 xmm0, QWORD PTR _bool_val$35[ebp]
  017ea	72 0c		 jb	 SHORT $LN194@RETURN_DAT
  017ec	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv829[ebp], 1
  017f6	eb 0a		 jmp	 SHORT $LN195@RETURN_DAT
$LN194@RETURN_DAT:
  017f8	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv829[ebp], 0
$LN195@RETURN_DAT:
  01802	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$36[ebp]
  01808	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv829[ebp]
  0180e	89 02		 mov	 DWORD PTR [edx], eax
$LN84@RETURN_DAT:
  01810	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01814	75 50		 jne	 SHORT $LN85@RETURN_DAT
  01816	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0181a	75 4a		 jne	 SHORT $LN85@RETURN_DAT
  0181c	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0181f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01822	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01826	f2 0f 11 85 f0
	fc ff ff	 movsd	 QWORD PTR _bool_val$34[ebp], xmm0
  0182e	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01831	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01834	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  01838	66 0f 2f 85 f0
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$34[ebp]
  01840	72 0c		 jb	 SHORT $LN196@RETURN_DAT
  01842	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv838[ebp], 1
  0184c	eb 0a		 jmp	 SHORT $LN197@RETURN_DAT
$LN196@RETURN_DAT:
  0184e	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv838[ebp], 0
$LN197@RETURN_DAT:
  01858	8b 95 10 fd ff
	ff		 mov	 edx, DWORD PTR _boolRes$36[ebp]
  0185e	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv838[ebp]
  01864	89 02		 mov	 DWORD PTR [edx], eax
$LN85@RETURN_DAT:
  01866	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0186a	75 58		 jne	 SHORT $LN86@RETURN_DAT
  0186c	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01870	75 52		 jne	 SHORT $LN86@RETURN_DAT
  01872	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01875	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01878	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0187c	f2 0f 11 85 e0
	fc ff ff	 movsd	 QWORD PTR _bool_val$33[ebp], xmm0
  01884	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01887	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0188a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0188c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0188f	8b c8		 mov	 ecx, eax
  01891	e8 00 00 00 00	 call	 __ltod3
  01896	66 0f 2f 85 e0
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$33[ebp]
  0189e	72 0c		 jb	 SHORT $LN198@RETURN_DAT
  018a0	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv848[ebp], 1
  018aa	eb 0a		 jmp	 SHORT $LN199@RETURN_DAT
$LN198@RETURN_DAT:
  018ac	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv848[ebp], 0
$LN199@RETURN_DAT:
  018b6	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$36[ebp]
  018bc	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv848[ebp]
  018c2	89 11		 mov	 DWORD PTR [ecx], edx
$LN86@RETURN_DAT:
  018c4	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  018c8	75 58		 jne	 SHORT $LN87@RETURN_DAT
  018ca	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  018ce	75 52		 jne	 SHORT $LN87@RETURN_DAT
  018d0	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  018d3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  018d6	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  018da	f2 0f 11 85 d0
	fc ff ff	 movsd	 QWORD PTR _bool_val$32[ebp], xmm0
  018e2	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  018e5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  018e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  018ea	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  018ed	8b c8		 mov	 ecx, eax
  018ef	e8 00 00 00 00	 call	 __ltod3
  018f4	66 0f 2f 85 d0
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$32[ebp]
  018fc	72 0c		 jb	 SHORT $LN200@RETURN_DAT
  018fe	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv858[ebp], 1
  01908	eb 0a		 jmp	 SHORT $LN201@RETURN_DAT
$LN200@RETURN_DAT:
  0190a	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv858[ebp], 0
$LN201@RETURN_DAT:
  01914	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR _boolRes$36[ebp]
  0191a	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv858[ebp]
  01920	89 11		 mov	 DWORD PTR [ecx], edx
$LN87@RETURN_DAT:
  01922	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01926	75 67		 jne	 SHORT $LN88@RETURN_DAT
  01928	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0192c	75 61		 jne	 SHORT $LN88@RETURN_DAT
  0192e	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01931	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01934	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01938	f2 0f 11 85 c0
	fc ff ff	 movsd	 QWORD PTR _bool_val_1$31[ebp], xmm0
  01940	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01943	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01946	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0194a	f2 0f 11 85 b0
	fc ff ff	 movsd	 QWORD PTR _bool_val_2$30[ebp], xmm0
  01952	f2 0f 10 85 b0
	fc ff ff	 movsd	 xmm0, QWORD PTR _bool_val_2$30[ebp]
  0195a	66 0f 2f 85 c0
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val_1$31[ebp]
  01962	72 0c		 jb	 SHORT $LN202@RETURN_DAT
  01964	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv868[ebp], 1
  0196e	eb 0a		 jmp	 SHORT $LN203@RETURN_DAT
$LN202@RETURN_DAT:
  01970	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv868[ebp], 0
$LN203@RETURN_DAT:
  0197a	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$36[ebp]
  01980	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv868[ebp]
  01986	89 08		 mov	 DWORD PTR [eax], ecx
  01988	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN88@RETURN_DAT:
  0198f	8b f4		 mov	 esi, esp
  01991	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01994	50		 push	 eax
  01995	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0199b	83 c4 04	 add	 esp, 4
  0199e	3b f4		 cmp	 esi, esp
  019a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019a5	8b f4		 mov	 esi, esp
  019a7	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  019aa	51		 push	 ecx
  019ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  019b1	83 c4 04	 add	 esp, 4
  019b4	3b f4		 cmp	 esi, esp
  019b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019bb	6a 01		 push	 1
  019bd	6a 05		 push	 5
  019bf	6a 00		 push	 0
  019c1	6a 00		 push	 0
  019c3	6a 00		 push	 0
  019c5	6a 00		 push	 0
  019c7	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _boolRes$36[ebp]
  019cd	50		 push	 eax
  019ce	6a 00		 push	 0
  019d0	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  019d5	83 c4 20	 add	 esp, 32			; 00000020H
  019d8	e9 26 11 00 00	 jmp	 $LN1@RETURN_DAT
$LN89@RETURN_DAT:

; 157  : 	case TT_GREATER:         DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, > );

  019dd	8b f4		 mov	 esi, esp
  019df	6a 04		 push	 4
  019e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  019e7	83 c4 04	 add	 esp, 4
  019ea	3b f4		 cmp	 esi, esp
  019ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  019f1	89 85 a4 fc ff
	ff		 mov	 DWORD PTR _boolRes$29[ebp], eax
  019f7	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$29[ebp]
  019fd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  01a03	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01a07	75 40		 jne	 SHORT $LN90@RETURN_DAT
  01a09	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01a0d	75 3a		 jne	 SHORT $LN90@RETURN_DAT
  01a0f	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01a12	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01a15	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  01a18	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01a1b	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  01a1f	66 0f 2f 00	 comisd	 xmm0, QWORD PTR [eax]
  01a23	76 0c		 jbe	 SHORT $LN204@RETURN_DAT
  01a25	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv891[ebp], 1
  01a2f	eb 0a		 jmp	 SHORT $LN205@RETURN_DAT
$LN204@RETURN_DAT:
  01a31	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv891[ebp], 0
$LN205@RETURN_DAT:
  01a3b	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$29[ebp]
  01a41	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv891[ebp]
  01a47	89 11		 mov	 DWORD PTR [ecx], edx
$LN90@RETURN_DAT:
  01a49	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01a4d	75 48		 jne	 SHORT $LN91@RETURN_DAT
  01a4f	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01a53	75 42		 jne	 SHORT $LN91@RETURN_DAT
  01a55	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01a58	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01a5b	8b 01		 mov	 eax, DWORD PTR [ecx]
  01a5d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01a60	8b c8		 mov	 ecx, eax
  01a62	e8 00 00 00 00	 call	 __ltod3
  01a67	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01a6a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01a6d	66 0f 2f 02	 comisd	 xmm0, QWORD PTR [edx]
  01a71	76 0c		 jbe	 SHORT $LN206@RETURN_DAT
  01a73	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv900[ebp], 1
  01a7d	eb 0a		 jmp	 SHORT $LN207@RETURN_DAT
$LN206@RETURN_DAT:
  01a7f	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv900[ebp], 0
$LN207@RETURN_DAT:
  01a89	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$29[ebp]
  01a8f	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv900[ebp]
  01a95	89 08		 mov	 DWORD PTR [eax], ecx
$LN91@RETURN_DAT:
  01a97	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01a9b	75 4a		 jne	 SHORT $LN92@RETURN_DAT
  01a9d	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01aa1	75 44		 jne	 SHORT $LN92@RETURN_DAT
  01aa3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01aa6	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  01aa9	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01aac	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01aaf	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01ab1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  01ab4	e8 00 00 00 00	 call	 __ltod3
  01ab9	f2 0f 10 0e	 movsd	 xmm1, QWORD PTR [esi]
  01abd	66 0f 2f c8	 comisd	 xmm1, xmm0
  01ac1	76 0c		 jbe	 SHORT $LN208@RETURN_DAT
  01ac3	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv909[ebp], 1
  01acd	eb 0a		 jmp	 SHORT $LN209@RETURN_DAT
$LN208@RETURN_DAT:
  01acf	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv909[ebp], 0
$LN209@RETURN_DAT:
  01ad9	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$29[ebp]
  01adf	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv909[ebp]
  01ae5	89 08		 mov	 DWORD PTR [eax], ecx
$LN92@RETURN_DAT:
  01ae7	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01aeb	75 6a		 jne	 SHORT $LN93@RETURN_DAT
  01aed	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01af1	75 64		 jne	 SHORT $LN93@RETURN_DAT
  01af3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01af6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01af9	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  01afc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01aff	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2284[ebp], ecx
  01b05	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2285[ebp], eax
  01b0b	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2284[ebp]
  01b11	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2285[ebp]
  01b17	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  01b1a	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01b1d	7c 20		 jl	 SHORT $LN210@RETURN_DAT
  01b1f	7f 12		 jg	 SHORT $LN281@RETURN_DAT
  01b21	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2284[ebp]
  01b27	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2285[ebp]
  01b2d	8b 01		 mov	 eax, DWORD PTR [ecx]
  01b2f	3b 02		 cmp	 eax, DWORD PTR [edx]
  01b31	76 0c		 jbe	 SHORT $LN210@RETURN_DAT
$LN281@RETURN_DAT:
  01b33	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv917[ebp], 1
  01b3d	eb 0a		 jmp	 SHORT $LN211@RETURN_DAT
$LN210@RETURN_DAT:
  01b3f	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv917[ebp], 0
$LN211@RETURN_DAT:
  01b49	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$29[ebp]
  01b4f	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv917[ebp]
  01b55	89 11		 mov	 DWORD PTR [ecx], edx
$LN93@RETURN_DAT:
  01b57	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01b5b	75 50		 jne	 SHORT $LN94@RETURN_DAT
  01b5d	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01b61	75 4a		 jne	 SHORT $LN94@RETURN_DAT
  01b63	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01b66	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01b69	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01b6d	f2 0f 11 85 94
	fc ff ff	 movsd	 QWORD PTR _bool_val$28[ebp], xmm0
  01b75	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01b78	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01b7b	f2 0f 10 85 94
	fc ff ff	 movsd	 xmm0, QWORD PTR _bool_val$28[ebp]
  01b83	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  01b87	76 0c		 jbe	 SHORT $LN212@RETURN_DAT
  01b89	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv926[ebp], 1
  01b93	eb 0a		 jmp	 SHORT $LN213@RETURN_DAT
$LN212@RETURN_DAT:
  01b95	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv926[ebp], 0
$LN213@RETURN_DAT:
  01b9f	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _boolRes$29[ebp]
  01ba5	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv926[ebp]
  01bab	89 02		 mov	 DWORD PTR [edx], eax
$LN94@RETURN_DAT:
  01bad	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01bb1	75 50		 jne	 SHORT $LN95@RETURN_DAT
  01bb3	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01bb7	75 4a		 jne	 SHORT $LN95@RETURN_DAT
  01bb9	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01bbc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01bbf	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01bc3	f2 0f 11 85 84
	fc ff ff	 movsd	 QWORD PTR _bool_val$27[ebp], xmm0
  01bcb	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01bce	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01bd1	f2 0f 10 85 84
	fc ff ff	 movsd	 xmm0, QWORD PTR _bool_val$27[ebp]
  01bd9	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  01bdd	76 0c		 jbe	 SHORT $LN214@RETURN_DAT
  01bdf	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv935[ebp], 1
  01be9	eb 0a		 jmp	 SHORT $LN215@RETURN_DAT
$LN214@RETURN_DAT:
  01beb	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv935[ebp], 0
$LN215@RETURN_DAT:
  01bf5	8b 95 a4 fc ff
	ff		 mov	 edx, DWORD PTR _boolRes$29[ebp]
  01bfb	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv935[ebp]
  01c01	89 02		 mov	 DWORD PTR [edx], eax
$LN95@RETURN_DAT:
  01c03	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01c07	75 5c		 jne	 SHORT $LN96@RETURN_DAT
  01c09	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01c0d	75 56		 jne	 SHORT $LN96@RETURN_DAT
  01c0f	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01c12	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01c15	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01c19	f2 0f 11 85 74
	fc ff ff	 movsd	 QWORD PTR _bool_val$26[ebp], xmm0
  01c21	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01c24	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01c27	8b 01		 mov	 eax, DWORD PTR [ecx]
  01c29	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01c2c	8b c8		 mov	 ecx, eax
  01c2e	e8 00 00 00 00	 call	 __ltod3
  01c33	f2 0f 10 8d 74
	fc ff ff	 movsd	 xmm1, QWORD PTR _bool_val$26[ebp]
  01c3b	66 0f 2f c8	 comisd	 xmm1, xmm0
  01c3f	76 0c		 jbe	 SHORT $LN216@RETURN_DAT
  01c41	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv945[ebp], 1
  01c4b	eb 0a		 jmp	 SHORT $LN217@RETURN_DAT
$LN216@RETURN_DAT:
  01c4d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv945[ebp], 0
$LN217@RETURN_DAT:
  01c57	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$29[ebp]
  01c5d	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv945[ebp]
  01c63	89 11		 mov	 DWORD PTR [ecx], edx
$LN96@RETURN_DAT:
  01c65	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01c69	75 5c		 jne	 SHORT $LN97@RETURN_DAT
  01c6b	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01c6f	75 56		 jne	 SHORT $LN97@RETURN_DAT
  01c71	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01c74	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01c77	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01c7b	f2 0f 11 85 64
	fc ff ff	 movsd	 QWORD PTR _bool_val$25[ebp], xmm0
  01c83	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01c86	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01c89	8b 01		 mov	 eax, DWORD PTR [ecx]
  01c8b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01c8e	8b c8		 mov	 ecx, eax
  01c90	e8 00 00 00 00	 call	 __ltod3
  01c95	f2 0f 10 8d 64
	fc ff ff	 movsd	 xmm1, QWORD PTR _bool_val$25[ebp]
  01c9d	66 0f 2f c8	 comisd	 xmm1, xmm0
  01ca1	76 0c		 jbe	 SHORT $LN218@RETURN_DAT
  01ca3	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv955[ebp], 1
  01cad	eb 0a		 jmp	 SHORT $LN219@RETURN_DAT
$LN218@RETURN_DAT:
  01caf	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv955[ebp], 0
$LN219@RETURN_DAT:
  01cb9	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$29[ebp]
  01cbf	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv955[ebp]
  01cc5	89 11		 mov	 DWORD PTR [ecx], edx
$LN97@RETURN_DAT:
  01cc7	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01ccb	75 67		 jne	 SHORT $LN98@RETURN_DAT
  01ccd	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01cd1	75 61		 jne	 SHORT $LN98@RETURN_DAT
  01cd3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01cd6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01cd9	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01cdd	f2 0f 11 85 54
	fc ff ff	 movsd	 QWORD PTR _bool_val_1$24[ebp], xmm0
  01ce5	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01ce8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01ceb	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01cef	f2 0f 11 85 44
	fc ff ff	 movsd	 QWORD PTR _bool_val_2$23[ebp], xmm0
  01cf7	f2 0f 10 85 54
	fc ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$24[ebp]
  01cff	66 0f 2f 85 44
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val_2$23[ebp]
  01d07	76 0c		 jbe	 SHORT $LN220@RETURN_DAT
  01d09	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv997[ebp], 1
  01d13	eb 0a		 jmp	 SHORT $LN221@RETURN_DAT
$LN220@RETURN_DAT:
  01d15	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv997[ebp], 0
$LN221@RETURN_DAT:
  01d1f	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$29[ebp]
  01d25	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv997[ebp]
  01d2b	89 08		 mov	 DWORD PTR [eax], ecx
  01d2d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN98@RETURN_DAT:
  01d34	8b f4		 mov	 esi, esp
  01d36	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01d39	50		 push	 eax
  01d3a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  01d40	83 c4 04	 add	 esp, 4
  01d43	3b f4		 cmp	 esi, esp
  01d45	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d4a	8b f4		 mov	 esi, esp
  01d4c	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01d4f	51		 push	 ecx
  01d50	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  01d56	83 c4 04	 add	 esp, 4
  01d59	3b f4		 cmp	 esi, esp
  01d5b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d60	6a 01		 push	 1
  01d62	6a 05		 push	 5
  01d64	6a 00		 push	 0
  01d66	6a 00		 push	 0
  01d68	6a 00		 push	 0
  01d6a	6a 00		 push	 0
  01d6c	8b 85 a4 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$29[ebp]
  01d72	50		 push	 eax
  01d73	6a 00		 push	 0
  01d75	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  01d7a	83 c4 20	 add	 esp, 32			; 00000020H
  01d7d	e9 81 0d 00 00	 jmp	 $LN1@RETURN_DAT
$LN99@RETURN_DAT:

; 158  : 	case TT_SMALLER:         DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, < );

  01d82	8b f4		 mov	 esi, esp
  01d84	6a 04		 push	 4
  01d86	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  01d8c	83 c4 04	 add	 esp, 4
  01d8f	3b f4		 cmp	 esi, esp
  01d91	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d96	89 85 38 fc ff
	ff		 mov	 DWORD PTR _boolRes$22[ebp], eax
  01d9c	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$22[ebp]
  01da2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  01da8	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01dac	75 40		 jne	 SHORT $LN100@RETURN_DAT
  01dae	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01db2	75 3a		 jne	 SHORT $LN100@RETURN_DAT
  01db4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01db7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01dba	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  01dbd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01dc0	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  01dc4	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  01dc8	76 0c		 jbe	 SHORT $LN222@RETURN_DAT
  01dca	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1020[ebp], 1
  01dd4	eb 0a		 jmp	 SHORT $LN223@RETURN_DAT
$LN222@RETURN_DAT:
  01dd6	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1020[ebp], 0
$LN223@RETURN_DAT:
  01de0	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$22[ebp]
  01de6	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1020[ebp]
  01dec	89 11		 mov	 DWORD PTR [ecx], edx
$LN100@RETURN_DAT:
  01dee	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01df2	75 4c		 jne	 SHORT $LN101@RETURN_DAT
  01df4	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01df8	75 46		 jne	 SHORT $LN101@RETURN_DAT
  01dfa	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01dfd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01e00	8b 01		 mov	 eax, DWORD PTR [ecx]
  01e02	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01e05	8b c8		 mov	 ecx, eax
  01e07	e8 00 00 00 00	 call	 __ltod3
  01e0c	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01e0f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01e12	f2 0f 10 0a	 movsd	 xmm1, QWORD PTR [edx]
  01e16	66 0f 2f c8	 comisd	 xmm1, xmm0
  01e1a	76 0c		 jbe	 SHORT $LN224@RETURN_DAT
  01e1c	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1029[ebp], 1
  01e26	eb 0a		 jmp	 SHORT $LN225@RETURN_DAT
$LN224@RETURN_DAT:
  01e28	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1029[ebp], 0
$LN225@RETURN_DAT:
  01e32	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$22[ebp]
  01e38	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1029[ebp]
  01e3e	89 08		 mov	 DWORD PTR [eax], ecx
$LN101@RETURN_DAT:
  01e40	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01e44	75 46		 jne	 SHORT $LN102@RETURN_DAT
  01e46	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01e4a	75 40		 jne	 SHORT $LN102@RETURN_DAT
  01e4c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01e4f	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  01e52	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  01e55	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01e58	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01e5a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  01e5d	e8 00 00 00 00	 call	 __ltod3
  01e62	66 0f 2f 06	 comisd	 xmm0, QWORD PTR [esi]
  01e66	76 0c		 jbe	 SHORT $LN226@RETURN_DAT
  01e68	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1038[ebp], 1
  01e72	eb 0a		 jmp	 SHORT $LN227@RETURN_DAT
$LN226@RETURN_DAT:
  01e74	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN227@RETURN_DAT:
  01e7e	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$22[ebp]
  01e84	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1038[ebp]
  01e8a	89 08		 mov	 DWORD PTR [eax], ecx
$LN102@RETURN_DAT:
  01e8c	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  01e90	75 6a		 jne	 SHORT $LN103@RETURN_DAT
  01e92	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01e96	75 64		 jne	 SHORT $LN103@RETURN_DAT
  01e98	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01e9b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01e9e	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  01ea1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01ea4	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2380[ebp], ecx
  01eaa	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2381[ebp], eax
  01eb0	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2380[ebp]
  01eb6	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2381[ebp]
  01ebc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  01ebf	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  01ec2	7f 20		 jg	 SHORT $LN228@RETURN_DAT
  01ec4	7c 12		 jl	 SHORT $LN282@RETURN_DAT
  01ec6	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2380[ebp]
  01ecc	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2381[ebp]
  01ed2	8b 01		 mov	 eax, DWORD PTR [ecx]
  01ed4	3b 02		 cmp	 eax, DWORD PTR [edx]
  01ed6	73 0c		 jae	 SHORT $LN228@RETURN_DAT
$LN282@RETURN_DAT:
  01ed8	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1046[ebp], 1
  01ee2	eb 0a		 jmp	 SHORT $LN229@RETURN_DAT
$LN228@RETURN_DAT:
  01ee4	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1046[ebp], 0
$LN229@RETURN_DAT:
  01eee	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$22[ebp]
  01ef4	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv1046[ebp]
  01efa	89 11		 mov	 DWORD PTR [ecx], edx
$LN103@RETURN_DAT:
  01efc	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01f00	75 50		 jne	 SHORT $LN104@RETURN_DAT
  01f02	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  01f06	75 4a		 jne	 SHORT $LN104@RETURN_DAT
  01f08	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01f0b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01f0e	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01f12	f2 0f 11 85 28
	fc ff ff	 movsd	 QWORD PTR _bool_val$21[ebp], xmm0
  01f1a	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01f1d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01f20	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  01f24	66 0f 2f 85 28
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$21[ebp]
  01f2c	76 0c		 jbe	 SHORT $LN230@RETURN_DAT
  01f2e	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1055[ebp], 1
  01f38	eb 0a		 jmp	 SHORT $LN231@RETURN_DAT
$LN230@RETURN_DAT:
  01f3a	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1055[ebp], 0
$LN231@RETURN_DAT:
  01f44	8b 95 38 fc ff
	ff		 mov	 edx, DWORD PTR _boolRes$22[ebp]
  01f4a	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1055[ebp]
  01f50	89 02		 mov	 DWORD PTR [edx], eax
$LN104@RETURN_DAT:
  01f52	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  01f56	75 50		 jne	 SHORT $LN105@RETURN_DAT
  01f58	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  01f5c	75 4a		 jne	 SHORT $LN105@RETURN_DAT
  01f5e	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01f61	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01f64	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01f68	f2 0f 11 85 18
	fc ff ff	 movsd	 QWORD PTR _bool_val$20[ebp], xmm0
  01f70	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01f73	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01f76	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  01f7a	66 0f 2f 85 18
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$20[ebp]
  01f82	76 0c		 jbe	 SHORT $LN232@RETURN_DAT
  01f84	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1064[ebp], 1
  01f8e	eb 0a		 jmp	 SHORT $LN233@RETURN_DAT
$LN232@RETURN_DAT:
  01f90	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1064[ebp], 0
$LN233@RETURN_DAT:
  01f9a	8b 95 38 fc ff
	ff		 mov	 edx, DWORD PTR _boolRes$22[ebp]
  01fa0	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1064[ebp]
  01fa6	89 02		 mov	 DWORD PTR [edx], eax
$LN105@RETURN_DAT:
  01fa8	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  01fac	75 58		 jne	 SHORT $LN106@RETURN_DAT
  01fae	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  01fb2	75 52		 jne	 SHORT $LN106@RETURN_DAT
  01fb4	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  01fb7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01fba	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  01fbe	f2 0f 11 85 08
	fc ff ff	 movsd	 QWORD PTR _bool_val$19[ebp], xmm0
  01fc6	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  01fc9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01fcc	8b 01		 mov	 eax, DWORD PTR [ecx]
  01fce	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01fd1	8b c8		 mov	 ecx, eax
  01fd3	e8 00 00 00 00	 call	 __ltod3
  01fd8	66 0f 2f 85 08
	fc ff ff	 comisd	 xmm0, QWORD PTR _bool_val$19[ebp]
  01fe0	76 0c		 jbe	 SHORT $LN234@RETURN_DAT
  01fe2	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1074[ebp], 1
  01fec	eb 0a		 jmp	 SHORT $LN235@RETURN_DAT
$LN234@RETURN_DAT:
  01fee	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1074[ebp], 0
$LN235@RETURN_DAT:
  01ff8	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$22[ebp]
  01ffe	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1074[ebp]
  02004	89 11		 mov	 DWORD PTR [ecx], edx
$LN106@RETURN_DAT:
  02006	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0200a	75 58		 jne	 SHORT $LN107@RETURN_DAT
  0200c	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  02010	75 52		 jne	 SHORT $LN107@RETURN_DAT
  02012	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02018	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0201c	f2 0f 11 85 f8
	fb ff ff	 movsd	 QWORD PTR _bool_val$18[ebp], xmm0
  02024	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02027	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0202a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0202c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0202f	8b c8		 mov	 ecx, eax
  02031	e8 00 00 00 00	 call	 __ltod3
  02036	66 0f 2f 85 f8
	fb ff ff	 comisd	 xmm0, QWORD PTR _bool_val$18[ebp]
  0203e	76 0c		 jbe	 SHORT $LN236@RETURN_DAT
  02040	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1084[ebp], 1
  0204a	eb 0a		 jmp	 SHORT $LN237@RETURN_DAT
$LN236@RETURN_DAT:
  0204c	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1084[ebp], 0
$LN237@RETURN_DAT:
  02056	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR _boolRes$22[ebp]
  0205c	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1084[ebp]
  02062	89 11		 mov	 DWORD PTR [ecx], edx
$LN107@RETURN_DAT:
  02064	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  02068	75 67		 jne	 SHORT $LN108@RETURN_DAT
  0206a	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0206e	75 61		 jne	 SHORT $LN108@RETURN_DAT
  02070	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02073	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02076	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0207a	f2 0f 11 85 e8
	fb ff ff	 movsd	 QWORD PTR _bool_val_1$17[ebp], xmm0
  02082	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02085	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02088	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0208c	f2 0f 11 85 d8
	fb ff ff	 movsd	 QWORD PTR _bool_val_2$16[ebp], xmm0
  02094	f2 0f 10 85 d8
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val_2$16[ebp]
  0209c	66 0f 2f 85 e8
	fb ff ff	 comisd	 xmm0, QWORD PTR _bool_val_1$17[ebp]
  020a4	76 0c		 jbe	 SHORT $LN238@RETURN_DAT
  020a6	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1094[ebp], 1
  020b0	eb 0a		 jmp	 SHORT $LN239@RETURN_DAT
$LN238@RETURN_DAT:
  020b2	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1094[ebp], 0
$LN239@RETURN_DAT:
  020bc	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$22[ebp]
  020c2	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1094[ebp]
  020c8	89 08		 mov	 DWORD PTR [eax], ecx
  020ca	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN108@RETURN_DAT:
  020d1	8b f4		 mov	 esi, esp
  020d3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  020d6	50		 push	 eax
  020d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  020dd	83 c4 04	 add	 esp, 4
  020e0	3b f4		 cmp	 esi, esp
  020e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  020e7	8b f4		 mov	 esi, esp
  020e9	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  020ec	51		 push	 ecx
  020ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  020f3	83 c4 04	 add	 esp, 4
  020f6	3b f4		 cmp	 esi, esp
  020f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  020fd	6a 01		 push	 1
  020ff	6a 05		 push	 5
  02101	6a 00		 push	 0
  02103	6a 00		 push	 0
  02105	6a 00		 push	 0
  02107	6a 00		 push	 0
  02109	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR _boolRes$22[ebp]
  0210f	50		 push	 eax
  02110	6a 00		 push	 0
  02112	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  02117	83 c4 20	 add	 esp, 32			; 00000020H
  0211a	e9 e4 09 00 00	 jmp	 $LN1@RETURN_DAT
$LN109@RETURN_DAT:

; 159  : 	case TT_AND:             DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, &&);

  0211f	8b f4		 mov	 esi, esp
  02121	6a 04		 push	 4
  02123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  02129	83 c4 04	 add	 esp, 4
  0212c	3b f4		 cmp	 esi, esp
  0212e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02133	89 85 cc fb ff
	ff		 mov	 DWORD PTR _boolRes$15[ebp], eax
  02139	8b 85 cc fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$15[ebp]
  0213f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  02145	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  02149	75 5a		 jne	 SHORT $LN110@RETURN_DAT
  0214b	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  0214f	75 54		 jne	 SHORT $LN110@RETURN_DAT
  02151	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02154	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02157	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0215b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02163	9f		 lahf
  02164	f6 c4 44	 test	 ah, 68			; 00000044H
  02167	7b 24		 jnp	 SHORT $LN240@RETURN_DAT
  02169	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0216c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0216f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  02173	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0217b	9f		 lahf
  0217c	f6 c4 44	 test	 ah, 68			; 00000044H
  0217f	7b 0c		 jnp	 SHORT $LN240@RETURN_DAT
  02181	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1118[ebp], 1
  0218b	eb 0a		 jmp	 SHORT $LN241@RETURN_DAT
$LN240@RETURN_DAT:
  0218d	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1118[ebp], 0
$LN241@RETURN_DAT:
  02197	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$15[ebp]
  0219d	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1118[ebp]
  021a3	89 11		 mov	 DWORD PTR [ecx], edx
$LN110@RETURN_DAT:
  021a5	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  021a9	75 61		 jne	 SHORT $LN111@RETURN_DAT
  021ab	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  021af	75 5b		 jne	 SHORT $LN111@RETURN_DAT
  021b1	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  021b4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  021b7	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2455[ebp], ecx
  021bd	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2455[ebp]
  021c3	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2455[ebp]
  021c9	8b 0a		 mov	 ecx, DWORD PTR [edx]
  021cb	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  021ce	74 24		 je	 SHORT $LN242@RETURN_DAT
  021d0	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  021d3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  021d6	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  021da	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  021e2	9f		 lahf
  021e3	f6 c4 44	 test	 ah, 68			; 00000044H
  021e6	7b 0c		 jnp	 SHORT $LN242@RETURN_DAT
  021e8	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1127[ebp], 1
  021f2	eb 0a		 jmp	 SHORT $LN243@RETURN_DAT
$LN242@RETURN_DAT:
  021f4	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1127[ebp], 0
$LN243@RETURN_DAT:
  021fe	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$15[ebp]
  02204	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1127[ebp]
  0220a	89 11		 mov	 DWORD PTR [ecx], edx
$LN111@RETURN_DAT:
  0220c	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  02210	75 61		 jne	 SHORT $LN112@RETURN_DAT
  02212	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  02216	75 5b		 jne	 SHORT $LN112@RETURN_DAT
  02218	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0221b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0221e	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  02222	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0222a	9f		 lahf
  0222b	f6 c4 44	 test	 ah, 68			; 00000044H
  0222e	7b 2b		 jnp	 SHORT $LN244@RETURN_DAT
  02230	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  02233	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  02236	89 85 9c f8 ff
	ff		 mov	 DWORD PTR tv2472[ebp], eax
  0223c	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2472[ebp]
  02242	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2472[ebp]
  02248	8b 01		 mov	 eax, DWORD PTR [ecx]
  0224a	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  0224d	74 0c		 je	 SHORT $LN244@RETURN_DAT
  0224f	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1136[ebp], 1
  02259	eb 0a		 jmp	 SHORT $LN245@RETURN_DAT
$LN244@RETURN_DAT:
  0225b	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1136[ebp], 0
$LN245@RETURN_DAT:
  02265	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$15[ebp]
  0226b	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1136[ebp]
  02271	89 11		 mov	 DWORD PTR [ecx], edx
$LN112@RETURN_DAT:
  02273	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  02277	75 68		 jne	 SHORT $LN113@RETURN_DAT
  02279	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0227d	75 62		 jne	 SHORT $LN113@RETURN_DAT
  0227f	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02282	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02285	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2481[ebp], ecx
  0228b	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2481[ebp]
  02291	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2481[ebp]
  02297	8b 0a		 mov	 ecx, DWORD PTR [edx]
  02299	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  0229c	74 2b		 je	 SHORT $LN246@RETURN_DAT
  0229e	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  022a1	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  022a4	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2488[ebp], eax
  022aa	8b 8d 98 f8 ff
	ff		 mov	 ecx, DWORD PTR tv2488[ebp]
  022b0	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2488[ebp]
  022b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  022b8	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  022bb	74 0c		 je	 SHORT $LN246@RETURN_DAT
  022bd	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1145[ebp], 1
  022c7	eb 0a		 jmp	 SHORT $LN247@RETURN_DAT
$LN246@RETURN_DAT:
  022c9	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1145[ebp], 0
$LN247@RETURN_DAT:
  022d3	8b 8d cc fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$15[ebp]
  022d9	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv1145[ebp]
  022df	89 11		 mov	 DWORD PTR [ecx], edx
$LN113@RETURN_DAT:
  022e1	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  022e5	75 6a		 jne	 SHORT $LN114@RETURN_DAT
  022e7	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  022eb	75 64		 jne	 SHORT $LN114@RETURN_DAT
  022ed	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  022f0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  022f3	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  022f7	f2 0f 11 85 bc
	fb ff ff	 movsd	 QWORD PTR _bool_val$14[ebp], xmm0
  022ff	f2 0f 10 85 bc
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$14[ebp]
  02307	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0230f	9f		 lahf
  02310	f6 c4 44	 test	 ah, 68			; 00000044H
  02313	7b 24		 jnp	 SHORT $LN248@RETURN_DAT
  02315	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02318	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0231b	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0231f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02327	9f		 lahf
  02328	f6 c4 44	 test	 ah, 68			; 00000044H
  0232b	7b 0c		 jnp	 SHORT $LN248@RETURN_DAT
  0232d	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1155[ebp], 1
  02337	eb 0a		 jmp	 SHORT $LN249@RETURN_DAT
$LN248@RETURN_DAT:
  02339	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1155[ebp], 0
$LN249@RETURN_DAT:
  02343	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$15[ebp]
  02349	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1155[ebp]
  0234f	89 02		 mov	 DWORD PTR [edx], eax
$LN114@RETURN_DAT:
  02351	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  02355	75 6a		 jne	 SHORT $LN115@RETURN_DAT
  02357	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  0235b	75 64		 jne	 SHORT $LN115@RETURN_DAT
  0235d	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02360	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02363	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  02367	f2 0f 11 85 ac
	fb ff ff	 movsd	 QWORD PTR _bool_val$13[ebp], xmm0
  0236f	f2 0f 10 85 ac
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$13[ebp]
  02377	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0237f	9f		 lahf
  02380	f6 c4 44	 test	 ah, 68			; 00000044H
  02383	7b 24		 jnp	 SHORT $LN250@RETURN_DAT
  02385	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02388	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0238b	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0238f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02397	9f		 lahf
  02398	f6 c4 44	 test	 ah, 68			; 00000044H
  0239b	7b 0c		 jnp	 SHORT $LN250@RETURN_DAT
  0239d	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1165[ebp], 1
  023a7	eb 0a		 jmp	 SHORT $LN251@RETURN_DAT
$LN250@RETURN_DAT:
  023a9	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1165[ebp], 0
$LN251@RETURN_DAT:
  023b3	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$15[ebp]
  023b9	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1165[ebp]
  023bf	89 02		 mov	 DWORD PTR [edx], eax
$LN115@RETURN_DAT:
  023c1	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  023c5	75 71		 jne	 SHORT $LN116@RETURN_DAT
  023c7	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  023cb	75 6b		 jne	 SHORT $LN116@RETURN_DAT
  023cd	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  023d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  023d3	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  023d7	f2 0f 11 85 9c
	fb ff ff	 movsd	 QWORD PTR _bool_val$12[ebp], xmm0
  023df	f2 0f 10 85 9c
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$12[ebp]
  023e7	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  023ef	9f		 lahf
  023f0	f6 c4 44	 test	 ah, 68			; 00000044H
  023f3	7b 2b		 jnp	 SHORT $LN252@RETURN_DAT
  023f5	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  023f8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  023fb	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2521[ebp], ecx
  02401	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2521[ebp]
  02407	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2521[ebp]
  0240d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0240f	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  02412	74 0c		 je	 SHORT $LN252@RETURN_DAT
  02414	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1175[ebp], 1
  0241e	eb 0a		 jmp	 SHORT $LN253@RETURN_DAT
$LN252@RETURN_DAT:
  02420	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1175[ebp], 0
$LN253@RETURN_DAT:
  0242a	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$15[ebp]
  02430	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR tv1175[ebp]
  02436	89 02		 mov	 DWORD PTR [edx], eax
$LN116@RETURN_DAT:
  02438	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  0243c	75 71		 jne	 SHORT $LN117@RETURN_DAT
  0243e	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  02442	75 6b		 jne	 SHORT $LN117@RETURN_DAT
  02444	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02447	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0244a	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  0244e	f2 0f 11 85 8c
	fb ff ff	 movsd	 QWORD PTR _bool_val$11[ebp], xmm0
  02456	f2 0f 10 85 8c
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$11[ebp]
  0245e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02466	9f		 lahf
  02467	f6 c4 44	 test	 ah, 68			; 00000044H
  0246a	7b 2b		 jnp	 SHORT $LN254@RETURN_DAT
  0246c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0246f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02472	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2534[ebp], ecx
  02478	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2534[ebp]
  0247e	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2534[ebp]
  02484	8b 0a		 mov	 ecx, DWORD PTR [edx]
  02486	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  02489	74 0c		 je	 SHORT $LN254@RETURN_DAT
  0248b	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1185[ebp], 1
  02495	eb 0a		 jmp	 SHORT $LN255@RETURN_DAT
$LN254@RETURN_DAT:
  02497	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1185[ebp], 0
$LN255@RETURN_DAT:
  024a1	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$15[ebp]
  024a7	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR tv1185[ebp]
  024ad	89 02		 mov	 DWORD PTR [edx], eax
$LN117@RETURN_DAT:
  024af	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  024b3	0f 85 81 00 00
	00		 jne	 $LN118@RETURN_DAT
  024b9	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  024bd	75 7b		 jne	 SHORT $LN118@RETURN_DAT
  024bf	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  024c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  024c5	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  024c9	f2 0f 11 85 7c
	fb ff ff	 movsd	 QWORD PTR _bool_val_1$10[ebp], xmm0
  024d1	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  024d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  024d7	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  024db	f2 0f 11 85 6c
	fb ff ff	 movsd	 QWORD PTR _bool_val_2$9[ebp], xmm0
  024e3	f2 0f 10 85 7c
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$10[ebp]
  024eb	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  024f3	9f		 lahf
  024f4	f6 c4 44	 test	 ah, 68			; 00000044H
  024f7	7b 22		 jnp	 SHORT $LN256@RETURN_DAT
  024f9	f2 0f 10 85 6c
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val_2$9[ebp]
  02501	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02509	9f		 lahf
  0250a	f6 c4 44	 test	 ah, 68			; 00000044H
  0250d	7b 0c		 jnp	 SHORT $LN256@RETURN_DAT
  0250f	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1196[ebp], 1
  02519	eb 0a		 jmp	 SHORT $LN257@RETURN_DAT
$LN256@RETURN_DAT:
  0251b	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1196[ebp], 0
$LN257@RETURN_DAT:
  02525	8b 85 cc fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$15[ebp]
  0252b	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1196[ebp]
  02531	89 08		 mov	 DWORD PTR [eax], ecx
  02533	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN118@RETURN_DAT:
  0253a	8b f4		 mov	 esi, esp
  0253c	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0253f	50		 push	 eax
  02540	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  02546	83 c4 04	 add	 esp, 4
  02549	3b f4		 cmp	 esi, esp
  0254b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02550	8b f4		 mov	 esi, esp
  02552	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  02555	51		 push	 ecx
  02556	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0255c	83 c4 04	 add	 esp, 4
  0255f	3b f4		 cmp	 esi, esp
  02561	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02566	6a 01		 push	 1
  02568	6a 05		 push	 5
  0256a	6a 00		 push	 0
  0256c	6a 00		 push	 0
  0256e	6a 00		 push	 0
  02570	6a 00		 push	 0
  02572	8b 85 cc fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$15[ebp]
  02578	50		 push	 eax
  02579	6a 00		 push	 0
  0257b	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  02580	83 c4 20	 add	 esp, 32			; 00000020H
  02583	e9 7b 05 00 00	 jmp	 $LN1@RETURN_DAT
$LN119@RETURN_DAT:

; 160  : 	case TT_OR:              DATATYPE_OPERATION_CMP(leftVal, rightVal, dt_left, dt_right, || );

  02588	8b f4		 mov	 esi, esp
  0258a	6a 04		 push	 4
  0258c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  02592	83 c4 04	 add	 esp, 4
  02595	3b f4		 cmp	 esi, esp
  02597	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0259c	89 85 60 fb ff
	ff		 mov	 DWORD PTR _boolRes$8[ebp], eax
  025a2	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$8[ebp]
  025a8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  025ae	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  025b2	75 5a		 jne	 SHORT $LN120@RETURN_DAT
  025b4	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  025b8	75 54		 jne	 SHORT $LN120@RETURN_DAT
  025ba	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  025bd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  025c0	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  025c4	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  025cc	9f		 lahf
  025cd	f6 c4 44	 test	 ah, 68			; 00000044H
  025d0	7a 24		 jp	 SHORT $LN258@RETURN_DAT
  025d2	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  025d5	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  025d8	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  025dc	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  025e4	9f		 lahf
  025e5	f6 c4 44	 test	 ah, 68			; 00000044H
  025e8	7a 0c		 jp	 SHORT $LN258@RETURN_DAT
  025ea	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1220[ebp], 0
  025f4	eb 0a		 jmp	 SHORT $LN259@RETURN_DAT
$LN258@RETURN_DAT:
  025f6	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1220[ebp], 1
$LN259@RETURN_DAT:
  02600	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$8[ebp]
  02606	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv1220[ebp]
  0260c	89 11		 mov	 DWORD PTR [ecx], edx
$LN120@RETURN_DAT:
  0260e	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  02612	75 61		 jne	 SHORT $LN121@RETURN_DAT
  02614	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  02618	75 5b		 jne	 SHORT $LN121@RETURN_DAT
  0261a	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0261d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02620	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2578[ebp], ecx
  02626	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2578[ebp]
  0262c	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2578[ebp]
  02632	8b 0a		 mov	 ecx, DWORD PTR [edx]
  02634	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  02637	75 24		 jne	 SHORT $LN260@RETURN_DAT
  02639	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0263c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0263f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  02643	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0264b	9f		 lahf
  0264c	f6 c4 44	 test	 ah, 68			; 00000044H
  0264f	7a 0c		 jp	 SHORT $LN260@RETURN_DAT
  02651	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1229[ebp], 0
  0265b	eb 0a		 jmp	 SHORT $LN261@RETURN_DAT
$LN260@RETURN_DAT:
  0265d	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1229[ebp], 1
$LN261@RETURN_DAT:
  02667	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$8[ebp]
  0266d	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1229[ebp]
  02673	89 11		 mov	 DWORD PTR [ecx], edx
$LN121@RETURN_DAT:
  02675	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  02679	75 61		 jne	 SHORT $LN122@RETURN_DAT
  0267b	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  0267f	75 5b		 jne	 SHORT $LN122@RETURN_DAT
  02681	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02684	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02687	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0268b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02693	9f		 lahf
  02694	f6 c4 44	 test	 ah, 68			; 00000044H
  02697	7a 2b		 jp	 SHORT $LN262@RETURN_DAT
  02699	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0269c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0269f	89 85 9c f8 ff
	ff		 mov	 DWORD PTR tv2595[ebp], eax
  026a5	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv2595[ebp]
  026ab	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2595[ebp]
  026b1	8b 01		 mov	 eax, DWORD PTR [ecx]
  026b3	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  026b6	75 0c		 jne	 SHORT $LN262@RETURN_DAT
  026b8	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1238[ebp], 0
  026c2	eb 0a		 jmp	 SHORT $LN263@RETURN_DAT
$LN262@RETURN_DAT:
  026c4	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1238[ebp], 1
$LN263@RETURN_DAT:
  026ce	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$8[ebp]
  026d4	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv1238[ebp]
  026da	89 11		 mov	 DWORD PTR [ecx], edx
$LN122@RETURN_DAT:
  026dc	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  026e0	75 68		 jne	 SHORT $LN123@RETURN_DAT
  026e2	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  026e6	75 62		 jne	 SHORT $LN123@RETURN_DAT
  026e8	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  026eb	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  026ee	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2604[ebp], ecx
  026f4	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2604[ebp]
  026fa	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2604[ebp]
  02700	8b 0a		 mov	 ecx, DWORD PTR [edx]
  02702	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  02705	75 2b		 jne	 SHORT $LN264@RETURN_DAT
  02707	8b 55 0c	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0270a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0270d	89 85 98 f8 ff
	ff		 mov	 DWORD PTR tv2611[ebp], eax
  02713	8b 8d 98 f8 ff
	ff		 mov	 ecx, DWORD PTR tv2611[ebp]
  02719	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR tv2611[ebp]
  0271f	8b 01		 mov	 eax, DWORD PTR [ecx]
  02721	0b 42 04	 or	 eax, DWORD PTR [edx+4]
  02724	75 0c		 jne	 SHORT $LN264@RETURN_DAT
  02726	c7 85 94 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1247[ebp], 0
  02730	eb 0a		 jmp	 SHORT $LN265@RETURN_DAT
$LN264@RETURN_DAT:
  02732	c7 85 94 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1247[ebp], 1
$LN265@RETURN_DAT:
  0273c	8b 8d 60 fb ff
	ff		 mov	 ecx, DWORD PTR _boolRes$8[ebp]
  02742	8b 95 94 f8 ff
	ff		 mov	 edx, DWORD PTR tv1247[ebp]
  02748	89 11		 mov	 DWORD PTR [ecx], edx
$LN123@RETURN_DAT:
  0274a	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0274e	75 6a		 jne	 SHORT $LN124@RETURN_DAT
  02750	83 7d 18 02	 cmp	 DWORD PTR _dt_right$[ebp], 2
  02754	75 64		 jne	 SHORT $LN124@RETURN_DAT
  02756	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02759	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0275c	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  02760	f2 0f 11 85 50
	fb ff ff	 movsd	 QWORD PTR _bool_val$7[ebp], xmm0
  02768	f2 0f 10 85 50
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$7[ebp]
  02770	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02778	9f		 lahf
  02779	f6 c4 44	 test	 ah, 68			; 00000044H
  0277c	7a 24		 jp	 SHORT $LN266@RETURN_DAT
  0277e	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02781	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  02784	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  02788	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02790	9f		 lahf
  02791	f6 c4 44	 test	 ah, 68			; 00000044H
  02794	7a 0c		 jp	 SHORT $LN266@RETURN_DAT
  02796	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1257[ebp], 0
  027a0	eb 0a		 jmp	 SHORT $LN267@RETURN_DAT
$LN266@RETURN_DAT:
  027a2	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1257[ebp], 1
$LN267@RETURN_DAT:
  027ac	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$8[ebp]
  027b2	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1257[ebp]
  027b8	89 02		 mov	 DWORD PTR [edx], eax
$LN124@RETURN_DAT:
  027ba	83 7d 14 02	 cmp	 DWORD PTR _dt_left$[ebp], 2
  027be	75 6a		 jne	 SHORT $LN125@RETURN_DAT
  027c0	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  027c4	75 64		 jne	 SHORT $LN125@RETURN_DAT
  027c6	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  027c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  027cc	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  027d0	f2 0f 11 85 40
	fb ff ff	 movsd	 QWORD PTR _bool_val$6[ebp], xmm0
  027d8	f2 0f 10 85 40
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$6[ebp]
  027e0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  027e8	9f		 lahf
  027e9	f6 c4 44	 test	 ah, 68			; 00000044H
  027ec	7a 24		 jp	 SHORT $LN268@RETURN_DAT
  027ee	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  027f1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  027f4	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  027f8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02800	9f		 lahf
  02801	f6 c4 44	 test	 ah, 68			; 00000044H
  02804	7a 0c		 jp	 SHORT $LN268@RETURN_DAT
  02806	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1267[ebp], 0
  02810	eb 0a		 jmp	 SHORT $LN269@RETURN_DAT
$LN268@RETURN_DAT:
  02812	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1267[ebp], 1
$LN269@RETURN_DAT:
  0281c	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$8[ebp]
  02822	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv1267[ebp]
  02828	89 02		 mov	 DWORD PTR [edx], eax
$LN125@RETURN_DAT:
  0282a	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0282e	75 71		 jne	 SHORT $LN126@RETURN_DAT
  02830	83 7d 18 00	 cmp	 DWORD PTR _dt_right$[ebp], 0
  02834	75 6b		 jne	 SHORT $LN126@RETURN_DAT
  02836	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  02839	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0283c	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  02840	f2 0f 11 85 30
	fb ff ff	 movsd	 QWORD PTR _bool_val$5[ebp], xmm0
  02848	f2 0f 10 85 30
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$5[ebp]
  02850	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02858	9f		 lahf
  02859	f6 c4 44	 test	 ah, 68			; 00000044H
  0285c	7a 2b		 jp	 SHORT $LN270@RETURN_DAT
  0285e	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  02861	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02864	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2644[ebp], ecx
  0286a	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2644[ebp]
  02870	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2644[ebp]
  02876	8b 0a		 mov	 ecx, DWORD PTR [edx]
  02878	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  0287b	75 0c		 jne	 SHORT $LN270@RETURN_DAT
  0287d	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1277[ebp], 0
  02887	eb 0a		 jmp	 SHORT $LN271@RETURN_DAT
$LN270@RETURN_DAT:
  02889	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1277[ebp], 1
$LN271@RETURN_DAT:
  02893	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$8[ebp]
  02899	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR tv1277[ebp]
  0289f	89 02		 mov	 DWORD PTR [edx], eax
$LN126@RETURN_DAT:
  028a1	83 7d 14 00	 cmp	 DWORD PTR _dt_left$[ebp], 0
  028a5	75 71		 jne	 SHORT $LN127@RETURN_DAT
  028a7	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  028ab	75 6b		 jne	 SHORT $LN127@RETURN_DAT
  028ad	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  028b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  028b3	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  028b7	f2 0f 11 85 20
	fb ff ff	 movsd	 QWORD PTR _bool_val$4[ebp], xmm0
  028bf	f2 0f 10 85 20
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val$4[ebp]
  028c7	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  028cf	9f		 lahf
  028d0	f6 c4 44	 test	 ah, 68			; 00000044H
  028d3	7a 2b		 jp	 SHORT $LN272@RETURN_DAT
  028d5	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  028d8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  028db	89 8d 9c f8 ff
	ff		 mov	 DWORD PTR tv2657[ebp], ecx
  028e1	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR tv2657[ebp]
  028e7	8b 85 9c f8 ff
	ff		 mov	 eax, DWORD PTR tv2657[ebp]
  028ed	8b 0a		 mov	 ecx, DWORD PTR [edx]
  028ef	0b 48 04	 or	 ecx, DWORD PTR [eax+4]
  028f2	75 0c		 jne	 SHORT $LN272@RETURN_DAT
  028f4	c7 85 98 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1287[ebp], 0
  028fe	eb 0a		 jmp	 SHORT $LN273@RETURN_DAT
$LN272@RETURN_DAT:
  02900	c7 85 98 f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1287[ebp], 1
$LN273@RETURN_DAT:
  0290a	8b 95 60 fb ff
	ff		 mov	 edx, DWORD PTR _boolRes$8[ebp]
  02910	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR tv1287[ebp]
  02916	89 02		 mov	 DWORD PTR [edx], eax
$LN127@RETURN_DAT:
  02918	83 7d 14 05	 cmp	 DWORD PTR _dt_left$[ebp], 5
  0291c	0f 85 81 00 00
	00		 jne	 $LN128@RETURN_DAT
  02922	83 7d 18 05	 cmp	 DWORD PTR _dt_right$[ebp], 5
  02926	75 7b		 jne	 SHORT $LN128@RETURN_DAT
  02928	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0292b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0292e	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  02932	f2 0f 11 85 10
	fb ff ff	 movsd	 QWORD PTR _bool_val_1$3[ebp], xmm0
  0293a	8b 45 0c	 mov	 eax, DWORD PTR _rightVal$[ebp]
  0293d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02940	f2 0f 2a 01	 cvtsi2sd xmm0, DWORD PTR [ecx]
  02944	f2 0f 11 85 00
	fb ff ff	 movsd	 QWORD PTR _bool_val_2$2[ebp], xmm0
  0294c	f2 0f 10 85 10
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val_1$3[ebp]
  02954	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0295c	9f		 lahf
  0295d	f6 c4 44	 test	 ah, 68			; 00000044H
  02960	7a 22		 jp	 SHORT $LN274@RETURN_DAT
  02962	f2 0f 10 85 00
	fb ff ff	 movsd	 xmm0, QWORD PTR _bool_val_2$2[ebp]
  0296a	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  02972	9f		 lahf
  02973	f6 c4 44	 test	 ah, 68			; 00000044H
  02976	7a 0c		 jp	 SHORT $LN274@RETURN_DAT
  02978	c7 85 9c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1298[ebp], 0
  02982	eb 0a		 jmp	 SHORT $LN275@RETURN_DAT
$LN274@RETURN_DAT:
  02984	c7 85 9c f8 ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1298[ebp], 1
$LN275@RETURN_DAT:
  0298e	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$8[ebp]
  02994	8b 8d 9c f8 ff
	ff		 mov	 ecx, DWORD PTR tv1298[ebp]
  0299a	89 08		 mov	 DWORD PTR [eax], ecx
  0299c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _init$[ebp], 1
$LN128@RETURN_DAT:
  029a3	8b f4		 mov	 esi, esp
  029a5	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  029a8	50		 push	 eax
  029a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  029af	83 c4 04	 add	 esp, 4
  029b2	3b f4		 cmp	 esi, esp
  029b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  029b9	8b f4		 mov	 esi, esp
  029bb	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  029be	51		 push	 ecx
  029bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  029c5	83 c4 04	 add	 esp, 4
  029c8	3b f4		 cmp	 esi, esp
  029ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  029cf	6a 01		 push	 1
  029d1	6a 05		 push	 5
  029d3	6a 00		 push	 0
  029d5	6a 00		 push	 0
  029d7	6a 00		 push	 0
  029d9	6a 00		 push	 0
  029db	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR _boolRes$8[ebp]
  029e1	50		 push	 eax
  029e2	6a 00		 push	 0
  029e4	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  029e9	83 c4 20	 add	 esp, 32			; 00000020H
  029ec	e9 12 01 00 00	 jmp	 $LN1@RETURN_DAT
$LN2@RETURN_DAT:

; 161  : 
; 162  : 
; 163  : 
; 164  : 	}
; 165  : 	free(leftVal), free(rightVal);

  029f1	8b f4		 mov	 esi, esp
  029f3	8b 45 08	 mov	 eax, DWORD PTR _leftVal$[ebp]
  029f6	50		 push	 eax
  029f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  029fd	83 c4 04	 add	 esp, 4
  02a00	3b f4		 cmp	 esi, esp
  02a02	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02a07	8b f4		 mov	 esi, esp
  02a09	8b 4d 0c	 mov	 ecx, DWORD PTR _rightVal$[ebp]
  02a0c	51		 push	 ecx
  02a0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  02a13	83 c4 04	 add	 esp, 4
  02a16	3b f4		 cmp	 esi, esp
  02a18	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  : 	long long res_long = *result;

  02a1d	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  02a20	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  02a24	e8 00 00 00 00	 call	 __dtol3
  02a29	89 85 f0 fa ff
	ff		 mov	 DWORD PTR _res_long$[ebp], eax
  02a2f	89 95 f4 fa ff
	ff		 mov	 DWORD PTR _res_long$[ebp+4], edx

; 167  : 	if (init == 0)

  02a35	83 7d f8 00	 cmp	 DWORD PTR _init$[ebp], 0
  02a39	75 1e		 jne	 SHORT $LN129@RETURN_DAT

; 168  : 	{
; 169  : 		printf("[ERROR] invalid datatype\n");

  02a3b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
  02a40	e8 00 00 00 00	 call	 _printf
  02a45	83 c4 04	 add	 esp, 4

; 170  : 		exit(1);

  02a48	8b f4		 mov	 esi, esp
  02a4a	6a 01		 push	 1
  02a4c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  02a52	3b f4		 cmp	 esi, esp
  02a54	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN129@RETURN_DAT:

; 171  : 	}
; 172  : 	if ((*result / res_long) == 1)

  02a59	8b 95 f4 fa ff
	ff		 mov	 edx, DWORD PTR _res_long$[ebp+4]
  02a5f	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR _res_long$[ebp]
  02a65	e8 00 00 00 00	 call	 __ltod3
  02a6a	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  02a6d	f2 0f 10 08	 movsd	 xmm1, QWORD PTR [eax]
  02a71	f2 0f 5e c8	 divsd	 xmm1, xmm0
  02a75	66 0f 2e 0d 00
	00 00 00	 ucomisd xmm1, QWORD PTR __real@3ff0000000000000
  02a7d	9f		 lahf
  02a7e	f6 c4 44	 test	 ah, 68			; 00000044H
  02a81	7a 66		 jp	 SHORT $LN130@RETURN_DAT

; 173  : 	{
; 174  : 		long long* res_int = malloc(sizeof(long long));

  02a83	8b f4		 mov	 esi, esp
  02a85	6a 08		 push	 8
  02a87	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  02a8d	83 c4 04	 add	 esp, 4
  02a90	3b f4		 cmp	 esi, esp
  02a92	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02a97	89 85 e4 fa ff
	ff		 mov	 DWORD PTR _res_int$1[ebp], eax

; 175  : 		*res_int = (long long)*result;

  02a9d	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  02aa0	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  02aa4	e8 00 00 00 00	 call	 __dtol3
  02aa9	8b 8d e4 fa ff
	ff		 mov	 ecx, DWORD PTR _res_int$1[ebp]
  02aaf	89 01		 mov	 DWORD PTR [ecx], eax
  02ab1	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 176  : 		free(result);

  02ab4	8b f4		 mov	 esi, esp
  02ab6	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  02ab9	50		 push	 eax
  02aba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  02ac0	83 c4 04	 add	 esp, 4
  02ac3	3b f4		 cmp	 esi, esp
  02ac5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  : 		return new_DATA_STRUCT(NULL, NULL, NULL, res_int, NULL, DT_INT, 1);

  02aca	6a 01		 push	 1
  02acc	6a 00		 push	 0
  02ace	6a 00		 push	 0
  02ad0	8b 85 e4 fa ff
	ff		 mov	 eax, DWORD PTR _res_int$1[ebp]
  02ad6	99		 cdq
  02ad7	52		 push	 edx
  02ad8	50		 push	 eax
  02ad9	6a 00		 push	 0
  02adb	6a 00		 push	 0
  02add	6a 00		 push	 0
  02adf	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  02ae4	83 c4 20	 add	 esp, 32			; 00000020H
  02ae7	eb 1a		 jmp	 SHORT $LN1@RETURN_DAT
$LN130@RETURN_DAT:

; 178  : 	}
; 179  : 	return new_DATA_STRUCT(NULL, NULL, result, NULL, NULL, DT_FLOAT, 1);

  02ae9	6a 01		 push	 1
  02aeb	6a 02		 push	 2
  02aed	6a 00		 push	 0
  02aef	6a 00		 push	 0
  02af1	6a 00		 push	 0
  02af3	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
  02af6	50		 push	 eax
  02af7	6a 00		 push	 0
  02af9	6a 00		 push	 0
  02afb	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  02b00	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@RETURN_DAT:

; 180  : }

  02b03	5f		 pop	 edi
  02b04	5e		 pop	 esi
  02b05	5b		 pop	 ebx
  02b06	81 c4 6c 07 00
	00		 add	 esp, 1900		; 0000076cH
  02b0c	3b ec		 cmp	 ebp, esp
  02b0e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02b13	8b e5		 mov	 esp, ebp
  02b15	5d		 pop	 ebp
  02b16	c3		 ret	 0
  02b17	90		 npad	 1
$LN277@RETURN_DAT:
  02b18	00 00 00 00	 DD	 $LN4@RETURN_DAT
  02b1c	00 00 00 00	 DD	 $LN14@RETURN_DAT
  02b20	00 00 00 00	 DD	 $LN24@RETURN_DAT
  02b24	00 00 00 00	 DD	 $LN34@RETURN_DAT
  02b28	00 00 00 00	 DD	 $LN44@RETURN_DAT
  02b2c	00 00 00 00	 DD	 $LN49@RETURN_DAT
  02b30	00 00 00 00	 DD	 $LN109@RETURN_DAT
  02b34	00 00 00 00	 DD	 $LN119@RETURN_DAT
  02b38	00 00 00 00	 DD	 $LN59@RETURN_DAT
  02b3c	00 00 00 00	 DD	 $LN89@RETURN_DAT
  02b40	00 00 00 00	 DD	 $LN99@RETURN_DAT
  02b44	00 00 00 00	 DD	 $LN69@RETURN_DAT
  02b48	00 00 00 00	 DD	 $LN79@RETURN_DAT
  02b4c	00 00 00 00	 DD	 $LN2@RETURN_DAT
$LN276@RETURN_DAT:
  02b50	00		 DB	 0
  02b51	01		 DB	 1
  02b52	02		 DB	 2
  02b53	03		 DB	 3
  02b54	04		 DB	 4
  02b55	0d		 DB	 13			; 0000000dH
  02b56	0d		 DB	 13			; 0000000dH
  02b57	0d		 DB	 13			; 0000000dH
  02b58	0d		 DB	 13			; 0000000dH
  02b59	0d		 DB	 13			; 0000000dH
  02b5a	0d		 DB	 13			; 0000000dH
  02b5b	0d		 DB	 13			; 0000000dH
  02b5c	0d		 DB	 13			; 0000000dH
  02b5d	0d		 DB	 13			; 0000000dH
  02b5e	0d		 DB	 13			; 0000000dH
  02b5f	0d		 DB	 13			; 0000000dH
  02b60	0d		 DB	 13			; 0000000dH
  02b61	0d		 DB	 13			; 0000000dH
  02b62	0d		 DB	 13			; 0000000dH
  02b63	0d		 DB	 13			; 0000000dH
  02b64	0d		 DB	 13			; 0000000dH
  02b65	0d		 DB	 13			; 0000000dH
  02b66	05		 DB	 5
  02b67	06		 DB	 6
  02b68	07		 DB	 7
  02b69	0d		 DB	 13			; 0000000dH
  02b6a	08		 DB	 8
  02b6b	09		 DB	 9
  02b6c	0a		 DB	 10			; 0000000aH
  02b6d	0b		 DB	 11			; 0000000bH
  02b6e	0c		 DB	 12			; 0000000cH
_RETURN_DATATYPE_NUM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _interpretMainAST
_TEXT	SEGMENT
tv308 = -292						; size = 4
tv84 = -292						; size = 4
_cmp_expr_dt$1 = -92					; size = 4
_cmp_expr$2 = -80					; size = 4
_curID$3 = -68						; size = 4
_saveVarName$4 = -56					; size = 4
_curNodeData$5 = -44					; size = 4
_struct_dt$6 = -32					; size = 4
_printVal_struct$7 = -20				; size = 4
_curNode$ = -8						; size = 4
_root$ = 8						; size = 4
_interpretMainAST PROC					; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00012	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __36662879_interpretAST@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  : 	struct AST_Node* curNode = root;

  00028	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  0002b	89 45 f8	 mov	 DWORD PTR _curNode$[ebp], eax
$LN2@interpretM:

; 273  : 	while (curNode != NULL)

  0002e	83 7d f8 00	 cmp	 DWORD PTR _curNode$[ebp], 0
  00032	0f 84 05 03 00
	00		 je	 $LN3@interpretM

; 274  : 	{
; 275  : 		if (curNode->tokenType == TT_PRINT)

  00038	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0003b	83 78 10 07	 cmp	 DWORD PTR [eax+16], 7
  0003f	0f 85 ad 00 00
	00		 jne	 $LN6@interpretM

; 276  : 		{
; 277  : 			struct DATA_STRUCT* printVal_struct = interpretAST_int(curNode->left);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00048	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _interpretAST_int
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 ec	 mov	 DWORD PTR _printVal_struct$7[ebp], eax

; 278  : 			int struct_dt = printVal_struct->dataType;

  00057	8b 45 ec	 mov	 eax, DWORD PTR _printVal_struct$7[ebp]
  0005a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005d	89 4d e0	 mov	 DWORD PTR _struct_dt$6[ebp], ecx

; 279  : 			if (struct_dt == DT_INT)

  00060	83 7d e0 00	 cmp	 DWORD PTR _struct_dt$6[ebp], 0
  00064	75 1c		 jne	 SHORT $LN8@interpretM

; 280  : 			{
; 281  : 				printf("%lld\n", *(printVal_struct->intVal));

  00066	8b 45 ec	 mov	 eax, DWORD PTR _printVal_struct$7[ebp]
  00069	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006f	52		 push	 edx
  00070	8b 01		 mov	 eax, DWORD PTR [ecx]
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_05IBFPJDFI@?$CFlld?6@
  00078	e8 00 00 00 00	 call	 _printf
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  : 			}

  00080	eb 6b		 jmp	 SHORT $LN4@interpretM
$LN8@interpretM:

; 283  : 			else if (struct_dt == DT_FLOAT)

  00082	83 7d e0 02	 cmp	 DWORD PTR _struct_dt$6[ebp], 2
  00086	75 21		 jne	 SHORT $LN10@interpretM

; 284  : 			{
; 285  : 				printf("%Lf\n", *(printVal_struct->doubleVal));

  00088	8b 45 ec	 mov	 eax, DWORD PTR _printVal_struct$7[ebp]
  0008b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008e	83 ec 08	 sub	 esp, 8
  00091	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00095	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_04FHILBAAL@?$CFLf?6@
  0009f	e8 00 00 00 00	 call	 _printf
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 286  : 			}

  000a7	eb 44		 jmp	 SHORT $LN4@interpretM
$LN10@interpretM:

; 287  : 
; 288  : 			else if (struct_dt == DT_BOOL)

  000a9	83 7d e0 05	 cmp	 DWORD PTR _struct_dt$6[ebp], 5
  000ad	75 3e		 jne	 SHORT $LN4@interpretM

; 289  : 			{
; 290  : 				switch (*(printVal_struct->boolVal))

  000af	8b 45 ec	 mov	 eax, DWORD PTR _printVal_struct$7[ebp]
  000b2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b7	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv84[ebp], edx
  000bd	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv84[ebp], 0
  000c4	74 0b		 je	 SHORT $LN13@interpretM
  000c6	83 bd dc fe ff
	ff 01		 cmp	 DWORD PTR tv84[ebp], 1
  000cd	74 11		 je	 SHORT $LN14@interpretM
  000cf	eb 1c		 jmp	 SHORT $LN4@interpretM
$LN13@interpretM:

; 291  : 				{
; 292  : 				case 0: printf("false\n"); break;

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_06NIOGPBNO@false?6@
  000d6	e8 00 00 00 00	 call	 _printf
  000db	83 c4 04	 add	 esp, 4
  000de	eb 0d		 jmp	 SHORT $LN4@interpretM
$LN14@interpretM:

; 293  : 				case 1: printf("true\n");  break;

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_05LFIOBDML@true?6@
  000e5	e8 00 00 00 00	 call	 _printf
  000ea	83 c4 04	 add	 esp, 4
$LN4@interpretM:

; 294  : 				}
; 295  : 			}
; 296  : 		}

  000ed	e9 3d 02 00 00	 jmp	 $LN33@interpretM
$LN6@interpretM:

; 297  : 
; 298  : 		else if (curNode->tokenType == TT_IDENT)

  000f2	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  000f5	83 78 10 12	 cmp	 DWORD PTR [eax+16], 18	; 00000012H
  000f9	0f 85 4a 01 00
	00		 jne	 $LN15@interpretM

; 299  : 		{
; 300  : 			struct IDENT_tokenData* curNodeData = (struct IDENT_tokenData*)curNode->otherData;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00102	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00105	89 4d d4	 mov	 DWORD PTR _curNodeData$5[ebp], ecx

; 301  : 			char* saveVarName = calloc(strlen(curNode->varName), sizeof(char));

  00108	8b f4		 mov	 esi, esp
  0010a	6a 01		 push	 1
  0010c	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0010f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 _strlen
  00118	83 c4 04	 add	 esp, 4
  0011b	50		 push	 eax
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00122	83 c4 08	 add	 esp, 8
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012c	89 45 c8	 mov	 DWORD PTR _saveVarName$4[ebp], eax

; 302  : 			saveVarName = strcpy(saveVarName, curNode->varName);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00132	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00135	51		 push	 ecx
  00136	8b 55 c8	 mov	 edx, DWORD PTR _saveVarName$4[ebp]
  00139	52		 push	 edx
  0013a	e8 00 00 00 00	 call	 _strcpy
  0013f	83 c4 08	 add	 esp, 8
  00142	89 45 c8	 mov	 DWORD PTR _saveVarName$4[ebp], eax

; 303  : 			if (curNodeData->init == 0)

  00145	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  00148	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0014c	75 3c		 jne	 SHORT $LN17@interpretM

; 304  : 			{
; 305  : 				symtable_add(saveVarName, newID_token(DT_INT, 0, 0, saveVarName, 1, new_DATA_STRUCT(NULL, NULL, NULL, NULL, NULL, -1, 1)));

  0014e	6a 01		 push	 1
  00150	6a ff		 push	 -1
  00152	6a 00		 push	 0
  00154	6a 00		 push	 0
  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	6a 00		 push	 0
  0015e	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  00163	83 c4 20	 add	 esp, 32			; 00000020H
  00166	50		 push	 eax
  00167	6a 01		 push	 1
  00169	8b 45 c8	 mov	 eax, DWORD PTR _saveVarName$4[ebp]
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	6a 00		 push	 0
  00171	6a 00		 push	 0
  00173	6a 00		 push	 0
  00175	e8 00 00 00 00	 call	 _newID_token
  0017a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0017d	50		 push	 eax
  0017e	8b 4d c8	 mov	 ecx, DWORD PTR _saveVarName$4[ebp]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 _symtable_add
  00187	83 c4 08	 add	 esp, 8
$LN17@interpretM:

; 306  : 			}
; 307  : 			if (curNodeData->init == 1)

  0018a	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  0018d	83 78 08 01	 cmp	 DWORD PTR [eax+8], 1
  00191	0f 85 97 00 00
	00		 jne	 $LN21@interpretM

; 308  : 			{
; 309  : 				if (curNodeData->var == 1)

  00197	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  0019a	83 78 18 01	 cmp	 DWORD PTR [eax+24], 1
  0019e	75 35		 jne	 SHORT $LN19@interpretM

; 310  : 				{
; 311  : 					symtable_add(saveVarName, newID_token(DT_INT, 1, 0, saveVarName, 1, interpretAST_int(curNode->left)));

  001a0	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  001a3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 _interpretAST_int
  001ac	83 c4 04	 add	 esp, 4
  001af	50		 push	 eax
  001b0	6a 01		 push	 1
  001b2	8b 55 c8	 mov	 edx, DWORD PTR _saveVarName$4[ebp]
  001b5	52		 push	 edx
  001b6	6a 00		 push	 0
  001b8	6a 00		 push	 0
  001ba	6a 01		 push	 1
  001bc	6a 00		 push	 0
  001be	e8 00 00 00 00	 call	 _newID_token
  001c3	83 c4 1c	 add	 esp, 28			; 0000001cH
  001c6	50		 push	 eax
  001c7	8b 45 c8	 mov	 eax, DWORD PTR _saveVarName$4[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 _symtable_add
  001d0	83 c4 08	 add	 esp, 8

; 312  : 				}

  001d3	eb 59		 jmp	 SHORT $LN21@interpretM
$LN19@interpretM:

; 313  : 				else if (curNodeData->var == 0)

  001d5	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  001d8	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  001dc	75 50		 jne	 SHORT $LN21@interpretM

; 314  : 				{
; 315  : 					struct IDENT_tokenData* curID = symtable_getItem(curNodeData->varName);

  001de	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  001e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e3	51		 push	 ecx
  001e4	e8 00 00 00 00	 call	 _symtable_getItem
  001e9	83 c4 04	 add	 esp, 4
  001ec	89 45 bc	 mov	 DWORD PTR _curID$3[ebp], eax

; 316  : 					if (curID == NULL)

  001ef	83 7d bc 00	 cmp	 DWORD PTR _curID$3[ebp], 0
  001f3	75 24		 jne	 SHORT $LN22@interpretM

; 317  : 					{
; 318  : 						printf("[SYNTAX ERROR] variable '%s' has not been initialized\n", curNodeData->varName);

  001f5	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  001f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fa	51		 push	 ecx
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@FNIBEMKD@?$FLSYNTAX?5ERROR?$FN?5variable?5?8?$CFs?8?5ha@
  00200	e8 00 00 00 00	 call	 _printf
  00205	83 c4 08	 add	 esp, 8

; 319  : 						exit(1);

  00208	8b f4		 mov	 esi, esp
  0020a	6a 01		 push	 1
  0020c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00212	3b f4		 cmp	 esi, esp
  00214	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@interpretM:

; 320  : 					}
; 321  : 					curID->data = interpretAST_int(curNode->left);

  00219	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0021c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 _interpretAST_int
  00225	83 c4 04	 add	 esp, 4
  00228	8b 55 bc	 mov	 edx, DWORD PTR _curID$3[ebp]
  0022b	89 42 1c	 mov	 DWORD PTR [edx+28], eax
$LN21@interpretM:

; 322  : 				}
; 323  : 			}
; 324  : 
; 325  : 			free(curNodeData);

  0022e	8b f4		 mov	 esi, esp
  00230	8b 45 d4	 mov	 eax, DWORD PTR _curNodeData$5[ebp]
  00233	50		 push	 eax
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0023a	83 c4 04	 add	 esp, 4
  0023d	3b f4		 cmp	 esi, esp
  0023f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 326  : 		}

  00244	e9 e6 00 00 00	 jmp	 $LN33@interpretM
$LN15@interpretM:

; 327  : 
; 328  : 		// todo: free ident_node
; 329  : 		else if (curNode->tokenType == TT_UNDEF)

  00249	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0024c	83 78 10 15	 cmp	 DWORD PTR [eax+16], 21	; 00000015H
  00250	75 17		 jne	 SHORT $LN23@interpretM

; 330  : 		{
; 331  : 			symtable_removeItem(curNode->left->varName);

  00252	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00255	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00258	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0025b	52		 push	 edx
  0025c	e8 00 00 00 00	 call	 _symtable_removeItem
  00261	83 c4 04	 add	 esp, 4

; 332  : 		}

  00264	e9 c6 00 00 00	 jmp	 $LN33@interpretM
$LN23@interpretM:

; 333  : 
; 334  : 
; 335  : 		else if (curNode->tokenType == TT_IF)

  00269	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0026c	83 78 10 08	 cmp	 DWORD PTR [eax+16], 8
  00270	0f 85 b9 00 00
	00		 jne	 $LN33@interpretM

; 336  : 		{
; 337  : 		    struct DATA_STRUCT* cmp_expr = interpretAST_int(curNode->left->left);

  00276	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00279	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0027c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0027f	52		 push	 edx
  00280	e8 00 00 00 00	 call	 _interpretAST_int
  00285	83 c4 04	 add	 esp, 4
  00288	89 45 b0	 mov	 DWORD PTR _cmp_expr$2[ebp], eax

; 338  : 			int cmp_expr_dt = cmp_expr->dataType;

  0028b	8b 45 b0	 mov	 eax, DWORD PTR _cmp_expr$2[ebp]
  0028e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00291	89 4d a4	 mov	 DWORD PTR _cmp_expr_dt$1[ebp], ecx

; 339  : 			if (cmp_expr_dt == DT_INT)

  00294	83 7d a4 00	 cmp	 DWORD PTR _cmp_expr_dt$1[ebp], 0
  00298	75 3a		 jne	 SHORT $LN26@interpretM

; 340  : 			{
; 341  : 				if (*(cmp_expr->intVal) == 1)

  0029a	8b 45 b0	 mov	 eax, DWORD PTR _cmp_expr$2[ebp]
  0029d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002a0	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv308[ebp], ecx
  002a6	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR tv308[ebp]
  002ac	83 3a 01	 cmp	 DWORD PTR [edx], 1
  002af	75 21		 jne	 SHORT $LN28@interpretM
  002b1	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv308[ebp]
  002b7	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  002bb	75 15		 jne	 SHORT $LN28@interpretM

; 342  : 				{
; 343  : 					interpretMainAST(curNode->left->right->left);

  002bd	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  002c0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002c3	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002c6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 _interpretMainAST
  002cf	83 c4 04	 add	 esp, 4
$LN28@interpretM:

; 344  : 				}
; 345  : 			}

  002d2	eb 5b		 jmp	 SHORT $LN33@interpretM
$LN26@interpretM:

; 346  : 
; 347  : 			else if (cmp_expr_dt == DT_FLOAT)

  002d4	83 7d a4 02	 cmp	 DWORD PTR _cmp_expr_dt$1[ebp], 2
  002d8	75 2f		 jne	 SHORT $LN29@interpretM

; 348  : 			{
; 349  : 				if (*(cmp_expr->doubleVal) == 1)

  002da	8b 45 b0	 mov	 eax, DWORD PTR _cmp_expr$2[ebp]
  002dd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002e0	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  002e4	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  002ec	9f		 lahf
  002ed	f6 c4 44	 test	 ah, 68			; 00000044H
  002f0	7a 15		 jp	 SHORT $LN31@interpretM

; 350  : 				{
; 351  : 					interpretMainAST(curNode->left->right->left);

  002f2	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  002f5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002f8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002fb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002fe	50		 push	 eax
  002ff	e8 00 00 00 00	 call	 _interpretMainAST
  00304	83 c4 04	 add	 esp, 4
$LN31@interpretM:

; 352  : 				}
; 353  : 			}

  00307	eb 26		 jmp	 SHORT $LN33@interpretM
$LN29@interpretM:

; 354  : 
; 355  : 			else if (cmp_expr_dt == DT_BOOL)

  00309	83 7d a4 05	 cmp	 DWORD PTR _cmp_expr_dt$1[ebp], 5
  0030d	75 20		 jne	 SHORT $LN33@interpretM

; 356  : 			{
; 357  : 				if (*(cmp_expr->boolVal) == 1)

  0030f	8b 45 b0	 mov	 eax, DWORD PTR _cmp_expr$2[ebp]
  00312	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00315	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00318	75 15		 jne	 SHORT $LN33@interpretM

; 358  : 				{
; 359  : 					interpretMainAST(curNode->left->right->left);

  0031a	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  0031d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00320	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00323	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00326	50		 push	 eax
  00327	e8 00 00 00 00	 call	 _interpretMainAST
  0032c	83 c4 04	 add	 esp, 4
$LN33@interpretM:

; 360  : 				}
; 361  : 			}
; 362  : 		}
; 363  : 
; 364  : 
; 365  : 
; 366  : 		curNode = curNode->right;

  0032f	8b 45 f8	 mov	 eax, DWORD PTR _curNode$[ebp]
  00332	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00335	89 4d f8	 mov	 DWORD PTR _curNode$[ebp], ecx

; 367  : 	}

  00338	e9 f1 fc ff ff	 jmp	 $LN2@interpretM
$LN3@interpretM:

; 368  : }

  0033d	5f		 pop	 edi
  0033e	5e		 pop	 esi
  0033f	5b		 pop	 ebx
  00340	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  00346	3b ec		 cmp	 ebp, esp
  00348	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034d	8b e5		 mov	 esp, ebp
  0034f	5d		 pop	 ebp
  00350	c3		 ret	 0
_interpretMainAST ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\interpretAST.c
;	COMDAT _interpretAST_int
_TEXT	SEGMENT
tv79 = -280						; size = 4
_dt$1 = -80						; size = 4
_dt_right$ = -68					; size = 4
_dt_left$ = -56						; size = 4
_tNode$ = -44						; size = 4
_curIdent$ = -32					; size = 4
_rightVal$ = -20					; size = 4
_leftVal$ = -8						; size = 4
_root$ = 8						; size = 4
_interpretAST_int PROC					; COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00012	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __36662879_interpretAST@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 187  : 	struct DATA_STRUCT* leftVal = NULL, * rightVal = NULL;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _leftVal$[ebp], 0
  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rightVal$[ebp], 0

; 188  : 	struct IDENT_tokenData* curIdent = NULL;

  00036	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _curIdent$[ebp], 0

; 189  : 	struct tableNode* tNode = NULL;

  0003d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _tNode$[ebp], 0

; 190  : 
; 191  : 	if (root->left != NULL)

  00044	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00047	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0004b	74 12		 je	 SHORT $LN4@interpretA

; 192  : 	{
; 193  : 		leftVal = interpretAST_int(root->left);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00050	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _interpretAST_int
  00059	83 c4 04	 add	 esp, 4
  0005c	89 45 f8	 mov	 DWORD PTR _leftVal$[ebp], eax
$LN4@interpretA:

; 194  : 	}
; 195  : 	if (root->right != NULL) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00062	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00066	74 12		 je	 SHORT $LN5@interpretA

; 196  : 		rightVal = interpretAST_int(root->right);

  00068	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  0006b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _interpretAST_int
  00074	83 c4 04	 add	 esp, 4
  00077	89 45 ec	 mov	 DWORD PTR _rightVal$[ebp], eax
$LN5@interpretA:

; 197  : 	}
; 198  : 
; 199  : 	int dt_left = -1;

  0007a	c7 45 c8 ff ff
	ff ff		 mov	 DWORD PTR _dt_left$[ebp], -1

; 200  : 	int dt_right = -1;

  00081	c7 45 bc ff ff
	ff ff		 mov	 DWORD PTR _dt_right$[ebp], -1

; 201  : 
; 202  : 	if (leftVal != NULL)

  00088	83 7d f8 00	 cmp	 DWORD PTR _leftVal$[ebp], 0
  0008c	74 09		 je	 SHORT $LN6@interpretA

; 203  : 	{
; 204  : 		dt_left = leftVal->dataType;

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00091	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00094	89 4d c8	 mov	 DWORD PTR _dt_left$[ebp], ecx
$LN6@interpretA:

; 205  : 	}
; 206  : 	if (rightVal != NULL)

  00097	83 7d ec 00	 cmp	 DWORD PTR _rightVal$[ebp], 0
  0009b	74 09		 je	 SHORT $LN7@interpretA

; 207  : 	{
; 208  : 		dt_right = rightVal->dataType;

  0009d	8b 45 ec	 mov	 eax, DWORD PTR _rightVal$[ebp]
  000a0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a3	89 4d bc	 mov	 DWORD PTR _dt_right$[ebp], ecx
$LN7@interpretA:

; 209  : 	}
; 210  : 
; 211  : 	switch (root->tokenType)

  000a6	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  000a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ac	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv79[ebp], ecx
  000b2	83 bd e8 fe ff
	ff 20		 cmp	 DWORD PTR tv79[ebp], 32	; 00000020H
  000b9	0f 87 1e 03 00
	00		 ja	 $LN2@interpretA
  000bf	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000c5	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@interpretA[edx]
  000cc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN35@interpretA[eax*4]
$LN8@interpretA:

; 212  : 	{
; 213  : 	case TT_PLUS:   return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_PLUS, dt_left, dt_right));

  000d3	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  000da	51		 push	 ecx
  000db	6a 00		 push	 0
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  000ea	83 c4 14	 add	 esp, 20			; 00000014H
  000ed	e9 eb 02 00 00	 jmp	 $LN2@interpretA
$LN9@interpretA:

; 214  : 	case TT_MINUS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_MINUS, dt_left, dt_right));

  000f2	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  000f9	51		 push	 ecx
  000fa	6a 01		 push	 1
  000fc	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  000ff	52		 push	 edx
  00100	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  00109	83 c4 14	 add	 esp, 20			; 00000014H
  0010c	e9 cc 02 00 00	 jmp	 $LN2@interpretA
$LN10@interpretA:

; 215  : 	case TT_MUL:    return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_MUL, dt_left, dt_right));

  00111	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00114	50		 push	 eax
  00115	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  00118	51		 push	 ecx
  00119	6a 02		 push	 2
  0011b	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0011e	52		 push	 edx
  0011f	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  00128	83 c4 14	 add	 esp, 20			; 00000014H
  0012b	e9 ad 02 00 00	 jmp	 $LN2@interpretA
$LN11@interpretA:

; 216  : 	case TT_DIV: 	return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_DIV, dt_left, dt_right));

  00130	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00133	50		 push	 eax
  00134	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  00137	51		 push	 ecx
  00138	6a 03		 push	 3
  0013a	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0013d	52		 push	 edx
  0013e	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  00147	83 c4 14	 add	 esp, 20			; 00000014H
  0014a	e9 8e 02 00 00	 jmp	 $LN2@interpretA
$LN12@interpretA:

; 217  : 	case TT_POW:    return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_POW, dt_left, dt_right));

  0014f	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00152	50		 push	 eax
  00153	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  00156	51		 push	 ecx
  00157	6a 04		 push	 4
  00159	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0015c	52		 push	 edx
  0015d	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  00166	83 c4 14	 add	 esp, 20			; 00000014H
  00169	e9 6f 02 00 00	 jmp	 $LN2@interpretA
$LN13@interpretA:

; 218  : 
; 219  : 	case TT_INT:         *(root->data->intVal) *= root->data->minusVal;     return root->data;

  0016e	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00171	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00174	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00177	8b 55 08	 mov	 edx, DWORD PTR _root$[ebp]
  0017a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0017d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00180	99		 cdq
  00181	52		 push	 edx
  00182	50		 push	 eax
  00183	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00186	52		 push	 edx
  00187	8b 01		 mov	 eax, DWORD PTR [ecx]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 __allmul
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR _root$[ebp]
  00192	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00195	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00198	89 01		 mov	 DWORD PTR [ecx], eax
  0019a	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0019d	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001a0	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001a3	e9 35 02 00 00	 jmp	 $LN2@interpretA
$LN14@interpretA:

; 220  : 	case TT_FLOAT:       *(root->data->doubleVal) *= root->data->minusVal;  return root->data;

  001a8	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001ab	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001ae	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001b1	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001b4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001b7	f2 0f 2a 41 18	 cvtsi2sd xmm0, DWORD PTR [ecx+24]
  001bc	f2 0f 59 02	 mulsd	 xmm0, QWORD PTR [edx]
  001c0	8b 55 08	 mov	 edx, DWORD PTR _root$[ebp]
  001c3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001c6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001c9	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
  001cd	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001d0	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001d3	e9 05 02 00 00	 jmp	 $LN2@interpretA
$LN15@interpretA:

; 221  : 	case TT_BOOL_TRUE:   return root->data;

  001d8	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001db	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001de	e9 fa 01 00 00	 jmp	 $LN2@interpretA
$LN16@interpretA:

; 222  : 	case TT_BOOL_FALSE:  return root->data;

  001e3	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001e6	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001e9	e9 ef 01 00 00	 jmp	 $LN2@interpretA
$LN17@interpretA:

; 223  : 	case TT_IDENT:
; 224  : 	{
; 225  : 		curIdent = (struct IDENT_tokenData*)symtable_getItem(root->varName);

  001ee	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  001f1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001f4	51		 push	 ecx
  001f5	e8 00 00 00 00	 call	 _symtable_getItem
  001fa	83 c4 04	 add	 esp, 4
  001fd	89 45 e0	 mov	 DWORD PTR _curIdent$[ebp], eax

; 226  : 		if (curIdent == NULL)

  00200	83 7d e0 00	 cmp	 DWORD PTR _curIdent$[ebp], 0
  00204	75 1e		 jne	 SHORT $LN18@interpretA

; 227  : 		{
; 228  : 			printf("[ERROR] variable does not exist\n");

  00206	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@HLPGCBMK@?$FLERROR?$FN?5variable?5does?5not?5exist@
  0020b	e8 00 00 00 00	 call	 _printf
  00210	83 c4 04	 add	 esp, 4

; 229  : 			exit(1);

  00213	8b f4		 mov	 esi, esp
  00215	6a 01		 push	 1
  00217	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  0021d	3b f4		 cmp	 esi, esp
  0021f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN18@interpretA:

; 230  : 		}
; 231  : 		int dt = curIdent->data->dataType;

  00224	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  00227	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0022a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0022d	89 55 b0	 mov	 DWORD PTR _dt$1[ebp], edx

; 232  : 
; 233  : 		if (dt == DT_INT)

  00230	83 7d b0 00	 cmp	 DWORD PTR _dt$1[ebp], 0
  00234	75 2f		 jne	 SHORT $LN19@interpretA

; 234  : 		{
; 235  : 			*(curIdent->data->intVal) *= root->intVal;

  00236	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  00239	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0023c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0023f	8b 45 08	 mov	 eax, DWORD PTR _root$[ebp]
  00242	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00245	51		 push	 ecx
  00246	8b 00		 mov	 eax, DWORD PTR [eax]
  00248	50		 push	 eax
  00249	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0024c	51		 push	 ecx
  0024d	8b 12		 mov	 edx, DWORD PTR [edx]
  0024f	52		 push	 edx
  00250	e8 00 00 00 00	 call	 __allmul
  00255	8b 4d e0	 mov	 ecx, DWORD PTR _curIdent$[ebp]
  00258	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  0025b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0025e	89 01		 mov	 DWORD PTR [ecx], eax
  00260	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 236  : 		}

  00263	eb 7d		 jmp	 SHORT $LN24@interpretA
$LN19@interpretA:

; 237  : 		else if (dt == DT_FLOAT)

  00265	83 7d b0 02	 cmp	 DWORD PTR _dt$1[ebp], 2
  00269	75 29		 jne	 SHORT $LN21@interpretA

; 238  : 		{
; 239  : 			*(curIdent->data->doubleVal) *= root->intVal;

  0026b	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  0026e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00271	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00274	8b 55 08	 mov	 edx, DWORD PTR _root$[ebp]
  00277	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00279	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0027c	e8 00 00 00 00	 call	 __ltod3
  00281	f2 0f 59 06	 mulsd	 xmm0, QWORD PTR [esi]
  00285	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  00288	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0028b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0028e	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0

; 240  : 		}

  00292	eb 4e		 jmp	 SHORT $LN24@interpretA
$LN21@interpretA:

; 241  : 		else if (dt == DT_BOOL)

  00294	83 7d b0 05	 cmp	 DWORD PTR _dt$1[ebp], 5
  00298	75 2a		 jne	 SHORT $LN23@interpretA

; 242  : 		{
; 243  : 			*(curIdent->data->boolVal) *= root->intVal;

  0029a	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  0029d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002a3	8b 02		 mov	 eax, DWORD PTR [edx]
  002a5	99		 cdq
  002a6	8b 4d 08	 mov	 ecx, DWORD PTR _root$[ebp]
  002a9	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  002ac	56		 push	 esi
  002ad	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002af	51		 push	 ecx
  002b0	52		 push	 edx
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 __allmul
  002b7	8b 55 e0	 mov	 edx, DWORD PTR _curIdent$[ebp]
  002ba	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  002bd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002c0	89 02		 mov	 DWORD PTR [edx], eax

; 244  : 		}

  002c2	eb 1e		 jmp	 SHORT $LN24@interpretA
$LN23@interpretA:

; 245  : 		else
; 246  : 		{
; 247  : 			printf("[ERROR] invalid datatype\n");

  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OIGNKPAC@?$FLERROR?$FN?5invalid?5datatype?6@
  002c9	e8 00 00 00 00	 call	 _printf
  002ce	83 c4 04	 add	 esp, 4

; 248  : 			exit(1);

  002d1	8b f4		 mov	 esi, esp
  002d3	6a 01		 push	 1
  002d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  002db	3b f4		 cmp	 esi, esp
  002dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN24@interpretA:

; 249  : 		}
; 250  : 	}
; 251  : 	return DATA_STRUCT_cpy(curIdent->data);

  002e2	8b 45 e0	 mov	 eax, DWORD PTR _curIdent$[ebp]
  002e5	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002e8	51		 push	 ecx
  002e9	e8 00 00 00 00	 call	 _DATA_STRUCT_cpy
  002ee	83 c4 04	 add	 esp, 4
  002f1	e9 e7 00 00 00	 jmp	 $LN2@interpretA
$LN25@interpretA:

; 252  : 
; 253  : 
; 254  : 	case TT_EQUALS_CMP:      return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_EQUALS_CMP, dt_left, dt_right));

  002f6	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  002f9	50		 push	 eax
  002fa	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  002fd	51		 push	 ecx
  002fe	6a 16		 push	 22			; 00000016H
  00300	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00303	52		 push	 edx
  00304	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00307	50		 push	 eax
  00308	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  0030d	83 c4 14	 add	 esp, 20			; 00000014H
  00310	e9 c8 00 00 00	 jmp	 $LN2@interpretA
$LN26@interpretA:

; 255  : 	case TT_NOT_EQUALS:      return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_NOT_EQUALS, dt_left, dt_right));

  00315	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00318	50		 push	 eax
  00319	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  0031c	51		 push	 ecx
  0031d	6a 1a		 push	 26			; 0000001aH
  0031f	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00322	52		 push	 edx
  00323	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00326	50		 push	 eax
  00327	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  0032c	83 c4 14	 add	 esp, 20			; 00000014H
  0032f	e9 a9 00 00 00	 jmp	 $LN2@interpretA
$LN27@interpretA:

; 256  : 	case TT_GREATER_EQUALS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_GREATER_EQUALS, dt_left, dt_right));

  00334	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00337	50		 push	 eax
  00338	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  0033b	51		 push	 ecx
  0033c	6a 1d		 push	 29			; 0000001dH
  0033e	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00341	52		 push	 edx
  00342	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  0034b	83 c4 14	 add	 esp, 20			; 00000014H
  0034e	e9 8a 00 00 00	 jmp	 $LN2@interpretA
$LN28@interpretA:

; 257  : 	case TT_SMALLER_EQUALS:  return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_SMALLER_EQUALS, dt_left, dt_right));

  00353	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00356	50		 push	 eax
  00357	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  0035a	51		 push	 ecx
  0035b	6a 1e		 push	 30			; 0000001eH
  0035d	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00360	52		 push	 edx
  00361	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  0036a	83 c4 14	 add	 esp, 20			; 00000014H
  0036d	eb 6e		 jmp	 SHORT $LN2@interpretA
$LN29@interpretA:

; 258  : 	case TT_GREATER:         return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_GREATER, dt_left, dt_right));

  0036f	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  00372	50		 push	 eax
  00373	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  00376	51		 push	 ecx
  00377	6a 1b		 push	 27			; 0000001bH
  00379	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  0037c	52		 push	 edx
  0037d	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  00386	83 c4 14	 add	 esp, 20			; 00000014H
  00389	eb 52		 jmp	 SHORT $LN2@interpretA
$LN30@interpretA:

; 259  : 	case TT_SMALLER:         return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_SMALLER, dt_left, dt_right));

  0038b	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  0038e	50		 push	 eax
  0038f	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  00392	51		 push	 ecx
  00393	6a 1c		 push	 28			; 0000001cH
  00395	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  00398	52		 push	 edx
  00399	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  003a2	83 c4 14	 add	 esp, 20			; 00000014H
  003a5	eb 36		 jmp	 SHORT $LN2@interpretA
$LN31@interpretA:

; 260  : 	case TT_AND:             return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_AND, dt_left, dt_right));

  003a7	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  003aa	50		 push	 eax
  003ab	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  003ae	51		 push	 ecx
  003af	6a 17		 push	 23			; 00000017H
  003b1	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  003b4	52		 push	 edx
  003b5	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  003be	83 c4 14	 add	 esp, 20			; 00000014H
  003c1	eb 1a		 jmp	 SHORT $LN2@interpretA
$LN32@interpretA:

; 261  : 	case TT_OR:              return(RETURN_DATATYPE_NUM(leftVal, rightVal, TT_OR, dt_left, dt_right));

  003c3	8b 45 bc	 mov	 eax, DWORD PTR _dt_right$[ebp]
  003c6	50		 push	 eax
  003c7	8b 4d c8	 mov	 ecx, DWORD PTR _dt_left$[ebp]
  003ca	51		 push	 ecx
  003cb	6a 18		 push	 24			; 00000018H
  003cd	8b 55 ec	 mov	 edx, DWORD PTR _rightVal$[ebp]
  003d0	52		 push	 edx
  003d1	8b 45 f8	 mov	 eax, DWORD PTR _leftVal$[ebp]
  003d4	50		 push	 eax
  003d5	e8 00 00 00 00	 call	 _RETURN_DATATYPE_NUM
  003da	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@interpretA:

; 262  : 
; 263  : 	}
; 264  : }

  003dd	5f		 pop	 edi
  003de	5e		 pop	 esi
  003df	5b		 pop	 ebx
  003e0	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  003e6	3b ec		 cmp	 ebp, esp
  003e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ed	8b e5		 mov	 esp, ebp
  003ef	5d		 pop	 ebp
  003f0	c3		 ret	 0
  003f1	0f 1f 00	 npad	 3
$LN35@interpretA:
  003f4	00 00 00 00	 DD	 $LN8@interpretA
  003f8	00 00 00 00	 DD	 $LN9@interpretA
  003fc	00 00 00 00	 DD	 $LN10@interpretA
  00400	00 00 00 00	 DD	 $LN11@interpretA
  00404	00 00 00 00	 DD	 $LN12@interpretA
  00408	00 00 00 00	 DD	 $LN13@interpretA
  0040c	00 00 00 00	 DD	 $LN14@interpretA
  00410	00 00 00 00	 DD	 $LN17@interpretA
  00414	00 00 00 00	 DD	 $LN25@interpretA
  00418	00 00 00 00	 DD	 $LN31@interpretA
  0041c	00 00 00 00	 DD	 $LN32@interpretA
  00420	00 00 00 00	 DD	 $LN26@interpretA
  00424	00 00 00 00	 DD	 $LN29@interpretA
  00428	00 00 00 00	 DD	 $LN30@interpretA
  0042c	00 00 00 00	 DD	 $LN27@interpretA
  00430	00 00 00 00	 DD	 $LN28@interpretA
  00434	00 00 00 00	 DD	 $LN15@interpretA
  00438	00 00 00 00	 DD	 $LN16@interpretA
  0043c	00 00 00 00	 DD	 $LN2@interpretA
$LN34@interpretA:
  00440	00		 DB	 0
  00441	01		 DB	 1
  00442	02		 DB	 2
  00443	03		 DB	 3
  00444	04		 DB	 4
  00445	05		 DB	 5
  00446	12		 DB	 18			; 00000012H
  00447	12		 DB	 18			; 00000012H
  00448	12		 DB	 18			; 00000012H
  00449	12		 DB	 18			; 00000012H
  0044a	12		 DB	 18			; 00000012H
  0044b	12		 DB	 18			; 00000012H
  0044c	12		 DB	 18			; 00000012H
  0044d	12		 DB	 18			; 00000012H
  0044e	12		 DB	 18			; 00000012H
  0044f	12		 DB	 18			; 00000012H
  00450	06		 DB	 6
  00451	12		 DB	 18			; 00000012H
  00452	07		 DB	 7
  00453	12		 DB	 18			; 00000012H
  00454	12		 DB	 18			; 00000012H
  00455	12		 DB	 18			; 00000012H
  00456	08		 DB	 8
  00457	09		 DB	 9
  00458	0a		 DB	 10			; 0000000aH
  00459	12		 DB	 18			; 00000012H
  0045a	0b		 DB	 11			; 0000000bH
  0045b	0c		 DB	 12			; 0000000cH
  0045c	0d		 DB	 13			; 0000000dH
  0045d	0e		 DB	 14			; 0000000eH
  0045e	0f		 DB	 15			; 0000000fH
  0045f	10		 DB	 16			; 00000010H
  00460	11		 DB	 17			; 00000011H
_interpretAST_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\header\tokens.h
;	COMDAT _DATA_STRUCT_cpy
_TEXT	SEGMENT
_intVal$ = -80						; size = 4
_doubleVal$ = -68					; size = 4
_charVal$ = -56						; size = 4
_strVal$ = -44						; size = 4
_minusVal$ = -32					; size = 4
_dt$ = -20						; size = 4
_boolVal$ = -8						; size = 4
_src$ = 8						; size = 4
_DATA_STRUCT_cpy PROC					; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8478A1A4_tokens@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 54   : 	int* boolVal = NULL;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _boolVal$[ebp], 0

; 55   : 	if (src->boolVal != NULL)

  0002f	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00032	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00036	74 26		 je	 SHORT $LN2@DATA_STRUC

; 56   : 	{
; 57   : 		boolVal = calloc(1, sizeof(int));

  00038	8b f4		 mov	 esi, esp
  0003a	6a 04		 push	 4
  0003c	6a 01		 push	 1
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00044	83 c4 08	 add	 esp, 8
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	89 45 f8	 mov	 DWORD PTR _boolVal$[ebp], eax

; 58   : 		*boolVal = *(src->boolVal);

  00051	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	8b 55 f8	 mov	 edx, DWORD PTR _boolVal$[ebp]
  0005a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005c	89 02		 mov	 DWORD PTR [edx], eax
$LN2@DATA_STRUC:

; 59   : 	}
; 60   : 	int dt = src->dataType;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00061	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00064	89 4d ec	 mov	 DWORD PTR _dt$[ebp], ecx

; 61   : 	int minusVal = src->minusVal;

  00067	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0006a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006d	89 4d e0	 mov	 DWORD PTR _minusVal$[ebp], ecx

; 62   : 	char* strVal = NULL;

  00070	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _strVal$[ebp], 0

; 63   : 	if (src->strVal != NULL)

  00077	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0007a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007d	74 15		 je	 SHORT $LN3@DATA_STRUC

; 64   : 	{
; 65   : 		strVal = strcpy(strVal, src->strVal);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	51		 push	 ecx
  00085	8b 55 d4	 mov	 edx, DWORD PTR _strVal$[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _strcpy
  0008e	83 c4 08	 add	 esp, 8
  00091	89 45 d4	 mov	 DWORD PTR _strVal$[ebp], eax
$LN3@DATA_STRUC:

; 66   : 	}
; 67   : 	char* charVal = calloc(1, sizeof(char));

  00094	8b f4		 mov	 esi, esp
  00096	6a 01		 push	 1
  00098	6a 01		 push	 1
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000a0	83 c4 08	 add	 esp, 8
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	89 45 c8	 mov	 DWORD PTR _charVal$[ebp], eax

; 68   : 	if (src->charVal != NULL)

  000ad	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  000b0	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000b4	74 0d		 je	 SHORT $LN4@DATA_STRUC

; 69   : 	{
; 70   : 		*charVal = *(src->charVal);

  000b6	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  000b9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000bc	8b 55 c8	 mov	 edx, DWORD PTR _charVal$[ebp]
  000bf	8a 01		 mov	 al, BYTE PTR [ecx]
  000c1	88 02		 mov	 BYTE PTR [edx], al
$LN4@DATA_STRUC:

; 71   : 	}
; 72   : 	long double* doubleVal = NULL;

  000c3	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _doubleVal$[ebp], 0

; 73   : 	if (src->doubleVal != NULL)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  000cd	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000d1	74 2a		 je	 SHORT $LN5@DATA_STRUC

; 74   : 	{
; 75   : 		doubleVal = calloc(0, sizeof(long double));

  000d3	8b f4		 mov	 esi, esp
  000d5	6a 08		 push	 8
  000d7	6a 00		 push	 0
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000df	83 c4 08	 add	 esp, 8
  000e2	3b f4		 cmp	 esi, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	89 45 bc	 mov	 DWORD PTR _doubleVal$[ebp], eax

; 76   : 		*doubleVal = *(src->doubleVal);

  000ec	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  000ef	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f2	8b 55 bc	 mov	 edx, DWORD PTR _doubleVal$[ebp]
  000f5	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  000f9	f2 0f 11 02	 movsd	 QWORD PTR [edx], xmm0
$LN5@DATA_STRUC:

; 77   : 	}
; 78   : 	long long* intVal = NULL;

  000fd	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _intVal$[ebp], 0

; 79   : 	if (src->intVal != NULL)

  00104	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00107	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0010b	74 2c		 je	 SHORT $LN6@DATA_STRUC

; 80   : 	{
; 81   : 		intVal = calloc(1, sizeof(long long));

  0010d	8b f4		 mov	 esi, esp
  0010f	6a 08		 push	 8
  00111	6a 01		 push	 1
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00119	83 c4 08	 add	 esp, 8
  0011c	3b f4		 cmp	 esi, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00123	89 45 b0	 mov	 DWORD PTR _intVal$[ebp], eax

; 82   : 		*intVal = *(src->intVal);

  00126	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00129	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0012c	8b 55 b0	 mov	 edx, DWORD PTR _intVal$[ebp]
  0012f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00131	89 02		 mov	 DWORD PTR [edx], eax
  00133	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00136	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN6@DATA_STRUC:

; 83   : 	}
; 84   : 	return new_DATA_STRUCT(strVal, boolVal, doubleVal, intVal, charVal, dt, minusVal);

  00139	8b 45 e0	 mov	 eax, DWORD PTR _minusVal$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d ec	 mov	 ecx, DWORD PTR _dt$[ebp]
  00140	51		 push	 ecx
  00141	8b 55 c8	 mov	 edx, DWORD PTR _charVal$[ebp]
  00144	52		 push	 edx
  00145	8b 45 b0	 mov	 eax, DWORD PTR _intVal$[ebp]
  00148	99		 cdq
  00149	52		 push	 edx
  0014a	50		 push	 eax
  0014b	8b 45 bc	 mov	 eax, DWORD PTR _doubleVal$[ebp]
  0014e	50		 push	 eax
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _boolVal$[ebp]
  00152	51		 push	 ecx
  00153	8b 55 d4	 mov	 edx, DWORD PTR _strVal$[ebp]
  00156	52		 push	 edx
  00157	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  0015c	83 c4 20	 add	 esp, 32			; 00000020H

; 85   : }

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00168	3b ec		 cmp	 ebp, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
_DATA_STRUCT_cpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\header\tokens.h
;	COMDAT _new_DATA_STRUCT
_TEXT	SEGMENT
_init$ = -8						; size = 4
_strVal$ = 8						; size = 4
_boolVal$ = 12						; size = 4
_doubleVal$ = 16					; size = 4
_intVal$ = 20						; size = 8
_charVal$ = 28						; size = 4
_dataType$ = 32						; size = 4
_minusVal$ = 36						; size = 4
_new_DATA_STRUCT PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8478A1A4_tokens@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   : 	struct DATA_STRUCT* init = malloc(sizeof(struct DATA_STRUCT));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 1c		 push	 28			; 0000001cH
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _init$[ebp], eax

; 30   : 	init->strVal = strVal;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _strVal$[ebp]
  00045	89 08		 mov	 DWORD PTR [eax], ecx

; 31   : 	init->boolVal = boolVal;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _boolVal$[ebp]
  0004d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 32   : 	init->doubleVal = doubleVal;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _doubleVal$[ebp]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 33   : 	init->intVal = intVal;

  00059	8b 45 14	 mov	 eax, DWORD PTR _intVal$[ebp]
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _init$[ebp]
  0005f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 34   : 	init->charVal = charVal;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00065	8b 4d 1c	 mov	 ecx, DWORD PTR _charVal$[ebp]
  00068	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 35   : 	init->dataType = dataType;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  0006e	8b 4d 20	 mov	 ecx, DWORD PTR _dataType$[ebp]
  00071	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 36   : 	init->minusVal = minusVal;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00077	8b 4d 24	 mov	 ecx, DWORD PTR _minusVal$[ebp]
  0007a	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 37   : 	return init;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]

; 38   : };

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_new_DATA_STRUCT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1850469A_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
