; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_05PKCPKOLM@undef@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8478A1A4_tokens@h DB 01H
__B4C58C4E_symtable@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKCPKOLM@undef@
CONST	SEGMENT
??_C@_05PKCPKOLM@undef@ DB 'undef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
PUBLIC	_symtable_add
PUBLIC	_symtable_getItem
PUBLIC	_newID_token
PUBLIC	_symtable_removeItem
PUBLIC	_getBucketVal
PUBLIC	_symtable_setItemVal
PUBLIC	__JustMyCode_Default
EXTRN	__imp__malloc:PROC
EXTRN	_newLinkedList:PROC
EXTRN	_LinkedList_add_end:PROC
EXTRN	_LinkedList_size:PROC
EXTRN	_LinkedList_remove:PROC
EXTRN	_strcmp:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullrem:PROC
EXTRN	__aullshr:PROC
EXTRN	_globl_symtable:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _symtable_setItemVal
_TEXT	SEGMENT
_curID$1 = -96						; size = 4
_varName_tail$2 = -84					; size = 4
_curID$3 = -72						; size = 4
_varName_head$4 = -60					; size = 4
_curNode_tail$ = -48					; size = 4
_curNode_head$ = -36					; size = 4
_bucket$ = -24						; size = 4
_hash$ = -12						; size = 8
_varName$ = 8						; size = 4
_value$ = 12						; size = 8
_symtable_setItemVal PROC				; COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00012	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   :     unsigned long long hash = hash_string(varName);

  00028	8b 45 08	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _hash_string
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00037	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 74   :     unsigned int bucket = getBucketVal(hash);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp+4]
  0003d	50		 push	 eax
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _hash$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _getBucketVal
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 e8	 mov	 DWORD PTR _bucket$[ebp], eax

; 75   : 
; 76   :     if (globl_symtable[bucket] == NULL)

  0004d	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00050	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _globl_symtable[eax*4], 0
  00058	75 05		 jne	 SHORT $LN4@symtable_s

; 77   :     {
; 78   :         return;

  0005a	e9 b6 00 00 00	 jmp	 $LN1@symtable_s
$LN4@symtable_s:

; 79   :     }
; 80   :     node_t* curNode_head = globl_symtable[bucket]->head;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00062	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  00069	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006b	89 55 dc	 mov	 DWORD PTR _curNode_head$[ebp], edx

; 81   :     node_t* curNode_tail = globl_symtable[bucket]->tail;

  0006e	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00071	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	89 55 d0	 mov	 DWORD PTR _curNode_tail$[ebp], edx
$LN2@symtable_s:

; 82   : 
; 83   :     while (curNode_head != NULL && curNode_tail != NULL)

  0007e	83 7d dc 00	 cmp	 DWORD PTR _curNode_head$[ebp], 0
  00082	0f 84 8d 00 00
	00		 je	 $LN1@symtable_s
  00088	83 7d d0 00	 cmp	 DWORD PTR _curNode_tail$[ebp], 0
  0008c	0f 84 83 00 00
	00		 je	 $LN1@symtable_s

; 84   :     {
; 85   :         char* varName_head = curNode_head->varName;

  00092	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  00095	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00098	89 4d c4	 mov	 DWORD PTR _varName_head$4[ebp], ecx

; 86   :         if (strcmp(varName, varName_head) == 0)

  0009b	8b 45 c4	 mov	 eax, DWORD PTR _varName_head$4[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _strcmp
  000a8	83 c4 08	 add	 esp, 8
  000ab	85 c0		 test	 eax, eax
  000ad	75 19		 jne	 SHORT $LN5@symtable_s

; 87   :         {
; 88   :             struct IDENT_tokenData* curID = (struct IDENT_tokenData*)curNode_head->data;

  000af	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	89 4d b8	 mov	 DWORD PTR _curID$3[ebp], ecx

; 89   :             curID->value = value;

  000b7	8b 45 b8	 mov	 eax, DWORD PTR _curID$3[ebp]
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  000bd	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000c0	8b 55 10	 mov	 edx, DWORD PTR _value$[ebp+4]
  000c3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 90   :             return;

  000c6	eb 4d		 jmp	 SHORT $LN1@symtable_s
$LN5@symtable_s:

; 91   :         }
; 92   :         char* varName_tail = curNode_tail->varName;

  000c8	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  000cb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ce	89 4d ac	 mov	 DWORD PTR _varName_tail$2[ebp], ecx

; 93   :         if (strcmp(varName, varName_tail) == 0)

  000d1	8b 45 ac	 mov	 eax, DWORD PTR _varName_tail$2[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 _strcmp
  000de	83 c4 08	 add	 esp, 8
  000e1	85 c0		 test	 eax, eax
  000e3	75 19		 jne	 SHORT $LN6@symtable_s

; 94   :         {
; 95   :             struct IDENT_tokenData* curID = (struct IDENT_tokenData*)curNode_head->data;

  000e5	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	89 4d a0	 mov	 DWORD PTR _curID$1[ebp], ecx

; 96   :             curID->value = value;

  000ed	8b 45 a0	 mov	 eax, DWORD PTR _curID$1[ebp]
  000f0	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  000f3	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000f6	8b 55 10	 mov	 edx, DWORD PTR _value$[ebp+4]
  000f9	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 97   :             return;

  000fc	eb 17		 jmp	 SHORT $LN1@symtable_s
$LN6@symtable_s:

; 98   :         }
; 99   :         curNode_head = curNode_head->next;

  000fe	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  00101	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00104	89 4d dc	 mov	 DWORD PTR _curNode_head$[ebp], ecx

; 100  :         curNode_tail = curNode_tail->last;

  00107	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  0010a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010d	89 4d d0	 mov	 DWORD PTR _curNode_tail$[ebp], ecx

; 101  :     }

  00110	e9 69 ff ff ff	 jmp	 $LN2@symtable_s
$LN1@symtable_s:

; 102  : }

  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	5b		 pop	 ebx
  00118	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0011e	3b ec		 cmp	 ebp, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
_symtable_setItemVal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _getBucketVal
_TEXT	SEGMENT
_hash$ = 8						; size = 8
_getBucketVal PROC					; COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 25   :     return (unsigned int)(hash % SYMTABLE_SIZE);

  00028	6a 00		 push	 0
  0002a	68 88 13 00 00	 push	 5000			; 00001388H
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _hash$[ebp+4]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _hash$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 __aullrem

; 26   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_getBucketVal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _hash_string
_TEXT	SEGMENT
_hash$ = -12						; size = 8
_s$ = 8							; size = 4
_hash_string PROC					; COMDAT

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 7    :     unsigned long long hash = 0;

  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	66 0f 13 45 f4	 movlpd	 QWORD PTR _hash$[ebp], xmm0

; 8    : 
; 9    :     for (; *s; ++s)

  00030	eb 09		 jmp	 SHORT $LN4@hash_strin
$LN2@hash_strin:
  00032	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00035	83 c0 01	 add	 eax, 1
  00038	89 45 08	 mov	 DWORD PTR _s$[ebp], eax
$LN4@hash_strin:
  0003b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00041	85 c9		 test	 ecx, ecx
  00043	74 47		 je	 SHORT $LN3@hash_strin

; 10   :     {
; 11   :         hash += *s;

  00045	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00048	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0004b	99		 cdq
  0004c	03 45 f4	 add	 eax, DWORD PTR _hash$[ebp]
  0004f	13 55 f8	 adc	 edx, DWORD PTR _hash$[ebp+4]
  00052	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00055	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 12   :         hash += (hash << 10);

  00058	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]
  0005e	b1 0a		 mov	 cl, 10			; 0000000aH
  00060	e8 00 00 00 00	 call	 __allshl
  00065	03 45 f4	 add	 eax, DWORD PTR _hash$[ebp]
  00068	13 55 f8	 adc	 edx, DWORD PTR _hash$[ebp+4]
  0006b	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  0006e	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 13   :         hash ^= (hash >> 6);

  00071	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  00074	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]
  00077	b1 06		 mov	 cl, 6
  00079	e8 00 00 00 00	 call	 __aullshr
  0007e	33 45 f4	 xor	 eax, DWORD PTR _hash$[ebp]
  00081	33 55 f8	 xor	 edx, DWORD PTR _hash$[ebp+4]
  00084	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00087	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 14   :     }

  0008a	eb a6		 jmp	 SHORT $LN2@hash_strin
$LN3@hash_strin:

; 15   : 
; 16   :     hash += (hash << 3);

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  0008f	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]
  00092	b1 03		 mov	 cl, 3
  00094	e8 00 00 00 00	 call	 __allshl
  00099	03 45 f4	 add	 eax, DWORD PTR _hash$[ebp]
  0009c	13 55 f8	 adc	 edx, DWORD PTR _hash$[ebp+4]
  0009f	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  000a2	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 17   :     hash ^= (hash >> 11);

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  000a8	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]
  000ab	b1 0b		 mov	 cl, 11			; 0000000bH
  000ad	e8 00 00 00 00	 call	 __aullshr
  000b2	33 45 f4	 xor	 eax, DWORD PTR _hash$[ebp]
  000b5	33 55 f8	 xor	 edx, DWORD PTR _hash$[ebp+4]
  000b8	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  000bb	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 18   :     hash += (hash << 15);

  000be	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]
  000c4	b1 0f		 mov	 cl, 15			; 0000000fH
  000c6	e8 00 00 00 00	 call	 __allshl
  000cb	03 45 f4	 add	 eax, DWORD PTR _hash$[ebp]
  000ce	13 55 f8	 adc	 edx, DWORD PTR _hash$[ebp+4]
  000d1	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  000d4	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 19   : 
; 20   :     return hash;

  000d7	8b 45 f4	 mov	 eax, DWORD PTR _hash$[ebp]
  000da	8b 55 f8	 mov	 edx, DWORD PTR _hash$[ebp+4]

; 21   : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_hash_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _symtable_removeItem
_TEXT	SEGMENT
_varname_tail$1 = -96					; size = 4
_varName_head$2 = -84					; size = 4
_curIndex_tail$ = -72					; size = 4
_curIndex_head$ = -60					; size = 4
_curNode_tail$ = -48					; size = 4
_curNode_head$ = -36					; size = 4
_bucket$ = -24						; size = 4
_hash$ = -12						; size = 8
_varName$ = 8						; size = 4
_symtable_removeItem PROC				; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00012	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 107  :     unsigned long long hash = hash_string(varName);

  00028	8b 45 08	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _hash_string
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00037	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 108  :     unsigned int bucket = getBucketVal(hash);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp+4]
  0003d	50		 push	 eax
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _hash$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _getBucketVal
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 e8	 mov	 DWORD PTR _bucket$[ebp], eax

; 109  : 
; 110  :     if (globl_symtable[bucket] == NULL)

  0004d	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00050	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _globl_symtable[eax*4], 0
  00058	75 08		 jne	 SHORT $LN4@symtable_r

; 111  :     {
; 112  :         return -1;

  0005a	83 c8 ff	 or	 eax, -1
  0005d	e9 eb 00 00 00	 jmp	 $LN1@symtable_r
$LN4@symtable_r:

; 113  :     }
; 114  :     node_t* curNode_head = globl_symtable[bucket]->head;

  00062	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00065	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  0006c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006e	89 55 dc	 mov	 DWORD PTR _curNode_head$[ebp], edx

; 115  :     node_t* curNode_tail = globl_symtable[bucket]->tail;

  00071	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00074	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  0007b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007e	89 55 d0	 mov	 DWORD PTR _curNode_tail$[ebp], edx

; 116  :     int curIndex_head = 0;

  00081	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _curIndex_head$[ebp], 0

; 117  :     int curIndex_tail = LinkedList_size(globl_symtable[bucket]) - 1;

  00088	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  0008b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 _LinkedList_size
  00098	83 c4 04	 add	 esp, 4
  0009b	83 e8 01	 sub	 eax, 1
  0009e	89 45 b8	 mov	 DWORD PTR _curIndex_tail$[ebp], eax
$LN2@symtable_r:

; 118  :     while (curNode_head != NULL || curNode_tail != NULL)

  000a1	83 7d dc 00	 cmp	 DWORD PTR _curNode_head$[ebp], 0
  000a5	75 0a		 jne	 SHORT $LN5@symtable_r
  000a7	83 7d d0 00	 cmp	 DWORD PTR _curNode_tail$[ebp], 0
  000ab	0f 84 99 00 00
	00		 je	 $LN3@symtable_r
$LN5@symtable_r:

; 119  :     {
; 120  :         char* varName_head = curNode_head->varName;

  000b1	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  000b4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b7	89 4d ac	 mov	 DWORD PTR _varName_head$2[ebp], ecx

; 121  :         if (strcmp(varName, varName_head) == 0)

  000ba	8b 45 ac	 mov	 eax, DWORD PTR _varName_head$2[ebp]
  000bd	50		 push	 eax
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _strcmp
  000c7	83 c4 08	 add	 esp, 8
  000ca	85 c0		 test	 eax, eax
  000cc	75 1b		 jne	 SHORT $LN6@symtable_r

; 122  :         {
; 123  :             //  free(curNode_head->data);
; 124  :             LinkedList_remove(globl_symtable[bucket], curIndex_head);

  000ce	8b 45 c4	 mov	 eax, DWORD PTR _curIndex_head$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d e8	 mov	 ecx, DWORD PTR _bucket$[ebp]
  000d5	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _globl_symtable[ecx*4]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _LinkedList_remove
  000e2	83 c4 08	 add	 esp, 8

; 125  :             return 0;

  000e5	33 c0		 xor	 eax, eax
  000e7	eb 64		 jmp	 SHORT $LN1@symtable_r
$LN6@symtable_r:

; 126  :         }
; 127  :         char* varname_tail = curNode_tail->varName;

  000e9	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  000ec	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ef	89 4d a0	 mov	 DWORD PTR _varname_tail$1[ebp], ecx

; 128  :         if (strcmp(varName, varName_head) == 0)

  000f2	8b 45 ac	 mov	 eax, DWORD PTR _varName_head$2[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 _strcmp
  000ff	83 c4 08	 add	 esp, 8
  00102	85 c0		 test	 eax, eax
  00104	75 1b		 jne	 SHORT $LN7@symtable_r

; 129  :         {
; 130  :             //  free(curNode_tail->data);
; 131  :             LinkedList_remove(globl_symtable[bucket], curIndex_tail);

  00106	8b 45 b8	 mov	 eax, DWORD PTR _curIndex_tail$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d e8	 mov	 ecx, DWORD PTR _bucket$[ebp]
  0010d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _globl_symtable[ecx*4]
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 _LinkedList_remove
  0011a	83 c4 08	 add	 esp, 8

; 132  :             return 0;

  0011d	33 c0		 xor	 eax, eax
  0011f	eb 2c		 jmp	 SHORT $LN1@symtable_r
$LN7@symtable_r:

; 133  :         }
; 134  :         curIndex_head++;

  00121	8b 45 c4	 mov	 eax, DWORD PTR _curIndex_head$[ebp]
  00124	83 c0 01	 add	 eax, 1
  00127	89 45 c4	 mov	 DWORD PTR _curIndex_head$[ebp], eax

; 135  :         curIndex_tail--;

  0012a	8b 45 b8	 mov	 eax, DWORD PTR _curIndex_tail$[ebp]
  0012d	83 e8 01	 sub	 eax, 1
  00130	89 45 b8	 mov	 DWORD PTR _curIndex_tail$[ebp], eax

; 136  :         curNode_head = curNode_head->next;

  00133	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  00136	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00139	89 4d dc	 mov	 DWORD PTR _curNode_head$[ebp], ecx

; 137  :         curNode_tail = curNode_tail->last;

  0013c	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  0013f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00142	89 4d d0	 mov	 DWORD PTR _curNode_tail$[ebp], ecx

; 138  :     }

  00145	e9 57 ff ff ff	 jmp	 $LN2@symtable_r
$LN3@symtable_r:

; 139  :     return -1;

  0014a	83 c8 ff	 or	 eax, -1
$LN1@symtable_r:

; 140  : }

  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  00156	3b ec		 cmp	 ebp, esp
  00158	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c3		 ret	 0
_symtable_removeItem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _newID_token
_TEXT	SEGMENT
_initID$ = -8						; size = 4
_dataType$ = 8						; size = 4
_init$ = 12						; size = 4
_value$ = 16						; size = 8
_varName$ = 24						; size = 4
_var$ = 28						; size = 4
_data$ = 32						; size = 4
_newID_token PROC					; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :     struct IDENT_tokenData* initID = malloc(sizeof(struct IDENT_tokenData));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 20		 push	 32			; 00000020H
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _initID$[ebp], eax

; 145  :     initID->dataType = dataType;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _dataType$[ebp]
  00045	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 146  :     initID->init = init;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _init$[ebp]
  0004e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 147  :     initID->value = value;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _value$[ebp]
  00057	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0005a	8b 55 14	 mov	 edx, DWORD PTR _value$[ebp+4]
  0005d	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 148  :     initID->varName = varName;

  00060	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  00063	8b 4d 18	 mov	 ecx, DWORD PTR _varName$[ebp]
  00066	89 08		 mov	 DWORD PTR [eax], ecx

; 149  :     initID->var = var;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  0006b	8b 4d 1c	 mov	 ecx, DWORD PTR _var$[ebp]
  0006e	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 150  :     initID->data = data;

  00071	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]
  00074	8b 4d 20	 mov	 ecx, DWORD PTR _data$[ebp]
  00077	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 151  :     return initID;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR _initID$[ebp]

; 152  : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_newID_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _symtable_getItem
_TEXT	SEGMENT
_varName_tail$1 = -72					; size = 4
_varName_head$2 = -60					; size = 4
_curNode_tail$ = -48					; size = 4
_curNode_head$ = -36					; size = 4
_bucket$ = -24						; size = 4
_hash$ = -12						; size = 8
_varName$ = 8						; size = 4
_symtable_getItem PROC					; COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :     unsigned long long hash = hash_string(varName);

  00028	8b 45 08	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _hash_string
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00037	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 44   :     unsigned int bucket = getBucketVal(hash);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp+4]
  0003d	50		 push	 eax
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _hash$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _getBucketVal
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 e8	 mov	 DWORD PTR _bucket$[ebp], eax

; 45   : 
; 46   :     if (globl_symtable[bucket] == NULL)

  0004d	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00050	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _globl_symtable[eax*4], 0
  00058	75 07		 jne	 SHORT $LN4@symtable_g

; 47   :     {
; 48   :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 89 00 00 00	 jmp	 $LN1@symtable_g
$LN4@symtable_g:

; 49   :     }
; 50   :     node_t* curNode_head = globl_symtable[bucket]->head;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00064	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  0006b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006d	89 55 dc	 mov	 DWORD PTR _curNode_head$[ebp], edx

; 51   :     node_t* curNode_tail = globl_symtable[bucket]->tail;

  00070	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00073	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _globl_symtable[eax*4]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	89 55 d0	 mov	 DWORD PTR _curNode_tail$[ebp], edx
$LN2@symtable_g:

; 52   : 
; 53   :     while (curNode_head != NULL && curNode_tail != NULL)

  00080	83 7d dc 00	 cmp	 DWORD PTR _curNode_head$[ebp], 0
  00084	74 62		 je	 SHORT $LN3@symtable_g
  00086	83 7d d0 00	 cmp	 DWORD PTR _curNode_tail$[ebp], 0
  0008a	74 5c		 je	 SHORT $LN3@symtable_g

; 54   :     {
; 55   :         char* varName_head = curNode_head->varName;

  0008c	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  0008f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00092	89 4d c4	 mov	 DWORD PTR _varName_head$2[ebp], ecx

; 56   :         if (strcmp(varName, varName_head) == 0)

  00095	8b 45 c4	 mov	 eax, DWORD PTR _varName_head$2[ebp]
  00098	50		 push	 eax
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 _strcmp
  000a2	83 c4 08	 add	 esp, 8
  000a5	85 c0		 test	 eax, eax
  000a7	75 07		 jne	 SHORT $LN5@symtable_g

; 57   :         {
; 58   :             return (struct IDENT_tokenData*)curNode_head->data;

  000a9	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  000ac	8b 00		 mov	 eax, DWORD PTR [eax]
  000ae	eb 3a		 jmp	 SHORT $LN1@symtable_g
$LN5@symtable_g:

; 59   :         }
; 60   :         char* varName_tail = curNode_tail->varName;

  000b0	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  000b3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b6	89 4d b8	 mov	 DWORD PTR _varName_tail$1[ebp], ecx

; 61   :         if (strcmp(varName, varName_tail) == 0)

  000b9	8b 45 b8	 mov	 eax, DWORD PTR _varName_tail$1[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR _varName$[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _strcmp
  000c6	83 c4 08	 add	 esp, 8
  000c9	85 c0		 test	 eax, eax
  000cb	75 07		 jne	 SHORT $LN6@symtable_g

; 62   :         {
; 63   :             return (struct IDENT_tokenData*)curNode_tail->data;

  000cd	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  000d0	8b 00		 mov	 eax, DWORD PTR [eax]
  000d2	eb 16		 jmp	 SHORT $LN1@symtable_g
$LN6@symtable_g:

; 64   :         }
; 65   :         curNode_head = curNode_head->next;

  000d4	8b 45 dc	 mov	 eax, DWORD PTR _curNode_head$[ebp]
  000d7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000da	89 4d dc	 mov	 DWORD PTR _curNode_head$[ebp], ecx

; 66   :         curNode_tail = curNode_tail->last;

  000dd	8b 45 d0	 mov	 eax, DWORD PTR _curNode_tail$[ebp]
  000e0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e3	89 4d d0	 mov	 DWORD PTR _curNode_tail$[ebp], ecx

; 67   :     }

  000e6	eb 98		 jmp	 SHORT $LN2@symtable_g
$LN3@symtable_g:

; 68   :     return NULL;

  000e8	33 c0		 xor	 eax, eax
$LN1@symtable_g:

; 69   : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_symtable_getItem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\symtable.c
;	COMDAT _symtable_add
_TEXT	SEGMENT
_bucket$ = -24						; size = 4
_hash$ = -12						; size = 8
_varName$ = 8						; size = 4
_data$ = 12						; size = 4
_symtable_add PROC					; COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B4C58C4E_symtable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 30   :     unsigned long long hash = hash_string(varName);

  00028	8b 45 08	 mov	 eax, DWORD PTR _varName$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _hash_string
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f4	 mov	 DWORD PTR _hash$[ebp], eax
  00037	89 55 f8	 mov	 DWORD PTR _hash$[ebp+4], edx

; 31   :     unsigned int bucket = getBucketVal(hash);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _hash$[ebp+4]
  0003d	50		 push	 eax
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _hash$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 _getBucketVal
  00047	83 c4 08	 add	 esp, 8
  0004a	89 45 e8	 mov	 DWORD PTR _bucket$[ebp], eax

; 32   : 
; 33   :     if (globl_symtable[bucket] == NULL)

  0004d	8b 45 e8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00050	83 3c 85 00 00
	00 00 00	 cmp	 DWORD PTR _globl_symtable[eax*4], 0
  00058	75 0f		 jne	 SHORT $LN2@symtable_a

; 34   :     {
; 35   :         globl_symtable[bucket] = newLinkedList();

  0005a	e8 00 00 00 00	 call	 _newLinkedList
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _bucket$[ebp]
  00062	89 04 8d 00 00
	00 00		 mov	 DWORD PTR _globl_symtable[ecx*4], eax
$LN2@symtable_a:

; 36   :     }
; 37   :     LinkedList_add_end(globl_symtable[bucket], data, 0, NULL, varName);

  00069	8b 45 08	 mov	 eax, DWORD PTR _varName$[ebp]
  0006c	50		 push	 eax
  0006d	6a 00		 push	 0
  0006f	6a 00		 push	 0
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 e8	 mov	 edx, DWORD PTR _bucket$[ebp]
  00078	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _globl_symtable[edx*4]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _LinkedList_add_end
  00085	83 c4 14	 add	 esp, 20			; 00000014H

; 38   : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_symtable_add ENDP
_TEXT	ENDS
END
