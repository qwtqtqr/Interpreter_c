; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_05PKCPKOLM@undef@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8478A1A4_tokens@h DB 01H
__B2063919_scope@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKCPKOLM@undef@
CONST	SEGMENT
??_C@_05PKCPKOLM@undef@ DB 'undef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
PUBLIC	_varStack_push_frame
PUBLIC	_varStack_getFrame
PUBLIC	_stackFrame_add_var
PUBLIC	_varStack_pop_frame
PUBLIC	_mkVarStack
PUBLIC	_mkframe
PUBLIC	_varStack_add
PUBLIC	_varStack_remove
PUBLIC	__JustMyCode_Default
EXTRN	__imp__malloc:PROC
EXTRN	_symtable_removeItem:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_globl_var_stack:DWORD
EXTRN	_var_stack_size:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _varStack_remove
_TEXT	SEGMENT
_prev_node$ = -20					; size = 4
_curNode$ = -8						; size = 4
_varStack$ = 8						; size = 4
_varStack_remove PROC					; COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 51   : 	struct STACK_FRAME* curNode = varStack->last;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _curNode$[ebp], ecx

; 52   : 	struct STACK_FRAME* prev_node = varStack->last;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _prev_node$[ebp], ecx

; 53   : 	if (curNode == NULL)

	cmp	DWORD PTR _curNode$[ebp], 0
	jne	SHORT $LN2@varStack_r

; 54   : 	{
; 55   : 		return;

	jmp	SHORT $LN1@varStack_r
$LN2@varStack_r:

; 56   : 	}
; 57   : 
; 58   : 	varStack->last = varStack->last->prev;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _varStack$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
$LN1@varStack_r:

; 59   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_varStack_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _varStack_add
_TEXT	SEGMENT
_last_last$ = -32					; size = 4
_curNode$ = -20						; size = 4
_node$ = -8						; size = 4
_varStack$ = 8						; size = 4
_data$ = 12						; size = 4
_varStack_add PROC					; COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 28   : 	if (varStack == NULL)

	cmp	DWORD PTR _varStack$[ebp], 0
	jne	SHORT $LN2@varStack_a

; 29   : 	{
; 30   : 		varStack = mkVarStack();

	call	_mkVarStack
	mov	DWORD PTR _varStack$[ebp], eax
$LN2@varStack_a:

; 31   : 	}
; 32   : 	struct STACK_FRAME* node = mkframe(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_mkframe
	add	esp, 4
	mov	DWORD PTR _node$[ebp], eax

; 33   : 
; 34   : 	struct STACK_FRAME* curNode = varStack->head;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curNode$[ebp], ecx

; 35   : 
; 36   : 	if (curNode == NULL)

	cmp	DWORD PTR _curNode$[ebp], 0
	jne	SHORT $LN3@varStack_a

; 37   : 	{
; 38   : 		varStack->head = node;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx

; 39   : 		varStack->last = node;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 40   : 		return;

	jmp	SHORT $LN1@varStack_a
$LN3@varStack_a:

; 41   : 	}
; 42   : 	struct STACK_FRAME* last_last = varStack->last;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _last_last$[ebp], ecx

; 43   : 	varStack->last->next = node;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx], edx

; 44   : 	varStack->last = varStack->last->next;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _varStack$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 45   : 	varStack->last->prev = last_last;

	mov	eax, DWORD PTR _varStack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _last_last$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@varStack_a:

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_varStack_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _mkframe
_TEXT	SEGMENT
_init$ = -8						; size = 4
_data$ = 8						; size = 4
_mkframe PROC						; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 10   : 	struct STACK_FRAME* init = malloc(sizeof(struct STACK_FRAME));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init$[ebp], eax

; 11   : 	init->data = data;

	mov	eax, DWORD PTR _init$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 12   : 	init->next = NULL;

	mov	eax, DWORD PTR _init$[ebp]
	mov	DWORD PTR [eax], 0

; 13   : 	init->prev = NULL;

	mov	eax, DWORD PTR _init$[ebp]
	mov	DWORD PTR [eax+4], 0

; 14   : 	return init;

	mov	eax, DWORD PTR _init$[ebp]

; 15   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mkframe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _mkVarStack
_TEXT	SEGMENT
_init$ = -8						; size = 4
_mkVarStack PROC					; COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 19   : 	struct VAR_STACK* init = malloc(sizeof(struct VAR_STACK));

	mov	esi, esp
	push	8
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init$[ebp], eax

; 20   : 	init->head = NULL;

	mov	eax, DWORD PTR _init$[ebp]
	mov	DWORD PTR [eax], 0

; 21   : 	init->last = NULL;

	mov	eax, DWORD PTR _init$[ebp]
	mov	DWORD PTR [eax+4], 0

; 22   : 	return init;

	mov	eax, DWORD PTR _init$[ebp]

; 23   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mkVarStack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _varStack_pop_frame
_TEXT	SEGMENT
_curVarName$1 = -32					; size = 4
_curNode$ = -20						; size = 4
_curSTACK$ = -8						; size = 4
_varStack_pop_frame PROC				; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 88   : 	struct VAR_STACK* curSTACK = varStack_getFrame();

	call	_varStack_getFrame
	mov	DWORD PTR _curSTACK$[ebp], eax

; 89   : 	struct STACK_FRAME* curNode = curSTACK->head;

	mov	eax, DWORD PTR _curSTACK$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curNode$[ebp], ecx
$LN2@varStack_p:

; 90   : 
; 91   : 	while (curNode != NULL)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	SHORT $LN3@varStack_p

; 92   : 	{
; 93   : 		char* curVarName = (char*)curNode->data;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _curVarName$1[ebp], ecx

; 94   : 		symtable_removeItem(curVarName);

	mov	eax, DWORD PTR _curVarName$1[ebp]
	push	eax
	call	_symtable_removeItem
	add	esp, 4

; 95   : 		curNode = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curNode$[ebp], ecx

; 96   : 	}

	jmp	SHORT $LN2@varStack_p
$LN3@varStack_p:

; 97   : 	varStack_remove(curSTACK);

	mov	eax, DWORD PTR _curSTACK$[ebp]
	push	eax
	call	_varStack_remove
	add	esp, 4

; 98   : 	var_stack_size--;

	mov	eax, DWORD PTR _var_stack_size
	sub	eax, 1
	mov	DWORD PTR _var_stack_size, eax

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_varStack_pop_frame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _stackFrame_add_var
_TEXT	SEGMENT
_varName$ = 8						; size = 4
_stackFrame_add_var PROC				; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 82   : 	varStack_add(varStack_getFrame(), varName);

	mov	eax, DWORD PTR _varName$[ebp]
	push	eax
	call	_varStack_getFrame
	push	eax
	call	_varStack_add
	add	esp, 8

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_stackFrame_add_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _varStack_getFrame
_TEXT	SEGMENT
_curNode$ = -8						; size = 4
_varStack_getFrame PROC					; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 70   : 	struct STACK_FRAME* curNode = globl_var_stack->head;

	mov	eax, DWORD PTR _globl_var_stack
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curNode$[ebp], ecx
$LN2@varStack_g:

; 71   : 	while (curNode->next != NULL)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@varStack_g

; 72   : 	{
; 73   : 
; 74   : 		curNode = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curNode$[ebp], ecx

; 75   : 	}

	jmp	SHORT $LN2@varStack_g
$LN3@varStack_g:

; 76   : 	return curNode->data;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_varStack_getFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\scope.c
;	COMDAT _varStack_push_frame
_TEXT	SEGMENT
_varStack_push_frame PROC				; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B2063919_scope@c
	call	@__CheckForDebuggerJustMyCode@4

; 64   : 	varStack_add(globl_var_stack, mkVarStack());

	call	_mkVarStack
	push	eax
	mov	eax, DWORD PTR _globl_var_stack
	push	eax
	call	_varStack_add
	add	esp, 8

; 65   : 	var_stack_size++;

	mov	eax, DWORD PTR _var_stack_size
	add	eax, 1
	mov	DWORD PTR _var_stack_size, eax

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_varStack_push_frame ENDP
_TEXT	ENDS
END
