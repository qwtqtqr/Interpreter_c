; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\variable.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IJDJACGD@print@				; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_05PKCPKOLM@undef@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
msvcjmc	SEGMENT
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__ED9CC025_corecrt_memcpy_s@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8478A1A4_tokens@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__E66679EA_variable@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKCPKOLM@undef@
CONST	SEGMENT
??_C@_05PKCPKOLM@undef@ DB 'undef', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print@
CONST	SEGMENT
??_C@_05IJDJACGD@print@ DB 'print', 00H			; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_genVarAST
PUBLIC	_genIdentAST
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0DB@LJCGOJNF@?$FLSYNTAX?5ERROR?$FN?5expected?5an?5iden@ ; `string'
PUBLIC	??_C@_0BI@COOHKODO@?$FLSYNTAX?5ERROR?$FN?5Line?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0DB@FPDFOMNO@?$FLSYNTAX?5ERROR?$FN?5variable?5needs?5a@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__exit:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_newID_token:PROC
EXTRN	_mkastnode_ident:PROC
EXTRN	_binexpr_int:PROC
EXTRN	_scan_curToken:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_Line:DWORD
EXTRN	_currentToken:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DB@FPDFOMNO@?$FLSYNTAX?5ERROR?$FN?5variable?5needs?5a@
CONST	SEGMENT
??_C@_0DB@FPDFOMNO@?$FLSYNTAX?5ERROR?$FN?5variable?5needs?5a@ DB '[SYNTAX'
	DB	' ERROR] variable needs a value (Line %d)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@COOHKODO@?$FLSYNTAX?5ERROR?$FN?5Line?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@COOHKODO@?$FLSYNTAX?5ERROR?$FN?5Line?5?$CFd?6@ DB '[SYNTAX ERRO'
	DB	'R] Line %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LJCGOJNF@?$FLSYNTAX?5ERROR?$FN?5expected?5an?5iden@
CONST	SEGMENT
??_C@_0DB@LJCGOJNF@?$FLSYNTAX?5ERROR?$FN?5expected?5an?5iden@ DB '[SYNTAX'
	DB	' ERROR] expected an identifier (Line %d)', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\variable.c
;	COMDAT _genIdentAST
_TEXT	SEGMENT
_varName$ = -32						; size = 4
_ID_token$ = -20					; size = 4
_node$ = -8						; size = 4
_genIdentAST PROC					; COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E66679EA_variable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   : 
; 48   : 	struct AST_Node* node = NULL;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0

; 49   : 
; 50   : 
; 51   : 	if (currentToken->tokenType != TT_IDENT)

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  00034	83 38 12	 cmp	 DWORD PTR [eax], 18	; 00000012H
  00037	74 24		 je	 SHORT $LN2@genIdentAS

; 52   : 	{
; 53   : 		printf("[SYNTAX ERROR] expected an identifier (Line %d)\n", Line);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR _Line
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LJCGOJNF@?$FLSYNTAX?5ERROR?$FN?5expected?5an?5iden@
  00044	e8 00 00 00 00	 call	 _printf
  00049	83 c4 08	 add	 esp, 8

; 54   : 		exit(1);

  0004c	8b f4		 mov	 esi, esp
  0004e	6a 01		 push	 1
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@genIdentAS:

; 55   : 	}
; 56   : 	struct Token* ID_token = currentToken;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  00062	89 45 ec	 mov	 DWORD PTR _ID_token$[ebp], eax

; 57   : 	char* varName = calloc(strlen(ID_token->IdentToken_name), sizeof(char));

  00065	8b f4		 mov	 esi, esp
  00067	6a 01		 push	 1
  00069	8b 45 ec	 mov	 eax, DWORD PTR _ID_token$[ebp]
  0006c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _strlen
  00075	83 c4 04	 add	 esp, 4
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0007f	83 c4 08	 add	 esp, 8
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	89 45 e0	 mov	 DWORD PTR _varName$[ebp], eax

; 58   : 	varName = strcpy(varName, ID_token->IdentToken_name);

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _ID_token$[ebp]
  0008f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00092	51		 push	 ecx
  00093	8b 55 e0	 mov	 edx, DWORD PTR _varName$[ebp]
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 _strcpy
  0009c	83 c4 08	 add	 esp, 8
  0009f	89 45 e0	 mov	 DWORD PTR _varName$[ebp], eax

; 59   : 	scan_curToken();

  000a2	e8 00 00 00 00	 call	 _scan_curToken

; 60   : 
; 61   : 	if (currentToken->tokenType == TT_OP_END)

  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  000ac	83 38 06	 cmp	 DWORD PTR [eax], 6
  000af	75 24		 jne	 SHORT $LN3@genIdentAS

; 62   : 	{
; 63   : 		printf("[SYNTAX ERROR] variable needs a value (Line %d)\n", Line);

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR _Line
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@FPDFOMNO@?$FLSYNTAX?5ERROR?$FN?5variable?5needs?5a@
  000bc	e8 00 00 00 00	 call	 _printf
  000c1	83 c4 08	 add	 esp, 8

; 64   : 		exit(1);

  000c4	8b f4		 mov	 esi, esp
  000c6	6a 01		 push	 1
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@genIdentAS:

; 65   : 	}
; 66   : 	if (currentToken->tokenType == TT_EQUALS)

  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  000da	83 38 13	 cmp	 DWORD PTR [eax], 19	; 00000013H
  000dd	75 66		 jne	 SHORT $LN4@genIdentAS

; 67   : 	{
; 68   : 		node = mkastnode_ident(TT_IDENT, 0, 0, binexpr_int(0, INTERRUPT_TOKEN_DEFAULT), NULL, newID_token(DT_INT, 1, 0, varName, 0, new_DATA_STRUCT(NULL, NULL, NULL, NULL, NULL, -1, 1)), varName, NULL);

  000df	6a 00		 push	 0
  000e1	8b 45 e0	 mov	 eax, DWORD PTR _varName$[ebp]
  000e4	50		 push	 eax
  000e5	6a 01		 push	 1
  000e7	6a ff		 push	 -1
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	6a 00		 push	 0
  000f1	6a 00		 push	 0
  000f3	6a 00		 push	 0
  000f5	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  000fa	83 c4 20	 add	 esp, 32			; 00000020H
  000fd	50		 push	 eax
  000fe	6a 00		 push	 0
  00100	8b 4d e0	 mov	 ecx, DWORD PTR _varName$[ebp]
  00103	51		 push	 ecx
  00104	6a 00		 push	 0
  00106	6a 00		 push	 0
  00108	6a 01		 push	 1
  0010a	6a 00		 push	 0
  0010c	e8 00 00 00 00	 call	 _newID_token
  00111	83 c4 1c	 add	 esp, 28			; 0000001cH
  00114	50		 push	 eax
  00115	6a 00		 push	 0
  00117	6a ff		 push	 -1
  00119	6a 00		 push	 0
  0011b	e8 00 00 00 00	 call	 _binexpr_int
  00120	83 c4 08	 add	 esp, 8
  00123	50		 push	 eax
  00124	83 ec 08	 sub	 esp, 8
  00127	0f 57 c0	 xorps	 xmm0, xmm0
  0012a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0012f	6a 00		 push	 0
  00131	6a 00		 push	 0
  00133	6a 12		 push	 18			; 00000012H
  00135	e8 00 00 00 00	 call	 _mkastnode_ident
  0013a	83 c4 28	 add	 esp, 40			; 00000028H
  0013d	89 45 f8	 mov	 DWORD PTR _node$[ebp], eax

; 69   : 		return node;

  00140	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00143	eb 27		 jmp	 SHORT $LN1@genIdentAS
$LN4@genIdentAS:

; 70   : 	}
; 71   : 
; 72   : 	printf("[SYNTAX ERROR] Line %d\n", Line);

  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR _Line
  0014a	50		 push	 eax
  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@COOHKODO@?$FLSYNTAX?5ERROR?$FN?5Line?5?$CFd?6@
  00150	e8 00 00 00 00	 call	 _printf
  00155	83 c4 08	 add	 esp, 8

; 73   : 	exit(1);

  00158	8b f4		 mov	 esi, esp
  0015a	6a 01		 push	 1
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00162	3b f4		 cmp	 esi, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 74   : 	return node;

  00169	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
$LN1@genIdentAS:

; 75   : }

  0016c	5f		 pop	 edi
  0016d	5e		 pop	 esi
  0016e	5b		 pop	 ebx
  0016f	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00175	3b ec		 cmp	 ebp, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
_genIdentAST ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\variable.c
;	COMDAT _genVarAST
_TEXT	SEGMENT
_varName$1 = -32					; size = 4
_ID_token$2 = -20					; size = 4
_node$ = -8						; size = 4
_genVarAST PROC						; COMDAT

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E66679EA_variable@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 10   : 	struct AST_Node* node = NULL;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _node$[ebp], 0

; 11   : 	if (currentToken->tokenType == TT_VAR)

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  00034	83 38 14	 cmp	 DWORD PTR [eax], 20	; 00000014H
  00037	0f 85 80 01 00
	00		 jne	 $LN2@genVarAST

; 12   : 	{
; 13   : 		scan_curToken();

  0003d	e8 00 00 00 00	 call	 _scan_curToken

; 14   : 
; 15   : 		if (currentToken->tokenType != TT_IDENT)

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  00047	83 38 12	 cmp	 DWORD PTR [eax], 18	; 00000012H
  0004a	74 24		 je	 SHORT $LN3@genVarAST

; 16   : 		{
; 17   : 			printf("[SYNTAX ERROR] expected an identifier (Line %d)\n", Line);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR _Line
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LJCGOJNF@?$FLSYNTAX?5ERROR?$FN?5expected?5an?5iden@
  00057	e8 00 00 00 00	 call	 _printf
  0005c	83 c4 08	 add	 esp, 8

; 18   : 			exit(1);

  0005f	8b f4		 mov	 esi, esp
  00061	6a 01		 push	 1
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@genVarAST:

; 19   : 		}
; 20   : 		struct Token* ID_token = currentToken;

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  00075	89 45 ec	 mov	 DWORD PTR _ID_token$2[ebp], eax

; 21   : 		char* varName = calloc(strlen(ID_token->IdentToken_name), sizeof(char));

  00078	8b f4		 mov	 esi, esp
  0007a	6a 01		 push	 1
  0007c	8b 45 ec	 mov	 eax, DWORD PTR _ID_token$2[ebp]
  0007f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _strlen
  00088	83 c4 04	 add	 esp, 4
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00092	83 c4 08	 add	 esp, 8
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 45 e0	 mov	 DWORD PTR _varName$1[ebp], eax

; 22   : 		varName = strcpy(varName, ID_token->IdentToken_name);

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _ID_token$2[ebp]
  000a2	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000a5	51		 push	 ecx
  000a6	8b 55 e0	 mov	 edx, DWORD PTR _varName$1[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 _strcpy
  000af	83 c4 08	 add	 esp, 8
  000b2	89 45 e0	 mov	 DWORD PTR _varName$1[ebp], eax

; 23   : 		scan_curToken();

  000b5	e8 00 00 00 00	 call	 _scan_curToken

; 24   : 
; 25   : 		if (currentToken->tokenType == TT_OP_END)

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  000bf	83 38 06	 cmp	 DWORD PTR [eax], 6
  000c2	75 65		 jne	 SHORT $LN4@genVarAST

; 26   : 		{
; 27   : 			node = mkastnode_ident(TT_IDENT, 0, 0, NULL, NULL, newID_token(DT_INT, 0, 0, varName, 1, new_DATA_STRUCT(NULL, NULL, NULL, NULL, NULL, -1, 1)), varName, NULL);

  000c4	6a 00		 push	 0
  000c6	8b 45 e0	 mov	 eax, DWORD PTR _varName$1[ebp]
  000c9	50		 push	 eax
  000ca	6a 01		 push	 1
  000cc	6a ff		 push	 -1
  000ce	6a 00		 push	 0
  000d0	6a 00		 push	 0
  000d2	6a 00		 push	 0
  000d4	6a 00		 push	 0
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  000df	83 c4 20	 add	 esp, 32			; 00000020H
  000e2	50		 push	 eax
  000e3	6a 01		 push	 1
  000e5	8b 4d e0	 mov	 ecx, DWORD PTR _varName$1[ebp]
  000e8	51		 push	 ecx
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	6a 00		 push	 0
  000f1	e8 00 00 00 00	 call	 _newID_token
  000f6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f9	50		 push	 eax
  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	83 ec 08	 sub	 esp, 8
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00109	6a 00		 push	 0
  0010b	6a 00		 push	 0
  0010d	6a 12		 push	 18			; 00000012H
  0010f	e8 00 00 00 00	 call	 _mkastnode_ident
  00114	83 c4 28	 add	 esp, 40			; 00000028H
  00117	89 45 f8	 mov	 DWORD PTR _node$[ebp], eax

; 28   : 			scan_curToken();

  0011a	e8 00 00 00 00	 call	 _scan_curToken

; 29   : 			return node;

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00122	e9 99 00 00 00	 jmp	 $LN1@genVarAST

; 30   : 		}

  00127	eb 70		 jmp	 SHORT $LN6@genVarAST
$LN4@genVarAST:

; 31   : 		else if (currentToken->tokenType == TT_EQUALS)

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR _currentToken
  0012e	83 38 13	 cmp	 DWORD PTR [eax], 19	; 00000013H
  00131	75 66		 jne	 SHORT $LN6@genVarAST

; 32   : 		{
; 33   : 			node = mkastnode_ident(TT_IDENT, 0, 0, binexpr_int(0, INTERRUPT_TOKEN_DEFAULT), NULL, newID_token(DT_INT, 1, 0, varName, 1, new_DATA_STRUCT(NULL, NULL, NULL, NULL, NULL, -1, 1)), varName, NULL);

  00133	6a 00		 push	 0
  00135	8b 45 e0	 mov	 eax, DWORD PTR _varName$1[ebp]
  00138	50		 push	 eax
  00139	6a 01		 push	 1
  0013b	6a ff		 push	 -1
  0013d	6a 00		 push	 0
  0013f	6a 00		 push	 0
  00141	6a 00		 push	 0
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	6a 00		 push	 0
  00149	e8 00 00 00 00	 call	 _new_DATA_STRUCT
  0014e	83 c4 20	 add	 esp, 32			; 00000020H
  00151	50		 push	 eax
  00152	6a 01		 push	 1
  00154	8b 4d e0	 mov	 ecx, DWORD PTR _varName$1[ebp]
  00157	51		 push	 ecx
  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	6a 01		 push	 1
  0015e	6a 00		 push	 0
  00160	e8 00 00 00 00	 call	 _newID_token
  00165	83 c4 1c	 add	 esp, 28			; 0000001cH
  00168	50		 push	 eax
  00169	6a 00		 push	 0
  0016b	6a ff		 push	 -1
  0016d	6a 00		 push	 0
  0016f	e8 00 00 00 00	 call	 _binexpr_int
  00174	83 c4 08	 add	 esp, 8
  00177	50		 push	 eax
  00178	83 ec 08	 sub	 esp, 8
  0017b	0f 57 c0	 xorps	 xmm0, xmm0
  0017e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00183	6a 00		 push	 0
  00185	6a 00		 push	 0
  00187	6a 12		 push	 18			; 00000012H
  00189	e8 00 00 00 00	 call	 _mkastnode_ident
  0018e	83 c4 28	 add	 esp, 40			; 00000028H
  00191	89 45 f8	 mov	 DWORD PTR _node$[ebp], eax

; 34   : 			return node;

  00194	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
  00197	eb 27		 jmp	 SHORT $LN1@genVarAST
$LN6@genVarAST:

; 35   : 		}
; 36   : 
; 37   : 		printf("[SYNTAX ERROR] Line %d\n", Line);

  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR _Line
  0019e	50		 push	 eax
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@COOHKODO@?$FLSYNTAX?5ERROR?$FN?5Line?5?$CFd?6@
  001a4	e8 00 00 00 00	 call	 _printf
  001a9	83 c4 08	 add	 esp, 8

; 38   : 		exit(1);

  001ac	8b f4		 mov	 esi, esp
  001ae	6a 01		 push	 1
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@genVarAST:

; 39   : 
; 40   : 	}
; 41   : 	return node;

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _node$[ebp]
$LN1@genVarAST:

; 42   : }

  001c0	5f		 pop	 edi
  001c1	5e		 pop	 esi
  001c2	5b		 pop	 ebx
  001c3	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  001c9	3b ec		 cmp	 ebp, esp
  001cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
_genVarAST ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\leonf\Desktop\vsCode\c\Interpreter\Interpreter_github\Interpreter\src\header\tokens.h
;	COMDAT _new_DATA_STRUCT
_TEXT	SEGMENT
_init$ = -8						; size = 4
_strVal$ = 8						; size = 4
_boolVal$ = 12						; size = 4
_doubleVal$ = 16					; size = 4
_intVal$ = 20						; size = 8
_charVal$ = 28						; size = 4
_dataType$ = 32						; size = 4
_minusVal$ = 36						; size = 4
_new_DATA_STRUCT PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8478A1A4_tokens@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   : 	struct DATA_STRUCT* init = malloc(sizeof(struct DATA_STRUCT));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 1c		 push	 28			; 0000001cH
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00032	83 c4 04	 add	 esp, 4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	89 45 f8	 mov	 DWORD PTR _init$[ebp], eax

; 30   : 	init->strVal = strVal;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _strVal$[ebp]
  00045	89 08		 mov	 DWORD PTR [eax], ecx

; 31   : 	init->boolVal = boolVal;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _boolVal$[ebp]
  0004d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 32   : 	init->doubleVal = doubleVal;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _doubleVal$[ebp]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 33   : 	init->intVal = intVal;

  00059	8b 45 14	 mov	 eax, DWORD PTR _intVal$[ebp]
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _init$[ebp]
  0005f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 34   : 	init->charVal = charVal;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00065	8b 4d 1c	 mov	 ecx, DWORD PTR _charVal$[ebp]
  00068	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 35   : 	init->dataType = dataType;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  0006e	8b 4d 20	 mov	 ecx, DWORD PTR _dataType$[ebp]
  00071	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 36   : 	init->minusVal = minusVal;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]
  00077	8b 4d 24	 mov	 ecx, DWORD PTR _minusVal$[ebp]
  0007a	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 37   : 	return init;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _init$[ebp]

; 38   : };

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_new_DATA_STRUCT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1850469A_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
